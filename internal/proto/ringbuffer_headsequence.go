
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns the sequence of the head. The head is the side of the ringbuffer where the oldest items in the ringbuffer
 * are found. If the RingBuffer is empty, the head will be one more than the tail.
 * The initial value of the head is 0 (1 more than tail).
 */
//@Generated("8b344dd781921c33f9f15f2eb0303b1c")
const (
    //hex: 0x170300
    RingbufferHeadSequenceRequestMessageType = 1508096
    //hex: 0x170301
    RingbufferHeadSequenceResponseMessageType = 1508097
    RingbufferHeadSequenceRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    RingbufferHeadSequenceResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    RingbufferHeadSequenceResponseInitialFrameSize = RingbufferHeadSequenceResponseResponseFieldOffset + LongSizeInBytes

)

func RingbufferHeadSequenceEncodeRequest(name string) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Ringbuffer.HeadSequence")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, RingbufferHeadSequenceRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func RingbufferHeadSequenceDecodeResponse(clientMessage *ClientMessage) func() (/*** the sequence of the head*/response int64) {
    return func() (/*** the sequence of the head*/response int64) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeLong(initialFrame.Content, RingbufferHeadSequenceResponseResponseFieldOffset)
        return
    }
}

