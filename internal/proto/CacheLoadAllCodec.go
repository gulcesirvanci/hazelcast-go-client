/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("7be699707c99006683e59192c9ef586e")
const (
    //hex: 0x131000
    CacheLoadAllRequestMessageType = 1249280
    //hex: 0x131001
    CacheLoadAllResponseMessageType = 1249281
    CacheLoadAllRequestReplaceExistingValuesFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheLoadAllRequestInitialFrameSize = CacheLoadAllRequestReplaceExistingValuesFieldOffset + bufutil.BooleanSizeInBytes
    CacheLoadAllResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheLoadAllRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * the keys to load
    */
keys []serialization.Data

    /**
    * when true existing values in the Cache will
    * be replaced by those loaded from a CacheLoader
    */
replaceExistingValues bool
}

func CacheLoadAllEncodeRequest(name string, keys []serialization.Data, replaceExistingValues bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.LoadAll")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheLoadAllRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CacheLoadAllRequestReplaceExistingValuesFieldOffset, replaceExistingValues)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encode(clientMessage, keys, DataCodecEncode)
    return clientMessage
}

func CacheLoadAllDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheLoadAllRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheLoadAllRequestParameters)
    initialFrame := iterator.Next()
    request.replaceExistingValues = bufutil.DecodeBoolean(initialFrame.Content, CacheLoadAllRequestReplaceExistingValuesFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.keys = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheLoadAllResponseParameters struct {
}

func CacheLoadAllEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheLoadAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheLoadAllResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CacheLoadAllDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheLoadAllResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheLoadAllResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

