/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Removes entries for the specified keys. The order in which the individual entries are removed is undefined.
 * For every entry in the key set, the following are called: any registered CacheEntryRemovedListeners if the cache
 * is a write-through cache, the CacheWriter. If the key set is empty, the CacheWriter is not called.
 */
//@Generated("0629fe1e89d7b779e5b652b542175276")
const (
    //hex: 0x130300
    CacheRemoveAllKeysRequestMessageType = 1245952
    //hex: 0x130301
    CacheRemoveAllKeysResponseMessageType = 1245953
    CacheRemoveAllKeysRequestCompletionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheRemoveAllKeysRequestInitialFrameSize = CacheRemoveAllKeysRequestCompletionIdFieldOffset + bufutil.IntSizeInBytes
    CacheRemoveAllKeysResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheRemoveAllKeysRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * The keys to remove.
    */
keys []serialization.Data

    /**
    * User generated id which shall be received as a field of the cache event upon completion of
    * the request in the cluster.
    */
completionId int
}

func CacheRemoveAllKeysEncodeRequest(name string, keys []serialization.Data, completionId int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.RemoveAllKeys")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheRemoveAllKeysRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, CacheRemoveAllKeysRequestCompletionIdFieldOffset, completionId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encode(clientMessage, keys, DataCodecEncode)
    return clientMessage
}

func CacheRemoveAllKeysDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheRemoveAllKeysRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheRemoveAllKeysRequestParameters)
    initialFrame := iterator.Next()
    request.completionId = bufutil.DecodeInt(initialFrame.Content, CacheRemoveAllKeysRequestCompletionIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.keys = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheRemoveAllKeysResponseParameters struct {
}

func CacheRemoveAllKeysEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheRemoveAllKeysResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheRemoveAllKeysResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CacheRemoveAllKeysDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheRemoveAllKeysResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheRemoveAllKeysResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

