/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns all scheduled tasks in for a given scheduler in the given member.
 */
//@Generated("c714447517daa5fc682224881dc62252")
const (
    //hex: 0x1A0400
    ScheduledExecutorGetAllScheduledFuturesRequestMessageType = 1704960
    //hex: 0x1A0401
    ScheduledExecutorGetAllScheduledFuturesResponseMessageType = 1704961
    ScheduledExecutorGetAllScheduledFuturesRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ScheduledExecutorGetAllScheduledFuturesResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ScheduledExecutorGetAllScheduledFuturesRequestParameters struct {

    /**
    * The name of the scheduler.
    */
schedulerName string
}

func ScheduledExecutorGetAllScheduledFuturesEncodeRequest(schedulerName string) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("ScheduledExecutor.GetAllScheduledFutures")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ScheduledExecutorGetAllScheduledFuturesRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, schedulerName)
    return clientMessage
}

func ScheduledExecutorGetAllScheduledFuturesDecodeRequest(clientMessage *bufutil.ClientMessagex) *ScheduledExecutorGetAllScheduledFuturesRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ScheduledExecutorGetAllScheduledFuturesRequestParameters)
    //empty initial frame
    iterator.Next()
    request.schedulerName = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ScheduledExecutorGetAllScheduledFuturesResponseParameters struct {
    /**
    * A list of scheduled task handlers used to construct the future proxies.
    */
handlers java.util.List<java.util.Map.Entry<com.hazelcast.cluster.Member, java.util.List<com.hazelcast.scheduledexecutor.ScheduledTaskHandler>>>
}

func ScheduledExecutorGetAllScheduledFuturesEncodeResponse(handlers java.util.Collection<java.util.Map.Entry<com.hazelcast.cluster.Member, java.util.List<com.hazelcast.scheduledexecutor.ScheduledTaskHandler>>> ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ScheduledExecutorGetAllScheduledFuturesResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ScheduledExecutorGetAllScheduledFuturesResponseMessageType)
    clientMessage.Add(initialFrame)

    EntryListCodec.encode(clientMessage, handlers, MemberCodecEncode, ListScheduledTaskHandlerCodecEncode)
    return clientMessage
}

func ScheduledExecutorGetAllScheduledFuturesDecodeResponse(clientMessage *bufutil.ClientMessagex) *ScheduledExecutorGetAllScheduledFuturesResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ScheduledExecutorGetAllScheduledFuturesResponseParameters)
    //empty initial frame
    iterator.Next()
    response.handlers = EntryListCodec.decode(iterator, MemberCodecDecode, ListScheduledTaskHandlerCodecDecode)
    return response
}

