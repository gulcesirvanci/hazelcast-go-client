/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Applies the user defined EntryProcessor to the entry mapped by the key. Returns the the object which is result of
 * the process() method of EntryProcessor.
 */
//@Generated("51f7ba513b4f20c6f9295521d3b3d358")
const (
    //hex: 0x012E00
    MapExecuteOnKeyRequestMessageType = 77312
    //hex: 0x012E01
    MapExecuteOnKeyResponseMessageType = 77313
    MapExecuteOnKeyRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapExecuteOnKeyRequestInitialFrameSize = MapExecuteOnKeyRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MapExecuteOnKeyResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapExecuteOnKeyRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * processor to execute on the map entry
    */
entryProcessor serialization.Data

    /**
    * the key of the map entry.
    */
key serialization.Data

    /**
    * TODO DOC
    */
threadId int64
}

func MapExecuteOnKeyEncodeRequest(name string, entryProcessor serialization.Data, key serialization.Data, threadId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.ExecuteOnKey")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapExecuteOnKeyRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapExecuteOnKeyRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, entryProcessor)
    DataCodec.encode(clientMessage, key)
    return clientMessage
}

func MapExecuteOnKeyDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapExecuteOnKeyRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapExecuteOnKeyRequestParameters)
    initialFrame := iterator.Next()
    request.threadId = bufutil.DecodeLong(initialFrame.Content, MapExecuteOnKeyRequestThreadIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.entryProcessor = DataCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapExecuteOnKeyResponseParameters struct {
    /**
    * result of entry process.
    */
/* @Nullable */ response serialization.Data
}

func MapExecuteOnKeyEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapExecuteOnKeyResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapExecuteOnKeyResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func MapExecuteOnKeyDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapExecuteOnKeyResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapExecuteOnKeyResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

