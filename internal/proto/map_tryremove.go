/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Tries to remove the entry with the given key from this map within the specified timeout value.
 * If the key is already locked by another thread and/or member, then this operation will wait the timeout
 * amount for acquiring the lock.
 */
//@Generated("682a2c936b00b9432ded521119de4eb3")
const (
    //hex: 0x010B00
    MapTryRemoveRequestMessageType = 68352
    //hex: 0x010B01
    MapTryRemoveResponseMessageType = 68353
    MapTryRemoveRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapTryRemoveRequestTimeoutFieldOffset = MapTryRemoveRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MapTryRemoveRequestInitialFrameSize = MapTryRemoveRequestTimeoutFieldOffset + bufutil.LongSizeInBytes
    MapTryRemoveResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapTryRemoveResponseInitialFrameSize = MapTryRemoveResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapTryRemoveRequestParameters struct {

    /**
    * Name of the map.
    */
name string

    /**
    * Key for the map entry.
    */
key serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * maximum time in milliseconds to wait for acquiring the lock for the key.
    */
timeout int64
}

func MapTryRemoveEncodeRequest(name string, key serialization.Data, threadId int64, timeout int64) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Map.TryRemove")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapTryRemoveRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapTryRemoveRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeLong(initialFrame.Content, MapTryRemoveRequestTimeoutFieldOffset, timeout)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, key)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapTryRemoveResponseParameters struct {
    /**
    * Returns true if successful, otherwise returns false
    */
response bool
}



func MapTryRemoveDecodeResponse(clientMessage *bufutil.ClientMessage) *MapTryRemoveResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapTryRemoveResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, MapTryRemoveResponseResponseFieldOffset)
    return response
}

