/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Attempts to acquire the given FencedLock on the given CP group.
 * If the lock is acquired, a valid fencing token (positive number) is
 * returned. If not acquired either because of max reentrant entry limit or
 * the lock is not free during the timeout duration, the call returns -1.
 * If the lock is held by some other endpoint when this method is called,
 * the caller thread is blocked until the lock is released or the timeout
 * duration passes. If the session is closed between reentrant acquires,
 * the call fails with {@code LockOwnershipLostException}.
 */
//@Generated("09b4b617d976f0b42c8b01a9d2339aa0")
const (
    //hex: 0x070200
    FencedLockTryLockRequestMessageType = 459264
    //hex: 0x070201
    FencedLockTryLockResponseMessageType = 459265
    FencedLockTryLockRequestSessionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    FencedLockTryLockRequestThreadIdFieldOffset = FencedLockTryLockRequestSessionIdFieldOffset + bufutil.LongSizeInBytes
    FencedLockTryLockRequestInvocationUidFieldOffset = FencedLockTryLockRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    FencedLockTryLockRequestTimeoutMsFieldOffset = FencedLockTryLockRequestInvocationUidFieldOffset + bufutil.UUIDSizeInBytes
    FencedLockTryLockRequestInitialFrameSize = FencedLockTryLockRequestTimeoutMsFieldOffset + bufutil.LongSizeInBytes
    FencedLockTryLockResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    FencedLockTryLockResponseInitialFrameSize = FencedLockTryLockResponseResponseFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type FencedLockTryLockRequestParameters struct {

    /**
    * CP group id of this FencedLock instance
    */
groupId RaftGroupId

    /**
    * Name of this FencedLock instance
    */
name string

    /**
    * Session ID of the caller
    */
sessionId int64

    /**
    * ID of the caller thread
    */
threadId int64

    /**
    * UID of this invocation
    */
invocationUid UUID

    /**
    * Duration to wait for lock acquire
    */
timeoutMs int64
}

func FencedLockTryLockEncodeRequest(groupId RaftGroupId, name string, sessionId int64, threadId int64, invocationUid UUID, timeoutMs int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("FencedLock.TryLock")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, FencedLockTryLockRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, FencedLockTryLockRequestSessionIdFieldOffset, sessionId)
    bufutil.EncodeLong(initialFrame.Content, FencedLockTryLockRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeUUID(initialFrame.Content, FencedLockTryLockRequestInvocationUidFieldOffset, invocationUid)
    bufutil.EncodeLong(initialFrame.Content, FencedLockTryLockRequestTimeoutMsFieldOffset, timeoutMs)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func FencedLockTryLockDecodeRequest(clientMessage *bufutil.ClientMessagex) *FencedLockTryLockRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(FencedLockTryLockRequestParameters)
    initialFrame := iterator.Next()
    request.sessionId = bufutil.DecodeLong(initialFrame.Content, FencedLockTryLockRequestSessionIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, FencedLockTryLockRequestThreadIdFieldOffset)
    request.invocationUid = bufutil.DecodeUUID(initialFrame.Content, FencedLockTryLockRequestInvocationUidFieldOffset)
    request.timeoutMs = bufutil.DecodeLong(initialFrame.Content, FencedLockTryLockRequestTimeoutMsFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type FencedLockTryLockResponseParameters struct {
    /**
    * a valid fencing token (positive number) if the lock
    * is acquired, otherwise -1.
    */
response int64
}

func FencedLockTryLockEncodeResponse(response int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, FencedLockTryLockResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, FencedLockTryLockResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, FencedLockTryLockResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func FencedLockTryLockDecodeResponse(clientMessage *bufutil.ClientMessagex) *FencedLockTryLockResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(FencedLockTryLockResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeLong(initialFrame.Content, FencedLockTryLockResponseResponseFieldOffset)
    return response
}

