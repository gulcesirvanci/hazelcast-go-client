/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element
 * to become available.
 */
//@Generated("54ca3e290652d32dd03783e939a6d007")
const (
    //hex: 0x030500
    QueuePollRequestMessageType = 197888
    //hex: 0x030501
    QueuePollResponseMessageType = 197889
    QueuePollRequestTimeoutMillisFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    QueuePollRequestInitialFrameSize = QueuePollRequestTimeoutMillisFieldOffset + bufutil.LongSizeInBytes
    QueuePollResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueuePollRequestParameters struct {

    /**
    * Name of the Queue
    */
name string

    /**
    * Maximum time in milliseconds to wait for acquiring the lock for the key.
    */
timeoutMillis int64
}

func QueuePollEncodeRequest(name string, timeoutMillis int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Queue.Poll")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, QueuePollRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, QueuePollRequestTimeoutMillisFieldOffset, timeoutMillis)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func QueuePollDecodeRequest(clientMessage *bufutil.ClientMessagex) *QueuePollRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(QueuePollRequestParameters)
    initialFrame := iterator.Next()
    request.timeoutMillis = bufutil.DecodeLong(initialFrame.Content, QueuePollRequestTimeoutMillisFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueuePollResponseParameters struct {
    /**
    * The head of this queue, or <tt>null</tt> if this queue is empty
    */
/* @Nullable */ response serialization.Data
}

func QueuePollEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, QueuePollResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, QueuePollResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func QueuePollDecodeResponse(clientMessage *bufutil.ClientMessagex) *QueuePollResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(QueuePollResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

