/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Updates TTL (time to live) value of the entry specified by {@code key} with a new TTL value.
 * New TTL value is valid from this operation is invoked, not from the original creation of the entry.
 * If the entry does not exist or already expired, then this call has no effect.
 * <p>
 * The entry will expire and get evicted after the TTL. If the TTL is 0,
 * then the entry lives forever. If the TTL is negative, then the TTL
 * from the map configuration will be used (default: forever).
 * 
 * If there is no entry with key {@code key}, this call has no effect.
 * 
 * <b>Warning:</b>
 * <p>
 * Time resolution for TTL is seconds. The given TTL value is rounded to the next closest second value.
 */
//@Generated("50203b20b238ba3f09513ffbdd3c3b90")
const (
    //hex: 0x014500
    MapSetTtlRequestMessageType = 83200
    //hex: 0x014501
    MapSetTtlResponseMessageType = 83201
    MapSetTtlRequestTtlFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapSetTtlRequestInitialFrameSize = MapSetTtlRequestTtlFieldOffset + bufutil.LongSizeInBytes
    MapSetTtlResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapSetTtlResponseInitialFrameSize = MapSetTtlResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapSetTtlRequestParameters struct {

    /**
    * Name of the map
    */
name string

    /**
    * Key for the map entry
    */
key serialization.Data

    /**
    * The duration in milliseconds after which this entry shall be deleted. O means infinite.
    */
ttl int64
}

func MapSetTtlEncodeRequest(name string, key serialization.Data, ttl int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.SetTtl")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapSetTtlRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapSetTtlRequestTtlFieldOffset, ttl)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    return clientMessage
}

func MapSetTtlDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapSetTtlRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapSetTtlRequestParameters)
    initialFrame := iterator.Next()
    request.ttl = bufutil.DecodeLong(initialFrame.Content, MapSetTtlRequestTtlFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapSetTtlResponseParameters struct {
    /**
    * 'true' if the entry is affected, 'false' otherwise
    */
response bool
}

func MapSetTtlEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapSetTtlResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapSetTtlResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, MapSetTtlResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MapSetTtlDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapSetTtlResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapSetTtlResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, MapSetTtlResponseResponseFieldOffset)
    return response
}

