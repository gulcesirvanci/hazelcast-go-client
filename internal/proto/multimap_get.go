/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns the collection of values associated with the key. The collection is NOT backed by the map, so changes to
 * the map are NOT reflected in the collection, and vice-versa.
 */
//@Generated("0311264f8d64af319fd18d9762816f4e")
const (
    //hex: 0x020200
    MultiMapGetRequestMessageType = 131584
    //hex: 0x020201
    MultiMapGetResponseMessageType = 131585
    MultiMapGetRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MultiMapGetRequestInitialFrameSize = MultiMapGetRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MultiMapGetResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MultiMapGetRequestParameters struct {

    /**
    * Name of the MultiMap
    */
name string

    /**
    * The key whose associated values are to be returned
    */
key serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64
}

func MultiMapGetEncodeRequest(name string, key serialization.Data, threadId int64) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = true
    clientMessage.SetOperationName("MultiMap.Get")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MultiMapGetRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MultiMapGetRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, key)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MultiMapGetResponseParameters struct {
    /**
    * The collection of the values associated with the key.
    */
response []serialization.Data
}



func MultiMapGetDecodeResponse(clientMessage *bufutil.ClientMessage) *MultiMapGetResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MultiMapGetResponseParameters)
    //empty initial frame
    iterator.Next()
    var result []serialization.Data
        //begin frame, list
        iterator.Next()
        for !bufutil.NextFrameIsDataStructureEndFrame(iterator) {
        result = append(result, bufutil.DataCodecDecode(iterator))
        }
        //end frame, list
        iterator.Next()
        response.response = result
    return response
}

