/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Associates a given value to the specified key and replicates it to the cluster. If there is an old value, it will
 * be replaced by the specified one and returned from the call. In addition, you have to specify a ttl and its TimeUnit
 * to define when the value is outdated and thus should be removed from the replicated map.
 */
//@Generated("60ed4377774b32f959cf0b081514a59f")
const (
    //hex: 0x0D0100
    ReplicatedMapPutRequestMessageType = 852224
    //hex: 0x0D0101
    ReplicatedMapPutResponseMessageType = 852225
    ReplicatedMapPutRequestTtlFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ReplicatedMapPutRequestInitialFrameSize = ReplicatedMapPutRequestTtlFieldOffset + bufutil.LongSizeInBytes
    ReplicatedMapPutResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ReplicatedMapPutRequestParameters struct {

    /**
    * Name of the ReplicatedMap
    */
name string

    /**
    * Key with which the specified value is to be associated.
    */
key serialization.Data

    /**
    * Value to be associated with the specified key
    */
value serialization.Data

    /**
    * ttl in milliseconds to be associated with the specified key-value pair
    */
ttl int64
}

func ReplicatedMapPutEncodeRequest(name string, key serialization.Data, value serialization.Data, ttl int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("ReplicatedMap.Put")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ReplicatedMapPutRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, ReplicatedMapPutRequestTtlFieldOffset, ttl)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    DataCodec.encode(clientMessage, value)
    return clientMessage
}

func ReplicatedMapPutDecodeRequest(clientMessage *bufutil.ClientMessagex) *ReplicatedMapPutRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ReplicatedMapPutRequestParameters)
    initialFrame := iterator.Next()
    request.ttl = bufutil.DecodeLong(initialFrame.Content, ReplicatedMapPutRequestTtlFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    request.value = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ReplicatedMapPutResponseParameters struct {
    /**
    * The old value if existed for the key.
    */
/* @Nullable */ response serialization.Data
}

func ReplicatedMapPutEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ReplicatedMapPutResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ReplicatedMapPutResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func ReplicatedMapPutDecodeResponse(clientMessage *bufutil.ClientMessagex) *ReplicatedMapPutResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ReplicatedMapPutResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

