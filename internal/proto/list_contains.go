
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns true if this list contains the specified element.
 */
//@Generated("375e648d60b3cb2ee48ad254f500ee15")
const (
    //hex: 0x050200
    ListContainsRequestMessageType = 328192
    //hex: 0x050201
    ListContainsResponseMessageType = 328193
    ListContainsRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    ListContainsResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    ListContainsResponseInitialFrameSize = ListContainsResponseResponseFieldOffset + BooleanSizeInBytes

)

func ListContainsEncodeRequest(name string, value serialization.Data) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("List.Contains")
	initialFrame := &Frame{Content: make([]byte, ListContainsResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ListContainsRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, value)

    return clientMessage
}


func ListContainsDecodeResponse(clientMessage *ClientMessage) func() (/*** True if this list contains the specified element, false otherwise*/response bool) {
    return func() (/*** True if this list contains the specified element, false otherwise*/response bool) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeBoolean(initialFrame.Content, ListContainsResponseResponseFieldOffset)
        return
    }
}

