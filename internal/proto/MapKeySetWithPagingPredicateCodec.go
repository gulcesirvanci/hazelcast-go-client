/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("de8c5e44da579a0c75245e130fb676f6")
const (
    //hex: 0x013400
    MapKeySetWithPagingPredicateRequestMessageType = 78848
    //hex: 0x013401
    MapKeySetWithPagingPredicateResponseMessageType = 78849
    MapKeySetWithPagingPredicateRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapKeySetWithPagingPredicateResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapKeySetWithPagingPredicateRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * specified query criteria.
    */
predicate serialization.Data
}

func MapKeySetWithPagingPredicateEncodeRequest(name string, predicate serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.KeySetWithPagingPredicate")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapKeySetWithPagingPredicateRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, predicate)
    return clientMessage
}

func MapKeySetWithPagingPredicateDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapKeySetWithPagingPredicateRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapKeySetWithPagingPredicateRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    request.predicate = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapKeySetWithPagingPredicateResponseParameters struct {
    /**
    * result keys for the query.
    */
response []serialization.Data
}

func MapKeySetWithPagingPredicateEncodeResponse(response []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapKeySetWithPagingPredicateResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapKeySetWithPagingPredicateResponseMessageType)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encode(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func MapKeySetWithPagingPredicateDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapKeySetWithPagingPredicateResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapKeySetWithPagingPredicateResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return response
}

