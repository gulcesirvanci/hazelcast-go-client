/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("d5fd35a60e7de758dd75919ac70a423f")
const (
    //hex: 0x140300
    XATransactionFinalizeRequestMessageType = 1311488
    //hex: 0x140301
    XATransactionFinalizeResponseMessageType = 1311489
    XATransactionFinalizeRequestIsCommitFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    XATransactionFinalizeRequestInitialFrameSize = XATransactionFinalizeRequestIsCommitFieldOffset + bufutil.BooleanSizeInBytes
    XATransactionFinalizeResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type XATransactionFinalizeRequestParameters struct {

    /**
    * Java XA transaction id as defined in interface javax.transaction.xa.Xid.
    */
xid SerializableXID

    /**
    * If true, the transaction is committed else transaction is rolled back.
    */
isCommit bool
}

func XATransactionFinalizeEncodeRequest(xid Xid, isCommit bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("XATransaction.Finalize")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, XATransactionFinalizeRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, XATransactionFinalizeRequestIsCommitFieldOffset, isCommit)
    clientMessage.Add(initialFrame)
    XidCodec.encode(clientMessage, xid)
    return clientMessage
}

func XATransactionFinalizeDecodeRequest(clientMessage *bufutil.ClientMessagex) *XATransactionFinalizeRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(XATransactionFinalizeRequestParameters)
    initialFrame := iterator.Next()
    request.isCommit = bufutil.DecodeBoolean(initialFrame.Content, XATransactionFinalizeRequestIsCommitFieldOffset)
    request.xid = XidCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type XATransactionFinalizeResponseParameters struct {
}

func XATransactionFinalizeEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, XATransactionFinalizeResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, XATransactionFinalizeResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func XATransactionFinalizeDecodeResponse(clientMessage *bufutil.ClientMessagex) *XATransactionFinalizeResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(XATransactionFinalizeResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

