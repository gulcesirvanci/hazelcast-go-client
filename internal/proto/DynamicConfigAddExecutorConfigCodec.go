/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new executor configuration to a running cluster.
 * If an executor configuration with the given {@code name} already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("f64895e145bde5e704f3a2d2cd9d8b69")
const (
    //hex: 0x1B0800
    DynamicConfigAddExecutorConfigRequestMessageType = 1771520
    //hex: 0x1B0801
    DynamicConfigAddExecutorConfigResponseMessageType = 1771521
    DynamicConfigAddExecutorConfigRequestPoolSizeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddExecutorConfigRequestQueueCapacityFieldOffset = DynamicConfigAddExecutorConfigRequestPoolSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddExecutorConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddExecutorConfigRequestQueueCapacityFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddExecutorConfigRequestInitialFrameSize = DynamicConfigAddExecutorConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddExecutorConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddExecutorConfigRequestParameters struct {

    /**
    * executor's name
    */
name string

    /**
    * executor thread pool size
    */
poolSize int

    /**
    * capacity of executor queue. A value of {@code 0} implies {@link Integer#MAX_VALUE}
    */
queueCapacity int

    /**
    * {@code true} to enable gathering of statistics, otherwise {@code false}
    */
statisticsEnabled bool

    /**
    * name of an existing configured split brain protection to be used to determine the minimum number of members
    * required in the cluster for the lock to remain functional. When {@code null}, split brain protection does not
    * apply to this lock configuration's operations.
    */
/* @Nullable */ splitBrainProtectionName string
}

func DynamicConfigAddExecutorConfigEncodeRequest(name string, poolSize int, queueCapacity int, statisticsEnabled bool, /* @Nullable */ splitBrainProtectionName string) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddExecutorConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddExecutorConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddExecutorConfigRequestPoolSizeFieldOffset, poolSize)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddExecutorConfigRequestQueueCapacityFieldOffset, queueCapacity)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddExecutorConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    CodecUtil.encodeNullable(clientMessage, splitBrainProtectionName, StringCodecEncode)
    return clientMessage
}

func DynamicConfigAddExecutorConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddExecutorConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddExecutorConfigRequestParameters)
    initialFrame := iterator.Next()
    request.poolSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddExecutorConfigRequestPoolSizeFieldOffset)
    request.queueCapacity = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddExecutorConfigRequestQueueCapacityFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddExecutorConfigRequestStatisticsEnabledFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.splitBrainProtectionName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddExecutorConfigResponseParameters struct {
}

func DynamicConfigAddExecutorConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddExecutorConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddExecutorConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddExecutorConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddExecutorConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddExecutorConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

