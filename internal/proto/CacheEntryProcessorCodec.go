/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("79c0984fe282a1d8293ed8c091b840c5")
const (
    //hex: 0x130800
    CacheEntryProcessorRequestMessageType = 1247232
    //hex: 0x130801
    CacheEntryProcessorResponseMessageType = 1247233
    CacheEntryProcessorRequestCompletionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheEntryProcessorRequestInitialFrameSize = CacheEntryProcessorRequestCompletionIdFieldOffset + bufutil.IntSizeInBytes
    CacheEntryProcessorResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheEntryProcessorRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * the key to the entry
    */
key serialization.Data

    /**
    * Entry processor to invoke. Byte-array which is serialized from an object implementing
    * javax.cache.processor.EntryProcessor.
    */
entryProcessor serialization.Data

    /**
    * additional arguments to pass to the EntryProcessor
    */
arguments []serialization.Data

    /**
    * User generated id which shall be received as a field of the cache event upon completion of
    * the request in the cluster.
    */
completionId int
}

func CacheEntryProcessorEncodeRequest(name string, key serialization.Data, entryProcessor serialization.Data, arguments []serialization.Data, completionId int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.EntryProcessor")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheEntryProcessorRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, CacheEntryProcessorRequestCompletionIdFieldOffset, completionId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    DataCodec.encode(clientMessage, entryProcessor)
    ListMultiFrameCodec.encode(clientMessage, arguments, DataCodecEncode)
    return clientMessage
}

func CacheEntryProcessorDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheEntryProcessorRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheEntryProcessorRequestParameters)
    initialFrame := iterator.Next()
    request.completionId = bufutil.DecodeInt(initialFrame.Content, CacheEntryProcessorRequestCompletionIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    request.entryProcessor = DataCodec.decode(iterator)
    request.arguments = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheEntryProcessorResponseParameters struct {
    /**
    * the result of the processing, if any, defined by the EntryProcessor implementation
    */
/* @Nullable */ response serialization.Data
}

func CacheEntryProcessorEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheEntryProcessorResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheEntryProcessorResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func CacheEntryProcessorDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheEntryProcessorResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheEntryProcessorResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

