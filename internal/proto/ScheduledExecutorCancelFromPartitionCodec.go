/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Cancels further execution and scheduling of the task
 */
//@Generated("475ed9e24d9c1f193c835bcf6e9aec94")
const (
    //hex: 0x1A0900
    ScheduledExecutorCancelFromPartitionRequestMessageType = 1706240
    //hex: 0x1A0901
    ScheduledExecutorCancelFromPartitionResponseMessageType = 1706241
    ScheduledExecutorCancelFromPartitionRequestMayInterruptIfRunningFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ScheduledExecutorCancelFromPartitionRequestInitialFrameSize = ScheduledExecutorCancelFromPartitionRequestMayInterruptIfRunningFieldOffset + bufutil.BooleanSizeInBytes
    ScheduledExecutorCancelFromPartitionResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ScheduledExecutorCancelFromPartitionResponseInitialFrameSize = ScheduledExecutorCancelFromPartitionResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ScheduledExecutorCancelFromPartitionRequestParameters struct {

    /**
    * The name of the scheduler.
    */
schedulerName string

    /**
    * The name of the task
    */
taskName string

    /**
    * A boolean flag to indicate whether the task should be interrupted.
    */
mayInterruptIfRunning bool
}

func ScheduledExecutorCancelFromPartitionEncodeRequest(schedulerName string, taskName string, mayInterruptIfRunning bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("ScheduledExecutor.CancelFromPartition")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ScheduledExecutorCancelFromPartitionRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, ScheduledExecutorCancelFromPartitionRequestMayInterruptIfRunningFieldOffset, mayInterruptIfRunning)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, schedulerName)
    StringCodec.encode(clientMessage, taskName)
    return clientMessage
}

func ScheduledExecutorCancelFromPartitionDecodeRequest(clientMessage *bufutil.ClientMessagex) *ScheduledExecutorCancelFromPartitionRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ScheduledExecutorCancelFromPartitionRequestParameters)
    initialFrame := iterator.Next()
    request.mayInterruptIfRunning = bufutil.DecodeBoolean(initialFrame.Content, ScheduledExecutorCancelFromPartitionRequestMayInterruptIfRunningFieldOffset)
    request.schedulerName = StringCodec.decode(iterator)
    request.taskName = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ScheduledExecutorCancelFromPartitionResponseParameters struct {
    /**
    * True if the task was cancelled
    */
response bool
}

func ScheduledExecutorCancelFromPartitionEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ScheduledExecutorCancelFromPartitionResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ScheduledExecutorCancelFromPartitionResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, ScheduledExecutorCancelFromPartitionResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ScheduledExecutorCancelFromPartitionDecodeResponse(clientMessage *bufutil.ClientMessagex) *ScheduledExecutorCancelFromPartitionResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ScheduledExecutorCancelFromPartitionResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, ScheduledExecutorCancelFromPartitionResponseResponseFieldOffset)
    return response
}

