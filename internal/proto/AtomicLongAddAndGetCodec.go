/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Atomically adds the given value to the current value.
 */
//@Generated("89ec819ce197ab8783ca1b1ef50d35b5")
const (
    //hex: 0x090300
    AtomicLongAddAndGetRequestMessageType = 590592
    //hex: 0x090301
    AtomicLongAddAndGetResponseMessageType = 590593
    AtomicLongAddAndGetRequestDeltaFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    AtomicLongAddAndGetRequestInitialFrameSize = AtomicLongAddAndGetRequestDeltaFieldOffset + bufutil.LongSizeInBytes
    AtomicLongAddAndGetResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    AtomicLongAddAndGetResponseInitialFrameSize = AtomicLongAddAndGetResponseResponseFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicLongAddAndGetRequestParameters struct {

    /**
    * CP group id of this IAtomicLong instance.
    */
groupId RaftGroupId

    /**
    * Name of this IAtomicLong instance.
    */
name string

    /**
    * The value to add to the current value
    */
delta int64
}

func AtomicLongAddAndGetEncodeRequest(groupId RaftGroupId, name string, delta int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("AtomicLong.AddAndGet")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicLongAddAndGetRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, AtomicLongAddAndGetRequestDeltaFieldOffset, delta)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func AtomicLongAddAndGetDecodeRequest(clientMessage *bufutil.ClientMessagex) *AtomicLongAddAndGetRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(AtomicLongAddAndGetRequestParameters)
    initialFrame := iterator.Next()
    request.delta = bufutil.DecodeLong(initialFrame.Content, AtomicLongAddAndGetRequestDeltaFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicLongAddAndGetResponseParameters struct {
    /**
    * the updated value, the given value added to the current value
    */
response int64
}

func AtomicLongAddAndGetEncodeResponse(response int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, AtomicLongAddAndGetResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicLongAddAndGetResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, AtomicLongAddAndGetResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func AtomicLongAddAndGetDecodeResponse(clientMessage *bufutil.ClientMessagex) *AtomicLongAddAndGetResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(AtomicLongAddAndGetResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeLong(initialFrame.Content, AtomicLongAddAndGetResponseResponseFieldOffset)
    return response
}

