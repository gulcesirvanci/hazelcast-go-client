/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Atomically sets the given value
 */
//@Generated("a9f7f96b4d2015c18961cd050e089117")
const (
    //hex: 0x0A0500
    AtomicRefSetRequestMessageType = 656640
    //hex: 0x0A0501
    AtomicRefSetResponseMessageType = 656641
    AtomicRefSetRequestReturnOldValueFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    AtomicRefSetRequestInitialFrameSize = AtomicRefSetRequestReturnOldValueFieldOffset + bufutil.BooleanSizeInBytes
    AtomicRefSetResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicRefSetRequestParameters struct {

    /**
    * CP group id of this IAtomicReference instance.
    */
groupId RaftGroupId

    /**
    * Name of this IAtomicReference instance.
    */
name string

    /**
    * The value to set
    */
/* @Nullable */ newValue serialization.Data

    /**
    * Denotes whether the old value is returned or not
    */
returnOldValue bool
}

func AtomicRefSetEncodeRequest(groupId RaftGroupId, name string, /* @Nullable */ newValue serialization.Data, returnOldValue bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("AtomicRef.Set")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicRefSetRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, AtomicRefSetRequestReturnOldValueFieldOffset, returnOldValue)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    CodecUtil.encodeNullable(clientMessage, newValue, DataCodecEncode)
    return clientMessage
}

func AtomicRefSetDecodeRequest(clientMessage *bufutil.ClientMessagex) *AtomicRefSetRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(AtomicRefSetRequestParameters)
    initialFrame := iterator.Next()
    request.returnOldValue = bufutil.DecodeBoolean(initialFrame.Content, AtomicRefSetRequestReturnOldValueFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    request.newValue = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicRefSetResponseParameters struct {
    /**
    * the old value or null, depending on
    * the {
    */
/* @Nullable */ response serialization.Data
}

func AtomicRefSetEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, AtomicRefSetResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicRefSetResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func AtomicRefSetDecodeResponse(clientMessage *bufutil.ClientMessagex) *AtomicRefSetResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(AtomicRefSetResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

