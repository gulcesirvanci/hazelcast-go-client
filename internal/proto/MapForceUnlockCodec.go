/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Releases the lock for the specified key regardless of the lock owner.It always successfully unlocks the key,
 * never blocks,and returns immediately.
 */
//@Generated("0fb1bdf63e8cf3d6cef7795367493763")
const (
    //hex: 0x013300
    MapForceUnlockRequestMessageType = 78592
    //hex: 0x013301
    MapForceUnlockResponseMessageType = 78593
    MapForceUnlockRequestReferenceIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapForceUnlockRequestInitialFrameSize = MapForceUnlockRequestReferenceIdFieldOffset + bufutil.LongSizeInBytes
    MapForceUnlockResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapForceUnlockRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * the key of the map entry.
    */
key serialization.Data

    /**
    * The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.
    */
referenceId int64
}

func MapForceUnlockEncodeRequest(name string, key serialization.Data, referenceId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.ForceUnlock")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapForceUnlockRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapForceUnlockRequestReferenceIdFieldOffset, referenceId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    return clientMessage
}

func MapForceUnlockDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapForceUnlockRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapForceUnlockRequestParameters)
    initialFrame := iterator.Next()
    request.referenceId = bufutil.DecodeLong(initialFrame.Content, MapForceUnlockRequestReferenceIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapForceUnlockResponseParameters struct {
}

func MapForceUnlockEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapForceUnlockResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapForceUnlockResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MapForceUnlockDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapForceUnlockResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapForceUnlockResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

