/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("988f7e96882fc76b8f0e70aa6c33ea1d")
const (
    //hex: 0x1C0100
    FlakeIdGeneratorNewIdBatchRequestMessageType = 1835264
    //hex: 0x1C0101
    FlakeIdGeneratorNewIdBatchResponseMessageType = 1835265
    FlakeIdGeneratorNewIdBatchRequestBatchSizeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    FlakeIdGeneratorNewIdBatchRequestInitialFrameSize = FlakeIdGeneratorNewIdBatchRequestBatchSizeFieldOffset + bufutil.IntSizeInBytes
    FlakeIdGeneratorNewIdBatchResponseBaseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    FlakeIdGeneratorNewIdBatchResponseIncrementFieldOffset = FlakeIdGeneratorNewIdBatchResponseBaseFieldOffset + bufutil.LongSizeInBytes
    FlakeIdGeneratorNewIdBatchResponseBatchSizeFieldOffset = FlakeIdGeneratorNewIdBatchResponseIncrementFieldOffset + bufutil.LongSizeInBytes
    FlakeIdGeneratorNewIdBatchResponseInitialFrameSize = FlakeIdGeneratorNewIdBatchResponseBatchSizeFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type FlakeIdGeneratorNewIdBatchRequestParameters struct {

    /**
    * TODO DOC
    */
name string

    /**
    * TODO DOC
    */
batchSize int
}

func FlakeIdGeneratorNewIdBatchEncodeRequest(name string, batchSize int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("FlakeIdGenerator.NewIdBatch")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, FlakeIdGeneratorNewIdBatchRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, FlakeIdGeneratorNewIdBatchRequestBatchSizeFieldOffset, batchSize)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func FlakeIdGeneratorNewIdBatchDecodeRequest(clientMessage *bufutil.ClientMessagex) *FlakeIdGeneratorNewIdBatchRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(FlakeIdGeneratorNewIdBatchRequestParameters)
    initialFrame := iterator.Next()
    request.batchSize = bufutil.DecodeInt(initialFrame.Content, FlakeIdGeneratorNewIdBatchRequestBatchSizeFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type FlakeIdGeneratorNewIdBatchResponseParameters struct {
    /**
    * TODO DOC
    */
base int64
    /**
    * TODO DOC
    */
increment int64
    /**
    * TODO DOC
    */
batchSize int
}

func FlakeIdGeneratorNewIdBatchEncodeResponse(base int64 , increment int64 , batchSize int ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, FlakeIdGeneratorNewIdBatchResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, FlakeIdGeneratorNewIdBatchResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, FlakeIdGeneratorNewIdBatchResponseBaseFieldOffset, base)
    bufutil.EncodeLong(initialFrame.Content, FlakeIdGeneratorNewIdBatchResponseIncrementFieldOffset, increment)
    bufutil.EncodeInt(initialFrame.Content, FlakeIdGeneratorNewIdBatchResponseBatchSizeFieldOffset, batchSize)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func FlakeIdGeneratorNewIdBatchDecodeResponse(clientMessage *bufutil.ClientMessagex) *FlakeIdGeneratorNewIdBatchResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(FlakeIdGeneratorNewIdBatchResponseParameters)
    initialFrame := iterator.Next()
    response.base = bufutil.DecodeLong(initialFrame.Content, FlakeIdGeneratorNewIdBatchResponseBaseFieldOffset)
    response.increment = bufutil.DecodeLong(initialFrame.Content, FlakeIdGeneratorNewIdBatchResponseIncrementFieldOffset)
    response.batchSize = bufutil.DecodeInt(initialFrame.Content, FlakeIdGeneratorNewIdBatchResponseBatchSizeFieldOffset)
    return response
}

