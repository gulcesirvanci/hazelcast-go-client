/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Puts an entry into this map with a given ttl (time to live) value.Entry will expire and get evicted after the ttl
 * If ttl is 0, then the entry lives forever.This method returns a clone of the previous value, not the original
 * (identically equal) value previously put into the map.Time resolution for TTL is seconds. The given TTL value is
 * rounded to the next closest second value.
 */
//@Generated("ad98d5dd186c64ce3a396b24be921ef2")
const (
    //hex: 0x010100
    MapPutRequestMessageType = 65792
    //hex: 0x010101
    MapPutResponseMessageType = 65793
    MapPutRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapPutRequestTtlFieldOffset = MapPutRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MapPutRequestInitialFrameSize = MapPutRequestTtlFieldOffset + bufutil.LongSizeInBytes
    MapPutResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapPutRequestParameters struct {

    /**
    * Name of the map.
    */
name string

    /**
    * Key for the map entry.
    */
key serialization.Data

    /**
    * Value for the map entry.
    */
value serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * The duration in milliseconds after which this entry shall be deleted. O means infinite.
    */
ttl int64
}

func MapPutEncodeRequest(name string, key serialization.Data, value serialization.Data, threadId int64, ttl int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.Put")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapPutRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapPutRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeLong(initialFrame.Content, MapPutRequestTtlFieldOffset, ttl)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    DataCodec.encode(clientMessage, value)
    return clientMessage
}

func MapPutDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapPutRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapPutRequestParameters)
    initialFrame := iterator.Next()
    request.threadId = bufutil.DecodeLong(initialFrame.Content, MapPutRequestThreadIdFieldOffset)
    request.ttl = bufutil.DecodeLong(initialFrame.Content, MapPutRequestTtlFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    request.value = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapPutResponseParameters struct {
    /**
    * old value of the entry
    */
/* @Nullable */ response serialization.Data
}

func MapPutEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapPutResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapPutResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func MapPutDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapPutResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapPutResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

