/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Gets a collection of entries from the cache with custom expiry policy, returning them as Map of the values
 * associated with the set of keys requested. If the cache is configured for read-through operation mode, the underlying
 * configured javax.cache.integration.CacheLoader might be called to retrieve the values of the keys from any kind
 * of external resource.
 */
//@Generated("fb07f79f64097ff039dcb8bb196f3793")
const (
    //hex: 0x130900
    CacheGetAllRequestMessageType = 1247488
    //hex: 0x130901
    CacheGetAllResponseMessageType = 1247489
    CacheGetAllRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheGetAllResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheGetAllRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * The keys whose associated values are to be returned.
    */
keys []serialization.Data

    /**
    * Expiry policy for the entry. Byte-array which is serialized from an object implementing
    * javax.cache.expiry.ExpiryPolicy interface.
    */
/* @Nullable */ expiryPolicy serialization.Data
}

func CacheGetAllEncodeRequest(name string, keys []serialization.Data, /* @Nullable */ expiryPolicy serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.GetAll")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheGetAllRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encode(clientMessage, keys, DataCodecEncode)
    CodecUtil.encodeNullable(clientMessage, expiryPolicy, DataCodecEncode)
    return clientMessage
}

func CacheGetAllDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheGetAllRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheGetAllRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    request.keys = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    request.expiryPolicy = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheGetAllResponseParameters struct {
    /**
    * A map of entries that were found for the given keys. Keys not found
    * in the cache are not in the returned map.
    */
response java.util.List<[]serialization.Data, []serialization.Data>
}

func CacheGetAllEncodeResponse(response []serialization.Data, []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheGetAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheGetAllResponseMessageType)
    clientMessage.Add(initialFrame)

    EntryListCodec.encode(clientMessage, response, DataCodecEncode, DataCodecEncode)
    return clientMessage
}

func CacheGetAllDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheGetAllResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheGetAllResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = EntryListCodec.decode(iterator, DataCodecDecode, DataCodecDecode)
    return response
}

