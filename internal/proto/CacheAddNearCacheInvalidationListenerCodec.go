/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds listener to cache. This listener will be used to listen near cache invalidation events.
 */
//@Generated("215815a70e5e51d7c8f5c8e00d1ff197")
const (
    //hex: 0x131D00
    CacheAddNearCacheInvalidationListenerRequestMessageType = 1252608
    //hex: 0x131D01
    CacheAddNearCacheInvalidationListenerResponseMessageType = 1252609
    CacheAddNearCacheInvalidationListenerRequestLocalOnlyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddNearCacheInvalidationListenerRequestInitialFrameSize = CacheAddNearCacheInvalidationListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    CacheAddNearCacheInvalidationListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddNearCacheInvalidationListenerResponseInitialFrameSize = CacheAddNearCacheInvalidationListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    CacheAddNearCacheInvalidationListenerEventCacheInvalidationSourceUuidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddNearCacheInvalidationListenerEventCacheInvalidationPartitionUuidFieldOffset = CacheAddNearCacheInvalidationListenerEventCacheInvalidationSourceUuidFieldOffset + bufutil.UUIDSizeInBytes
    CacheAddNearCacheInvalidationListenerEventCacheInvalidationSequenceFieldOffset = CacheAddNearCacheInvalidationListenerEventCacheInvalidationPartitionUuidFieldOffset + bufutil.UUIDSizeInBytes
    CacheAddNearCacheInvalidationListenerEventCacheInvalidationInitialFrameSize = CacheAddNearCacheInvalidationListenerEventCacheInvalidationSequenceFieldOffset + bufutil.LongSizeInBytes
    //hex: 0x131D02
    CacheAddNearCacheInvalidationListenerEventCacheInvalidationMessageType = 1252610

    CacheAddNearCacheInvalidationListenerEventCacheBatchInvalidationInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x131D03
    CacheAddNearCacheInvalidationListenerEventCacheBatchInvalidationMessageType = 1252611


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheAddNearCacheInvalidationListenerRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func CacheAddNearCacheInvalidationListenerEncodeRequest(name string, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.AddNearCacheInvalidationListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddNearCacheInvalidationListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CacheAddNearCacheInvalidationListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func CacheAddNearCacheInvalidationListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheAddNearCacheInvalidationListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheAddNearCacheInvalidationListenerRequestParameters)
    initialFrame := iterator.Next()
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, CacheAddNearCacheInvalidationListenerRequestLocalOnlyFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheAddNearCacheInvalidationListenerResponseParameters struct {
    /**
    * Registration id for the registered listener.
    */
response UUID
}

func CacheAddNearCacheInvalidationListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheAddNearCacheInvalidationListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddNearCacheInvalidationListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, CacheAddNearCacheInvalidationListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CacheAddNearCacheInvalidationListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheAddNearCacheInvalidationListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheAddNearCacheInvalidationListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, CacheAddNearCacheInvalidationListenerResponseResponseFieldOffset)
    return response
}

    func encodeCacheAddNearCacheInvalidationListenerEvent(name string, /* @Nullable */ key serialization.Data, /* @Nullable */ sourceUuid UUID, partitionUuid UUID, sequence int64) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, CacheAddNearCacheInvalidationListenerEventCacheInvalidationInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddNearCacheInvalidationListenerEventCacheInvalidationMessageType)
        encodeUUID(initialFrame.Content, CacheAddNearCacheInvalidationListenerEventCacheInvalidationSourceUuidFieldOffset, sourceUuid)
        encodeUUID(initialFrame.Content, CacheAddNearCacheInvalidationListenerEventCacheInvalidationPartitionUuidFieldOffset, partitionUuid)
        encodeLong(initialFrame.Content, CacheAddNearCacheInvalidationListenerEventCacheInvalidationSequenceFieldOffset, sequence)
        clientMessage.Add(initialFrame)

        StringCodec.encode(clientMessage, name)
        CodecUtil.encodeNullable(clientMessage, key, DataCodecEncode)
        return clientMessage
    }
    func encodeCacheAddNearCacheInvalidationListenerEvent(name string, keys []serialization.Data, sourceUuids Collection<UUID>, partitionUuids Collection<UUID>, sequences Collection<Long>) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, CacheAddNearCacheInvalidationListenerEventCacheBatchInvalidationInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddNearCacheInvalidationListenerEventCacheBatchInvalidationMessageType)
        clientMessage.Add(initialFrame)

        StringCodec.encode(clientMessage, name)
        ListMultiFrameCodec.encode(clientMessage, keys, DataCodecEncode)
        ListUUIDCodec.encode(clientMessage, sourceUuids)
        ListUUIDCodec.encode(clientMessage, partitionUuids)
        ListLongCodec.encode(clientMessage, sequences)
        return clientMessage
    }

    type CacheAddNearCacheInvalidationListenerAbstractEventItemFunc func(name string, /* @Nullable */ key serialization.Data, /* @Nullable */ sourceUuid UUID, partitionUuid UUID, sequence int64)
    type CacheAddNearCacheInvalidationListenerAbstractEventItemFunc func(name string, keys []serialization.Data, sourceUuids Collection<UUID>, partitionUuids Collection<UUID>, sequences Collection<Long>)

     func CacheAddNearCacheInvalidationListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem CacheAddNearCacheInvalidationListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == CacheAddNearCacheInvalidationListenerEventCacheInvalidationMessageType {
             initialFrame := iterator.Next()
             sourceUuid := bufutil.DecodeUUID(initialFrame.Content, CacheAddNearCacheInvalidationListenerEventCacheInvalidationSourceUuidFieldOffset)
             partitionUuid := bufutil.DecodeUUID(initialFrame.Content, CacheAddNearCacheInvalidationListenerEventCacheInvalidationPartitionUuidFieldOffset)
             sequence := bufutil.DecodeLong(initialFrame.Content, CacheAddNearCacheInvalidationListenerEventCacheInvalidationSequenceFieldOffset)
             name := StringCodec.decode(iterator)
             key := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             handleEventItem(name, key, sourceUuid, partitionUuid, sequence)
             return
          }
         if messageType == CacheAddNearCacheInvalidationListenerEventCacheBatchInvalidationMessageType {
             //empty initial frame
             iterator.Next()
             name := StringCodec.decode(iterator)
             keys := ListMultiFrameCodec.decode(iterator, DataCodecDecode)
             sourceUuids := ListUUIDCodec.decode(iterator)
             partitionUuids := ListUUIDCodec.decode(iterator)
             sequences := ListLongCodec.decode(iterator)
             handleEventItem(name, keys, sourceUuids, partitionUuids, sequences)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

