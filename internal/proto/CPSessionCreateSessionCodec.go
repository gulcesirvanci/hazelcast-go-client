/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Creates a session for the caller on the given CP group.
 */
//@Generated("623a7ef2786bc1a7ea9442360cb3de26")
const (
    //hex: 0x1F0100
    CPSessionCreateSessionRequestMessageType = 2031872
    //hex: 0x1F0101
    CPSessionCreateSessionResponseMessageType = 2031873
    CPSessionCreateSessionRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CPSessionCreateSessionResponseSessionIdFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CPSessionCreateSessionResponseTtlMillisFieldOffset = CPSessionCreateSessionResponseSessionIdFieldOffset + bufutil.LongSizeInBytes
    CPSessionCreateSessionResponseHeartbeatMillisFieldOffset = CPSessionCreateSessionResponseTtlMillisFieldOffset + bufutil.LongSizeInBytes
    CPSessionCreateSessionResponseInitialFrameSize = CPSessionCreateSessionResponseHeartbeatMillisFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CPSessionCreateSessionRequestParameters struct {

    /**
    * ID of the CP group
    */
groupId RaftGroupId

    /**
    * Name of the caller HazelcastInstance
    */
endpointName string
}

func CPSessionCreateSessionEncodeRequest(groupId RaftGroupId, endpointName string) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("CPSession.CreateSession")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CPSessionCreateSessionRequestMessageType)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, endpointName)
    return clientMessage
}

func CPSessionCreateSessionDecodeRequest(clientMessage *bufutil.ClientMessagex) *CPSessionCreateSessionRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CPSessionCreateSessionRequestParameters)
    //empty initial frame
    iterator.Next()
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.endpointName = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CPSessionCreateSessionResponseParameters struct {
    /**
    * TODO DOC
    */
sessionId int64
    /**
    * TODO DOC
    */
ttlMillis int64
    /**
    * TODO DOC
    */
heartbeatMillis int64
}

func CPSessionCreateSessionEncodeResponse(sessionId int64 , ttlMillis int64 , heartbeatMillis int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CPSessionCreateSessionResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CPSessionCreateSessionResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, CPSessionCreateSessionResponseSessionIdFieldOffset, sessionId)
    bufutil.EncodeLong(initialFrame.Content, CPSessionCreateSessionResponseTtlMillisFieldOffset, ttlMillis)
    bufutil.EncodeLong(initialFrame.Content, CPSessionCreateSessionResponseHeartbeatMillisFieldOffset, heartbeatMillis)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CPSessionCreateSessionDecodeResponse(clientMessage *bufutil.ClientMessagex) *CPSessionCreateSessionResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CPSessionCreateSessionResponseParameters)
    initialFrame := iterator.Next()
    response.sessionId = bufutil.DecodeLong(initialFrame.Content, CPSessionCreateSessionResponseSessionIdFieldOffset)
    response.ttlMillis = bufutil.DecodeLong(initialFrame.Content, CPSessionCreateSessionResponseTtlMillisFieldOffset)
    response.heartbeatMillis = bufutil.DecodeLong(initialFrame.Content, CPSessionCreateSessionResponseHeartbeatMillisFieldOffset)
    return response
}

