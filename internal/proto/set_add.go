
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds the specified element to this set if it is not already present (optional operation).
 * If this set already contains the element, the call leaves the set unchanged and returns false.In combination with
 * the restriction on constructors, this ensures that sets never contain duplicate elements.
 * The stipulation above does not imply that sets must accept all elements; sets may refuse to add any particular
 * element, including null, and throw an exception, as described in the specification for Collection
 * Individual set implementations should clearly document any restrictions on the elements that they may contain.
 */
//@Generated("8c0f424b5501a4ad291c6082f4fcc1be")
const (
    //hex: 0x060400
    SetAddRequestMessageType = 394240
    //hex: 0x060401
    SetAddResponseMessageType = 394241
    SetAddRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    SetAddResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    SetAddResponseInitialFrameSize = SetAddResponseResponseFieldOffset + BooleanSizeInBytes

)

func SetAddEncodeRequest(name string, value serialization.Data) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Set.Add")
	initialFrame := &Frame{Content: make([]byte, SetAddResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, SetAddRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, value)

    return clientMessage
}


func SetAddDecodeResponse(clientMessage *ClientMessage) func() (/*** True if this set did not already contain the specified* element and the element is added, returns false otherwise.*/response bool) {
    return func() (/*** True if this set did not already contain the specified* element and the element is added, returns false otherwise.*/response bool) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeBoolean(initialFrame.Content, SetAddResponseResponseFieldOffset)
        return
    }
}

