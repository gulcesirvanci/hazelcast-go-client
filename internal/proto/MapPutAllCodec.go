/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Copies all of the mappings from the specified map to this map (optional operation).The effect of this call is
 * equivalent to that of calling put(Object,Object) put(k, v) on this map once for each mapping from key k to value
 * v in the specified map.The behavior of this operation is undefined if the specified map is modified while the
 * operation is in progress.
 * Please note that all the keys in the request should belong to the partition id to which this request is being sent, all keys
 * matching to a different partition id shall be ignored. The API implementation using this request may need to send multiple
 * of these request messages for filling a request for a key set if the keys belong to different partitions.
 */
//@Generated("0f6ff17d935915d96a62423bd257e6c0")
const (
    //hex: 0x012C00
    MapPutAllRequestMessageType = 76800
    //hex: 0x012C01
    MapPutAllResponseMessageType = 76801
    MapPutAllRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapPutAllResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapPutAllRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * mappings to be stored in this map
    */
entries java.util.List<[]serialization.Data, []serialization.Data>
}

func MapPutAllEncodeRequest(name string, entries []serialization.Data, []serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.PutAll")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapPutAllRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    EntryListCodec.encode(clientMessage, entries, DataCodecEncode, DataCodecEncode)
    return clientMessage
}

func MapPutAllDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapPutAllRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapPutAllRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    request.entries = EntryListCodec.decode(iterator, DataCodecDecode, DataCodecDecode)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapPutAllResponseParameters struct {
}

func MapPutAllEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapPutAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapPutAllResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MapPutAllDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapPutAllResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapPutAllResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

