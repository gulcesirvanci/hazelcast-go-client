/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Query operation to retrieve the current value of the PNCounter.
 * <p>
 * The invocation will return the replica timestamps (vector clock) which
 * can then be sent with the next invocation to keep session consistency
 * guarantees.
 * The target replica is determined by the {@code targetReplica} parameter.
 * If smart routing is disabled, the actual member processing the client
 * message may act as a proxy.
 */
//@Generated("73eb1d4ff5f8e7a0645f8c298908c0a0")
const (
    //hex: 0x1D0100
    PNCounterGetRequestMessageType = 1900800
    //hex: 0x1D0101
    PNCounterGetResponseMessageType = 1900801
    PNCounterGetRequestTargetReplicaUUIDFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    PNCounterGetRequestInitialFrameSize = PNCounterGetRequestTargetReplicaUUIDFieldOffset + bufutil.UUIDSizeInBytes
    PNCounterGetResponseValueFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    PNCounterGetResponseReplicaCountFieldOffset = PNCounterGetResponseValueFieldOffset + bufutil.LongSizeInBytes
    PNCounterGetResponseInitialFrameSize = PNCounterGetResponseReplicaCountFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type PNCounterGetRequestParameters struct {

    /**
    * the name of the PNCounter
    */
name string

    /**
    * last observed replica timestamps (vector clock)
    */
replicaTimestamps []map[uuid]int64

    /**
    * the target replica
    */
targetReplicaUUID string
}

func PNCounterGetEncodeRequest(name string, replicaTimestamps []map[uuid]int64, targetReplicaUUID string) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = true
    clientMessage.SetOperationName("PNCounter.Get")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, PNCounterGetRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, PNCounterGetRequestTargetReplicaUUIDFieldOffset, targetReplicaUUID)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.EntryListUUIDLongCodecEncode(clientMessage, replicaTimestamps)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type PNCounterGetResponseParameters struct {
    /**
    * Value of the counter.
    */
value int64
    /**
    * last observed replica timestamps (vector clock)
    */
replicaTimestamps []map[uuid]int64
    /**
    * Number of replicas that keep the state of this counter.
    */
replicaCount int32
}



func PNCounterGetDecodeResponse(clientMessage *bufutil.ClientMessage) *PNCounterGetResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(PNCounterGetResponseParameters)
    initialFrame := iterator.Next()
    response.value = bufutil.DecodeLong(initialFrame.Content, PNCounterGetResponseValueFieldOffset)
    response.replicaCount = bufutil.DecodeInt(initialFrame.Content, PNCounterGetResponseReplicaCountFieldOffset)
    response.replicaTimestamps = bufutil.EntryListUUIDLongCodecDecode(iterator)
    return response
}

