
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Return true if this collection contains all of the elements in the specified collection.
 */
//@Generated("c889e8a8fe5572777d6557077e8f7655")
const (
    //hex: 0x030C00
    QueueContainsAllRequestMessageType = 199680
    //hex: 0x030C01
    QueueContainsAllResponseMessageType = 199681
    QueueContainsAllRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    QueueContainsAllResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    QueueContainsAllResponseInitialFrameSize = QueueContainsAllResponseResponseFieldOffset + BooleanSizeInBytes

)

func QueueContainsAllEncodeRequest(name string, dataList []serialization.Data) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Queue.ContainsAll")
	initialFrame := &Frame{Content: make([]byte, QueueContainsAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, QueueContainsAllRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    clientMessage.Add(BeginFrame)
        for i := 0; i < len(dataList) ; i++ {
            DataCodecEncode(clientMessage, dataList[i]) //check line
        }
        clientMessage.Add(EndFrame)



    return clientMessage
}


func QueueContainsAllDecodeResponse(clientMessage *ClientMessage) func() (/*** <tt>true</tt> if this collection contains all of the elements in the specified collection*/response bool) {
    return func() (/*** <tt>true</tt> if this collection contains all of the elements in the specified collection*/response bool) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeBoolean(initialFrame.Content, QueueContainsAllResponseResponseFieldOffset)
        return
    }
}

