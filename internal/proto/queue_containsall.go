/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Return true if this collection contains all of the elements in the specified collection.
 */
//@Generated("c3a0904c2466e1eb2138fe0361e4e31e")
const (
    //hex: 0x030C00
    QueueContainsAllRequestMessageType = 199680
    //hex: 0x030C01
    QueueContainsAllResponseMessageType = 199681
    QueueContainsAllRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    QueueContainsAllResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    QueueContainsAllResponseInitialFrameSize = QueueContainsAllResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueContainsAllRequestParameters struct {

    /**
    * Name of the Queue
    */
name string

    /**
    * Collection to be checked for containment in this collection
    */
dataList []serialization.Data
}

func QueueContainsAllEncodeRequest(name string, dataList []serialization.Data) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Queue.ContainsAll")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, QueueContainsAllRequestMessageType)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    clientMessage.Add(bufutil.BeginFrame)
        for i := 0; i < len(dataList) ; i++ {
            bufutil.DataCodecEncode(clientMessage, dataList[i])
        }
        clientMessage.Add(bufutil.EndFrame)


    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueContainsAllResponseParameters struct {
    /**
    * <tt>true</tt> if this collection contains all of the elements in the specified collection
    */
response bool
}



func QueueContainsAllDecodeResponse(clientMessage *bufutil.ClientMessage) *QueueContainsAllResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(QueueContainsAllResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, QueueContainsAllResponseResponseFieldOffset)
    return response
}

