/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a delta to the PNCounter value. The delta may be negative for a
 * subtraction.
 * <p>
 * The invocation will return the replica timestamps (vector clock) which
 * can then be sent with the next invocation to keep session consistency
 * guarantees.
 * The target replica is determined by the {@code targetReplica} parameter.
 * If smart routing is disabled, the actual member processing the client
 * message may act as a proxy.
 */
//@Generated("40e1047cf3e86114a714e37b46f69d8f")
const (
    //hex: 0x1D0200
    PNCounterAddRequestMessageType = 1901056
    //hex: 0x1D0201
    PNCounterAddResponseMessageType = 1901057
    PNCounterAddRequestDeltaFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    PNCounterAddRequestGetBeforeUpdateFieldOffset = PNCounterAddRequestDeltaFieldOffset + bufutil.LongSizeInBytes
    PNCounterAddRequestInitialFrameSize = PNCounterAddRequestGetBeforeUpdateFieldOffset + bufutil.BooleanSizeInBytes
    PNCounterAddResponseValueFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    PNCounterAddResponseReplicaCountFieldOffset = PNCounterAddResponseValueFieldOffset + bufutil.LongSizeInBytes
    PNCounterAddResponseInitialFrameSize = PNCounterAddResponseReplicaCountFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type PNCounterAddRequestParameters struct {

    /**
    * the name of the PNCounter
    */
name string

    /**
    * the delta to add to the counter value, can be negative
    */
delta int64

    /**
    * {@code true} if the operation should return the
    * counter value before the addition, {@code false}
    * if it should return the value after the addition
    */
getBeforeUpdate bool

    /**
    * last observed replica timestamps (vector clock)
    */
replicaTimestamps java.util.List<java.util.Map.Entry<java.util.UUID, java.lang.Long>>

    /**
    * the target replica
    */
targetReplica Address
}

func PNCounterAddEncodeRequest(name string, delta int64, getBeforeUpdate bool, replicaTimestamps java.util.Collection<java.util.Map.Entry<java.util.UUID, java.lang.Long>>, targetReplica Address) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("PNCounter.Add")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, PNCounterAddRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, PNCounterAddRequestDeltaFieldOffset, delta)
    bufutil.EncodeBoolean(initialFrame.Content, PNCounterAddRequestGetBeforeUpdateFieldOffset, getBeforeUpdate)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    EntryListUUIDLongCodec.encode(clientMessage, replicaTimestamps)
    AddressCodec.encode(clientMessage, targetReplica)
    return clientMessage
}

func PNCounterAddDecodeRequest(clientMessage *bufutil.ClientMessagex) *PNCounterAddRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(PNCounterAddRequestParameters)
    initialFrame := iterator.Next()
    request.delta = bufutil.DecodeLong(initialFrame.Content, PNCounterAddRequestDeltaFieldOffset)
    request.getBeforeUpdate = bufutil.DecodeBoolean(initialFrame.Content, PNCounterAddRequestGetBeforeUpdateFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.replicaTimestamps = EntryListUUIDLongCodec.decode(iterator)
    request.targetReplica = AddressCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type PNCounterAddResponseParameters struct {
    /**
    * TODO DOC
    */
value int64
    /**
    * last observed replica timestamps (vector clock)
    */
replicaTimestamps java.util.List<java.util.Map.Entry<java.util.UUID, java.lang.Long>>
    /**
    * TODO DOC
    */
replicaCount int
}

func PNCounterAddEncodeResponse(value int64 , replicaTimestamps java.util.Collection<java.util.Map.Entry<java.util.UUID, java.lang.Long>> , replicaCount int ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, PNCounterAddResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, PNCounterAddResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, PNCounterAddResponseValueFieldOffset, value)
    bufutil.EncodeInt(initialFrame.Content, PNCounterAddResponseReplicaCountFieldOffset, replicaCount)
    clientMessage.Add(initialFrame)

    EntryListUUIDLongCodec.encode(clientMessage, replicaTimestamps)
    return clientMessage
}

func PNCounterAddDecodeResponse(clientMessage *bufutil.ClientMessagex) *PNCounterAddResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(PNCounterAddResponseParameters)
    initialFrame := iterator.Next()
    response.value = bufutil.DecodeLong(initialFrame.Content, PNCounterAddResponseValueFieldOffset)
    response.replicaCount = bufutil.DecodeInt(initialFrame.Content, PNCounterAddResponseReplicaCountFieldOffset)
    response.replicaTimestamps = EntryListUUIDLongCodec.decode(iterator)
    return response
}

