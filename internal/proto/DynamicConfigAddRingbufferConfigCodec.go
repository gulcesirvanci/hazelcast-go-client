/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new ringbuffer configuration to a running cluster.
 * If a ringbuffer configuration with the given {@code name} already exists, then
 * the new ringbuffer config is ignored and the existing one is preserved.
 */
//@Generated("b5aea815747888216a1184ab67b4e13c")
const (
    //hex: 0x1B0200
    DynamicConfigAddRingbufferConfigRequestMessageType = 1769984
    //hex: 0x1B0201
    DynamicConfigAddRingbufferConfigResponseMessageType = 1769985
    DynamicConfigAddRingbufferConfigRequestCapacityFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddRingbufferConfigRequestBackupCountFieldOffset = DynamicConfigAddRingbufferConfigRequestCapacityFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddRingbufferConfigRequestAsyncBackupCountFieldOffset = DynamicConfigAddRingbufferConfigRequestBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddRingbufferConfigRequestTimeToLiveSecondsFieldOffset = DynamicConfigAddRingbufferConfigRequestAsyncBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddRingbufferConfigRequestMergeBatchSizeFieldOffset = DynamicConfigAddRingbufferConfigRequestTimeToLiveSecondsFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddRingbufferConfigRequestInitialFrameSize = DynamicConfigAddRingbufferConfigRequestMergeBatchSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddRingbufferConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddRingbufferConfigRequestParameters struct {

    /**
    * ringbuffer configuration name
    */
name string

    /**
    * capacity of the ringbuffer
    */
capacity int

    /**
    * number of synchronous backups
    */
backupCount int

    /**
    * number of asynchronous backups
    */
asyncBackupCount int

    /**
    * maximum number of seconds for each entry to stay in the ringbuffer
    */
timeToLiveSeconds int

    /**
    * in memory format of items in the ringbuffer. Valid options are {@code BINARY}
    * and {@code OBJECT}
    */
inMemoryFormat string

    /**
    * backing ringbuffer store configuration
    */
/* @Nullable */ ringbufferStoreConfig RingbufferStoreConfigHolder

    /**
    * name of an existing configured split brain protection to be used to determine the minimum number of members
    * required in the cluster for the lock to remain functional. When {@code null}, split brain protection does not
    * apply to this lock configuration's operations.
    */
/* @Nullable */ splitBrainProtectionName string

    /**
    * TODO DOC
    */
mergePolicy string

    /**
    * TODO DOC
    */
mergeBatchSize int
}

func DynamicConfigAddRingbufferConfigEncodeRequest(name string, capacity int, backupCount int, asyncBackupCount int, timeToLiveSeconds int, inMemoryFormat string, /* @Nullable */ ringbufferStoreConfig RingbufferStoreConfigHolder, /* @Nullable */ splitBrainProtectionName string, mergePolicy string, mergeBatchSize int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddRingbufferConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddRingbufferConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestCapacityFieldOffset, capacity)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestBackupCountFieldOffset, backupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestAsyncBackupCountFieldOffset, asyncBackupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestTimeToLiveSecondsFieldOffset, timeToLiveSeconds)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestMergeBatchSizeFieldOffset, mergeBatchSize)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    StringCodec.encode(clientMessage, inMemoryFormat)
    CodecUtil.encodeNullable(clientMessage, ringbufferStoreConfig, RingbufferStoreConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, splitBrainProtectionName, StringCodecEncode)
    StringCodec.encode(clientMessage, mergePolicy)
    return clientMessage
}

func DynamicConfigAddRingbufferConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddRingbufferConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddRingbufferConfigRequestParameters)
    initialFrame := iterator.Next()
    request.capacity = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestCapacityFieldOffset)
    request.backupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestBackupCountFieldOffset)
    request.asyncBackupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestAsyncBackupCountFieldOffset)
    request.timeToLiveSeconds = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestTimeToLiveSecondsFieldOffset)
    request.mergeBatchSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddRingbufferConfigRequestMergeBatchSizeFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.inMemoryFormat = StringCodec.decode(iterator)
    request.ringbufferStoreConfig = CodecUtil.decodeNullable(iterator, RingbufferStoreConfigHolderCodecDecode) 
    request.splitBrainProtectionName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.mergePolicy = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddRingbufferConfigResponseParameters struct {
}

func DynamicConfigAddRingbufferConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddRingbufferConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddRingbufferConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddRingbufferConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddRingbufferConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddRingbufferConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

