/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("75bd52dd107c0f64c139774368dc7271")
const (
    //hex: 0x130100
    CacheAddEntryListenerRequestMessageType = 1245440
    //hex: 0x130101
    CacheAddEntryListenerResponseMessageType = 1245441
    CacheAddEntryListenerRequestLocalOnlyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddEntryListenerRequestInitialFrameSize = CacheAddEntryListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    CacheAddEntryListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddEntryListenerResponseInitialFrameSize = CacheAddEntryListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    CacheAddEntryListenerEventCacheTypeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddEntryListenerEventCacheCompletionIdFieldOffset = CacheAddEntryListenerEventCacheTypeFieldOffset + bufutil.IntSizeInBytes
    CacheAddEntryListenerEventCacheInitialFrameSize = CacheAddEntryListenerEventCacheCompletionIdFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x130102
    CacheAddEntryListenerEventCacheMessageType = 1245442


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheAddEntryListenerRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func CacheAddEntryListenerEncodeRequest(name string, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.AddEntryListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddEntryListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CacheAddEntryListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func CacheAddEntryListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheAddEntryListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheAddEntryListenerRequestParameters)
    initialFrame := iterator.Next()
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, CacheAddEntryListenerRequestLocalOnlyFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheAddEntryListenerResponseParameters struct {
    /**
    * Registration id for the registered listener.
    */
response UUID
}

func CacheAddEntryListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheAddEntryListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddEntryListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, CacheAddEntryListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CacheAddEntryListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheAddEntryListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheAddEntryListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, CacheAddEntryListenerResponseResponseFieldOffset)
    return response
}

    func encodeCacheAddEntryListenerEvent(type int, keys Collection<CacheEventData>, completionId int) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, CacheAddEntryListenerEventCacheInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddEntryListenerEventCacheMessageType)
        encodeInt(initialFrame.Content, CacheAddEntryListenerEventCacheTypeFieldOffset, type)
        encodeInt(initialFrame.Content, CacheAddEntryListenerEventCacheCompletionIdFieldOffset, completionId)
        clientMessage.Add(initialFrame)

        ListMultiFrameCodec.encode(clientMessage, keys, CacheEventDataCodecEncode)
        return clientMessage
    }

    type CacheAddEntryListenerAbstractEventItemFunc func(type int, keys Collection<CacheEventData>, completionId int)

     func CacheAddEntryListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem CacheAddEntryListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == CacheAddEntryListenerEventCacheMessageType {
             initialFrame := iterator.Next()
             type := bufutil.DecodeInt(initialFrame.Content, CacheAddEntryListenerEventCacheTypeFieldOffset)
             completionId := bufutil.DecodeInt(initialFrame.Content, CacheAddEntryListenerEventCacheCompletionIdFieldOffset)
             keys := ListMultiFrameCodec.decode(iterator, CacheEventDataCodecDecode)
             handleEventItem(type, keys, completionId)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

