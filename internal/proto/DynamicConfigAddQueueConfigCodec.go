/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new queue configuration to a running cluster.
 * If a queue configuration with the given {@code name} already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("386b63631bd3e221303cf4b96b694c3b")
const (
    //hex: 0x1B0B00
    DynamicConfigAddQueueConfigRequestMessageType = 1772288
    //hex: 0x1B0B01
    DynamicConfigAddQueueConfigResponseMessageType = 1772289
    DynamicConfigAddQueueConfigRequestBackupCountFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddQueueConfigRequestAsyncBackupCountFieldOffset = DynamicConfigAddQueueConfigRequestBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddQueueConfigRequestMaxSizeFieldOffset = DynamicConfigAddQueueConfigRequestAsyncBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddQueueConfigRequestEmptyQueueTtlFieldOffset = DynamicConfigAddQueueConfigRequestMaxSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddQueueConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddQueueConfigRequestEmptyQueueTtlFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddQueueConfigRequestMergeBatchSizeFieldOffset = DynamicConfigAddQueueConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddQueueConfigRequestInitialFrameSize = DynamicConfigAddQueueConfigRequestMergeBatchSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddQueueConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddQueueConfigRequestParameters struct {

    /**
    * queue name
    */
name string

    /**
    * item listeners configuration
    */
/* @Nullable */ listenerConfigs []]ListenerConfigHolder

    /**
    * number of synchronous backups
    */
backupCount int

    /**
    * number of asynchronous backups
    */
asyncBackupCount int

    /**
    * maximum number of items in the queue
    */
maxSize int

    /**
    * queue time-to-live in seconds: queue will be destroyed if it stays empty or unused for that time
    */
emptyQueueTtl int

    /**
    * {@code true} to enable gathering of statistics, otherwise {@code false}
    */
statisticsEnabled bool

    /**
    * name of an existing configured split brain protection to be used to determine the minimum number of members
    * required in the cluster for the queue to remain functional. When {@code null}, split brain protection does not
    * apply to this queue configuration's operations.
    */
/* @Nullable */ splitBrainProtectionName string

    /**
    * backing queue store configuration
    */
/* @Nullable */ queueStoreConfig QueueStoreConfigHolder

    /**
    * TODO DOC
    */
mergePolicy string

    /**
    * TODO DOC
    */
mergeBatchSize int
}

func DynamicConfigAddQueueConfigEncodeRequest(name string, /* @Nullable */ listenerConfigs Collection<ListenerConfigHolder>, backupCount int, asyncBackupCount int, maxSize int, emptyQueueTtl int, statisticsEnabled bool, /* @Nullable */ splitBrainProtectionName string, /* @Nullable */ queueStoreConfig QueueStoreConfigHolder, mergePolicy string, mergeBatchSize int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddQueueConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddQueueConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestBackupCountFieldOffset, backupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestAsyncBackupCountFieldOffset, asyncBackupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestMaxSizeFieldOffset, maxSize)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestEmptyQueueTtlFieldOffset, emptyQueueTtl)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddQueueConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestMergeBatchSizeFieldOffset, mergeBatchSize)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encodeNullable(clientMessage, listenerConfigs, ListenerConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, splitBrainProtectionName, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, queueStoreConfig, QueueStoreConfigHolderCodecEncode)
    StringCodec.encode(clientMessage, mergePolicy)
    return clientMessage
}

func DynamicConfigAddQueueConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddQueueConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddQueueConfigRequestParameters)
    initialFrame := iterator.Next()
    request.backupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestBackupCountFieldOffset)
    request.asyncBackupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestAsyncBackupCountFieldOffset)
    request.maxSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestMaxSizeFieldOffset)
    request.emptyQueueTtl = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestEmptyQueueTtlFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddQueueConfigRequestStatisticsEnabledFieldOffset)
    request.mergeBatchSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddQueueConfigRequestMergeBatchSizeFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.listenerConfigs = ListMultiFrameCodec.decodeNullable(iterator, ListenerConfigHolderCodecDecode)
    request.splitBrainProtectionName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.queueStoreConfig = CodecUtil.decodeNullable(iterator, QueueStoreConfigHolderCodecDecode) 
    request.mergePolicy = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddQueueConfigResponseParameters struct {
}

func DynamicConfigAddQueueConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddQueueConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddQueueConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddQueueConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddQueueConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddQueueConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

