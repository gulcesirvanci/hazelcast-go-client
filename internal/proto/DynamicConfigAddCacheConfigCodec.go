/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new cache configuration to a running cluster.
 * If a cache configuration with the given {@code name} already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("f1473d45af64d999012e550fe0de5607")
const (
    //hex: 0x1B0E00
    DynamicConfigAddCacheConfigRequestMessageType = 1773056
    //hex: 0x1B0E01
    DynamicConfigAddCacheConfigResponseMessageType = 1773057
    DynamicConfigAddCacheConfigRequestStatisticsEnabledFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddCacheConfigRequestManagementEnabledFieldOffset = DynamicConfigAddCacheConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddCacheConfigRequestReadThroughFieldOffset = DynamicConfigAddCacheConfigRequestManagementEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddCacheConfigRequestWriteThroughFieldOffset = DynamicConfigAddCacheConfigRequestReadThroughFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddCacheConfigRequestBackupCountFieldOffset = DynamicConfigAddCacheConfigRequestWriteThroughFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddCacheConfigRequestAsyncBackupCountFieldOffset = DynamicConfigAddCacheConfigRequestBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddCacheConfigRequestMergeBatchSizeFieldOffset = DynamicConfigAddCacheConfigRequestAsyncBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddCacheConfigRequestDisablePerEntryInvalidationEventsFieldOffset = DynamicConfigAddCacheConfigRequestMergeBatchSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddCacheConfigRequestInitialFrameSize = DynamicConfigAddCacheConfigRequestDisablePerEntryInvalidationEventsFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddCacheConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddCacheConfigRequestParameters struct {

    /**
    * cache name
    */
name string

    /**
    * class name of key type
    */
/* @Nullable */ keyType string

    /**
    * class name of value type
    */
/* @Nullable */ valueType string

    /**
    * {@code true} to enable gathering of statistics, otherwise {@code false}
    */
statisticsEnabled bool

    /**
    * {@code true} to enable management interface on this cache or {@code false}
    */
managementEnabled bool

    /**
    * {@code true} to enable read through from a {@code CacheLoader}
    */
readThrough bool

    /**
    * {@code true} to enable write through to a {@code CacheWriter}
    */
writeThrough bool

    /**
    * name of cache loader factory class, if one is configured
    */
/* @Nullable */ cacheLoaderFactory string

    /**
    * name of cache writer factory class, if one is configured
    */
/* @Nullable */ cacheWriterFactory string

    /**
    * Factory name of cache loader factory class, if one is configured
    */
/* @Nullable */ cacheLoader string

    /**
    * Factory name of cache writer factory class, if one is configured
    */
/* @Nullable */ cacheWriter string

    /**
    * number of synchronous backups
    */
backupCount int

    /**
    * number of asynchronous backups
    */
asyncBackupCount int

    /**
    * data type used to store entries. Valid values are {@code BINARY},
    * {@code OBJECT} and {@code NATIVE}.
    */
inMemoryFormat string

    /**
    * name of an existing configured split brain protection to be used to determine the minimum
    * number of members required in the cluster for the cache to remain functional.
    * When {@code null}, split brain protection does not apply to this cache's operations.
    */
/* @Nullable */ splitBrainProtectionName string

    /**
    * name of a class implementing {@link com.hazelcast.spi.merge.SplitBrainMergePolicy}
    * that handles merging of values for this cache while recovering from
    * network partitioning
    */
/* @Nullable */ mergePolicy string

    /**
    * number of entries to be sent in a merge operation
    */
mergeBatchSize int

    /**
    * when {@code true} disables invalidation events for per entry but
    * full-flush invalidation events are still enabled.
    */
disablePerEntryInvalidationEvents bool

    /**
    * partition lost listener configurations
    */
/* @Nullable */ partitionLostListenerConfigs []]ListenerConfigHolder

    /**
    * expiry policy factory class name. When configuring an expiry policy,
    * either this or {@ode timedExpiryPolicyFactoryConfig} should be configured.
    */
/* @Nullable */ expiryPolicyFactoryClassName string

    /**
    * expiry policy factory with duration configuration
    */
/* @Nullable */ timedExpiryPolicyFactoryConfig TimedExpiryPolicyFactoryConfig

    /**
    * cache entry listeners configuration
    */
/* @Nullable */ cacheEntryListeners []CacheSimpleEntryListenerConfig

    /**
    * cache eviction configuration
    */
/* @Nullable */ evictionConfig EvictionConfigHolder

    /**
    * reference to an existing WAN replication configuration
    */
/* @Nullable */ wanReplicationRef WanReplicationRef

    /**
    * Event Journal configuration
    */
/* @Nullable */ eventJournalConfig EventJournalConfig

    /**
    * hot restart configuration
    */
/* @Nullable */ hotRestartConfig HotRestartConfig
}

func DynamicConfigAddCacheConfigEncodeRequest(name string, /* @Nullable */ keyType string, /* @Nullable */ valueType string, statisticsEnabled bool, managementEnabled bool, readThrough bool, writeThrough bool, /* @Nullable */ cacheLoaderFactory string, /* @Nullable */ cacheWriterFactory string, /* @Nullable */ cacheLoader string, /* @Nullable */ cacheWriter string, backupCount int, asyncBackupCount int, inMemoryFormat string, /* @Nullable */ splitBrainProtectionName string, /* @Nullable */ mergePolicy string, mergeBatchSize int, disablePerEntryInvalidationEvents bool, /* @Nullable */ partitionLostListenerConfigs Collection<ListenerConfigHolder>, /* @Nullable */ expiryPolicyFactoryClassName string, /* @Nullable */ timedExpiryPolicyFactoryConfig TimedExpiryPolicyFactoryConfig, /* @Nullable */ cacheEntryListeners Collection<CacheSimpleEntryListenerConfig>, /* @Nullable */ evictionConfig EvictionConfigHolder, /* @Nullable */ wanReplicationRef WanReplicationRef, /* @Nullable */ eventJournalConfig EventJournalConfig, /* @Nullable */ hotRestartConfig HotRestartConfig) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddCacheConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddCacheConfigRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestManagementEnabledFieldOffset, managementEnabled)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestReadThroughFieldOffset, readThrough)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestWriteThroughFieldOffset, writeThrough)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddCacheConfigRequestBackupCountFieldOffset, backupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddCacheConfigRequestAsyncBackupCountFieldOffset, asyncBackupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddCacheConfigRequestMergeBatchSizeFieldOffset, mergeBatchSize)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestDisablePerEntryInvalidationEventsFieldOffset, disablePerEntryInvalidationEvents)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    CodecUtil.encodeNullable(clientMessage, keyType, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, valueType, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, cacheLoaderFactory, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, cacheWriterFactory, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, cacheLoader, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, cacheWriter, StringCodecEncode)
    StringCodec.encode(clientMessage, inMemoryFormat)
    CodecUtil.encodeNullable(clientMessage, splitBrainProtectionName, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, mergePolicy, StringCodecEncode)
    ListMultiFrameCodec.encodeNullable(clientMessage, partitionLostListenerConfigs, ListenerConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, expiryPolicyFactoryClassName, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, timedExpiryPolicyFactoryConfig, TimedExpiryPolicyFactoryConfigCodecEncode)
    ListMultiFrameCodec.encodeNullable(clientMessage, cacheEntryListeners, CacheSimpleEntryListenerConfigCodecEncode)
    CodecUtil.encodeNullable(clientMessage, evictionConfig, EvictionConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, wanReplicationRef, WanReplicationRefCodecEncode)
    CodecUtil.encodeNullable(clientMessage, eventJournalConfig, EventJournalConfigCodecEncode)
    CodecUtil.encodeNullable(clientMessage, hotRestartConfig, HotRestartConfigCodecEncode)
    return clientMessage
}

func DynamicConfigAddCacheConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddCacheConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddCacheConfigRequestParameters)
    initialFrame := iterator.Next()
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestStatisticsEnabledFieldOffset)
    request.managementEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestManagementEnabledFieldOffset)
    request.readThrough = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestReadThroughFieldOffset)
    request.writeThrough = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestWriteThroughFieldOffset)
    request.backupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddCacheConfigRequestBackupCountFieldOffset)
    request.asyncBackupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddCacheConfigRequestAsyncBackupCountFieldOffset)
    request.mergeBatchSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddCacheConfigRequestMergeBatchSizeFieldOffset)
    request.disablePerEntryInvalidationEvents = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddCacheConfigRequestDisablePerEntryInvalidationEventsFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.keyType = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.valueType = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.cacheLoaderFactory = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.cacheWriterFactory = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.cacheLoader = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.cacheWriter = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.inMemoryFormat = StringCodec.decode(iterator)
    request.splitBrainProtectionName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.mergePolicy = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.partitionLostListenerConfigs = ListMultiFrameCodec.decodeNullable(iterator, ListenerConfigHolderCodecDecode)
    request.expiryPolicyFactoryClassName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.timedExpiryPolicyFactoryConfig = CodecUtil.decodeNullable(iterator, TimedExpiryPolicyFactoryConfigCodecDecode) 
    request.cacheEntryListeners = ListMultiFrameCodec.decodeNullable(iterator, CacheSimpleEntryListenerConfigCodecDecode)
    request.evictionConfig = CodecUtil.decodeNullable(iterator, EvictionConfigHolderCodecDecode) 
    request.wanReplicationRef = CodecUtil.decodeNullable(iterator, WanReplicationRefCodecDecode) 
    request.eventJournalConfig = CodecUtil.decodeNullable(iterator, EventJournalConfigCodecDecode) 
    request.hotRestartConfig = CodecUtil.decodeNullable(iterator, HotRestartConfigCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddCacheConfigResponseParameters struct {
}

func DynamicConfigAddCacheConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddCacheConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddCacheConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddCacheConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddCacheConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddCacheConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

