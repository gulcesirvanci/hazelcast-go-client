
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/core"
    "github.com/hazelcast/hazelcast-go-client/serialization"



)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Subscribes to this topic. When someone publishes a message on this topic. onMessage() function of the given
 * MessageListener is called. More than one message listener can be added on one instance.
 */
//@Generated("22d9bd61d13836a90c99646104ed9f2f")
const (
    //hex: 0x040200
    TopicAddMessageListenerRequestMessageType = 262656
    //hex: 0x040201
    TopicAddMessageListenerResponseMessageType = 262657
    TopicAddMessageListenerRequestLocalOnlyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    TopicAddMessageListenerRequestInitialFrameSize = TopicAddMessageListenerRequestLocalOnlyFieldOffset + BooleanSizeInBytes
    TopicAddMessageListenerResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    TopicAddMessageListenerResponseInitialFrameSize = TopicAddMessageListenerResponseResponseFieldOffset + UUIDSizeInBytes
    TopicAddMessageListenerEventTopicPublishTimeFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    TopicAddMessageListenerEventTopicUuidFieldOffset = TopicAddMessageListenerEventTopicPublishTimeFieldOffset + LongSizeInBytes
    TopicAddMessageListenerEventTopicInitialFrameSize = TopicAddMessageListenerEventTopicUuidFieldOffset + UUIDSizeInBytes
    //hex: 0x040202
    TopicAddMessageListenerEventTopicMessageType = 262658


)

func TopicAddMessageListenerEncodeRequest(name string, localOnly bool) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Topic.AddMessageListener")
	initialFrame := &Frame{Content: make([]byte, TopicAddMessageListenerResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, TopicAddMessageListenerRequestMessageType)
    EncodeBoolean(initialFrame.Content, TopicAddMessageListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func TopicAddMessageListenerDecodeResponse(clientMessage *ClientMessage) func() (/*** returns the registration id*/response *core.Uuid) {
    return func() (/*** returns the registration id*/response *core.Uuid) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeUUID(initialFrame.Content, TopicAddMessageListenerResponseResponseFieldOffset)
        return
    }
}


type TopicAddMessageListenerHandleTopicFunc func(item serialization.Data, publishTime int64, uuid *core.Uuid)

func TopicAddMessageListenerHandle(clientMessage *ClientMessage, handleTopic TopicAddMessageListenerHandleTopicFunc){
    messageType := clientMessage.MessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == TopicAddMessageListenerEventTopicMessageType {
        initialFrame := iterator.Next()
        publishTime := DecodeLong(initialFrame.Content, TopicAddMessageListenerEventTopicPublishTimeFieldOffset)
        uuid := DecodeUUID(initialFrame.Content, TopicAddMessageListenerEventTopicUuidFieldOffset)
        item := DataCodecDecode(iterator)

        handleTopic(item, publishTime, uuid)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
    }

