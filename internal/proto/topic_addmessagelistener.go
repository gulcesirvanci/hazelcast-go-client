/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Subscribes to this topic. When someone publishes a message on this topic. onMessage() function of the given
 * MessageListener is called. More than one message listener can be added on one instance.
 */
//@Generated("42caaf9e0fcc4abe4be1c84d4e2222ba")
const (
    //hex: 0x040200
    TopicAddMessageListenerRequestMessageType = 262656
    //hex: 0x040201
    TopicAddMessageListenerResponseMessageType = 262657
    TopicAddMessageListenerRequestLocalOnlyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TopicAddMessageListenerRequestInitialFrameSize = TopicAddMessageListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    TopicAddMessageListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    TopicAddMessageListenerResponseInitialFrameSize = TopicAddMessageListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    TopicAddMessageListenerEventTopicPublishTimeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TopicAddMessageListenerEventTopicUuidFieldOffset = TopicAddMessageListenerEventTopicPublishTimeFieldOffset + bufutil.LongSizeInBytes
    TopicAddMessageListenerEventTopicInitialFrameSize = TopicAddMessageListenerEventTopicUuidFieldOffset + bufutil.UUIDSizeInBytes
    //hex: 0x040202
    TopicAddMessageListenerEventTopicMessageType = 262658


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TopicAddMessageListenerRequestParameters struct {

    /**
    * Name of the Topic
    */
name string

    /**
    * if true listens only local events on registered member
    */
localOnly bool
}

func TopicAddMessageListenerEncodeRequest(name string, localOnly bool) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Topic.AddMessageListener")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TopicAddMessageListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, TopicAddMessageListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TopicAddMessageListenerResponseParameters struct {
    /**
    * returns the registration id
    */
response string
}



func TopicAddMessageListenerDecodeResponse(clientMessage *bufutil.ClientMessage) *TopicAddMessageListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(TopicAddMessageListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, TopicAddMessageListenerResponseResponseFieldOffset)
    return response
}


    type TopicAddMessageListenerAbstractEventItemFunc func(item serialization.Data, publishTime int64, uuid string)

func TopicAddMessageListenerHandle(clientMessage *bufutil.ClientMessage, handleEventItem TopicAddMessageListenerAbstractEventItemFunc){
    messageType := clientMessage.GetMessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == TopicAddMessageListenerEventTopicMessageType {
        initialFrame := iterator.Next()
        publishTime := bufutil.DecodeLong(initialFrame.Content, TopicAddMessageListenerEventTopicPublishTimeFieldOffset)
        uuid := bufutil.DecodeUUID(initialFrame.Content, TopicAddMessageListenerEventTopicUuidFieldOffset)
        item := bufutil.DataCodecDecode(iterator)
        handleEventItem(item, publishTime, uuid)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
        }

