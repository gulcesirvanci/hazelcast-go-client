/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Atomically removes the mapping for a key only if currently mapped to the given value.
 */
//@Generated("92d91bf8e230a42e63938adbd1bbaa31")
const (
    //hex: 0x131600
    CacheRemoveRequestMessageType = 1250816
    //hex: 0x131601
    CacheRemoveResponseMessageType = 1250817
    CacheRemoveRequestCompletionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheRemoveRequestInitialFrameSize = CacheRemoveRequestCompletionIdFieldOffset + bufutil.IntSizeInBytes
    CacheRemoveResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CacheRemoveResponseInitialFrameSize = CacheRemoveResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheRemoveRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * key whose mapping is to be removed from the cache
    */
key serialization.Data

    /**
    * value expected to be associated with the specified key.
    */
/* @Nullable */ currentValue serialization.Data

    /**
    * User generated id which shall be received as a field of the cache event upon completion of
    * the request in the cluster.
    */
completionId int
}

func CacheRemoveEncodeRequest(name string, key serialization.Data, /* @Nullable */ currentValue serialization.Data, completionId int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.Remove")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheRemoveRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, CacheRemoveRequestCompletionIdFieldOffset, completionId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    CodecUtil.encodeNullable(clientMessage, currentValue, DataCodecEncode)
    return clientMessage
}

func CacheRemoveDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheRemoveRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheRemoveRequestParameters)
    initialFrame := iterator.Next()
    request.completionId = bufutil.DecodeInt(initialFrame.Content, CacheRemoveRequestCompletionIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    request.currentValue = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheRemoveResponseParameters struct {
    /**
    * returns false if there was no matching key
    */
response bool
}

func CacheRemoveEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheRemoveResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheRemoveResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CacheRemoveResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CacheRemoveDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheRemoveResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheRemoveResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, CacheRemoveResponseResponseFieldOffset)
    return response
}

