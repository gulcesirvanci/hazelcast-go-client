/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds the specified entry listener for the specified key. The listener will be notified for all
 * add/remove/update/evict events of the specified key only.
 */
//@Generated("a09b540bbd74263af911f594451bd5e6")
const (
    //hex: 0x0D0C00
    ReplicatedMapAddEntryListenerToKeyRequestMessageType = 855040
    //hex: 0x0D0C01
    ReplicatedMapAddEntryListenerToKeyResponseMessageType = 855041
    ReplicatedMapAddEntryListenerToKeyRequestLocalOnlyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ReplicatedMapAddEntryListenerToKeyRequestInitialFrameSize = ReplicatedMapAddEntryListenerToKeyRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    ReplicatedMapAddEntryListenerToKeyResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ReplicatedMapAddEntryListenerToKeyResponseInitialFrameSize = ReplicatedMapAddEntryListenerToKeyResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    ReplicatedMapAddEntryListenerToKeyEventEntryEventTypeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ReplicatedMapAddEntryListenerToKeyEventEntryUuidFieldOffset = ReplicatedMapAddEntryListenerToKeyEventEntryEventTypeFieldOffset + bufutil.IntSizeInBytes
    ReplicatedMapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset = ReplicatedMapAddEntryListenerToKeyEventEntryUuidFieldOffset + bufutil.UUIDSizeInBytes
    ReplicatedMapAddEntryListenerToKeyEventEntryInitialFrameSize = ReplicatedMapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x0D0C02
    ReplicatedMapAddEntryListenerToKeyEventEntryMessageType = 855042


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ReplicatedMapAddEntryListenerToKeyRequestParameters struct {

    /**
    * Name of the Replicated Map
    */
name string

    /**
    * Key with which the specified value is to be associated.
    */
key serialization.Data

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func ReplicatedMapAddEntryListenerToKeyEncodeRequest(name string, key serialization.Data, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("ReplicatedMap.AddEntryListenerToKey")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ReplicatedMapAddEntryListenerToKeyRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    return clientMessage
}

func ReplicatedMapAddEntryListenerToKeyDecodeRequest(clientMessage *bufutil.ClientMessagex) *ReplicatedMapAddEntryListenerToKeyRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ReplicatedMapAddEntryListenerToKeyRequestParameters)
    initialFrame := iterator.Next()
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyRequestLocalOnlyFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ReplicatedMapAddEntryListenerToKeyResponseParameters struct {
    /**
    * A unique string  which is used as a key to remove the listener.
    */
response UUID
}

func ReplicatedMapAddEntryListenerToKeyEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ReplicatedMapAddEntryListenerToKeyResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ReplicatedMapAddEntryListenerToKeyResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ReplicatedMapAddEntryListenerToKeyDecodeResponse(clientMessage *bufutil.ClientMessagex) *ReplicatedMapAddEntryListenerToKeyResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ReplicatedMapAddEntryListenerToKeyResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyResponseResponseFieldOffset)
    return response
}

    func encodeReplicatedMapAddEntryListenerToKeyEvent(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int, uuid UUID, numberOfAffectedEntries int) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ReplicatedMapAddEntryListenerToKeyEventEntryInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ReplicatedMapAddEntryListenerToKeyEventEntryMessageType)
        encodeInt(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyEventEntryEventTypeFieldOffset, eventType)
        encodeUUID(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyEventEntryUuidFieldOffset, uuid)
        encodeInt(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset, numberOfAffectedEntries)
        clientMessage.Add(initialFrame)

        CodecUtil.encodeNullable(clientMessage, key, DataCodecEncode)
        CodecUtil.encodeNullable(clientMessage, value, DataCodecEncode)
        CodecUtil.encodeNullable(clientMessage, oldValue, DataCodecEncode)
        CodecUtil.encodeNullable(clientMessage, mergingValue, DataCodecEncode)
        return clientMessage
    }

    type ReplicatedMapAddEntryListenerToKeyAbstractEventItemFunc func(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int, uuid UUID, numberOfAffectedEntries int)

     func ReplicatedMapAddEntryListenerToKeyHandle(clientMessage *bufutil.ClientMessagex, handleEventItem ReplicatedMapAddEntryListenerToKeyAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == ReplicatedMapAddEntryListenerToKeyEventEntryMessageType {
             initialFrame := iterator.Next()
             eventType := bufutil.DecodeInt(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyEventEntryEventTypeFieldOffset)
             uuid := bufutil.DecodeUUID(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyEventEntryUuidFieldOffset)
             numberOfAffectedEntries := bufutil.DecodeInt(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset)
             key := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             value := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             oldValue := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             mergingValue := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             handleEventItem(key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

