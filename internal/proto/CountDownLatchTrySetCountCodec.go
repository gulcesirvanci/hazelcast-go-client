/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Sets the count to the given value if the current count is zero.
 * If the count is not zero, then this method does nothing
 * and returns false
 */
//@Generated("b0a0088202b9e6068d4af1ddeeb0e78f")
const (
    //hex: 0x0B0100
    CountDownLatchTrySetCountRequestMessageType = 721152
    //hex: 0x0B0101
    CountDownLatchTrySetCountResponseMessageType = 721153
    CountDownLatchTrySetCountRequestCountFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CountDownLatchTrySetCountRequestInitialFrameSize = CountDownLatchTrySetCountRequestCountFieldOffset + bufutil.IntSizeInBytes
    CountDownLatchTrySetCountResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CountDownLatchTrySetCountResponseInitialFrameSize = CountDownLatchTrySetCountResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CountDownLatchTrySetCountRequestParameters struct {

    /**
    * CP group id of this CountDownLatch instance
    */
groupId RaftGroupId

    /**
    * Name of the CountDownLatch instance
    */
name string

    /**
    * The number of times countDown must be invoked before
    * threads can pass through await
    */
count int
}

func CountDownLatchTrySetCountEncodeRequest(groupId RaftGroupId, name string, count int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("CountDownLatch.TrySetCount")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CountDownLatchTrySetCountRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, CountDownLatchTrySetCountRequestCountFieldOffset, count)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func CountDownLatchTrySetCountDecodeRequest(clientMessage *bufutil.ClientMessagex) *CountDownLatchTrySetCountRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CountDownLatchTrySetCountRequestParameters)
    initialFrame := iterator.Next()
    request.count = bufutil.DecodeInt(initialFrame.Content, CountDownLatchTrySetCountRequestCountFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CountDownLatchTrySetCountResponseParameters struct {
    /**
    * true if the new count was set,
    * false if the current count is not zero.
    */
response bool
}

func CountDownLatchTrySetCountEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CountDownLatchTrySetCountResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CountDownLatchTrySetCountResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CountDownLatchTrySetCountResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CountDownLatchTrySetCountDecodeResponse(clientMessage *bufutil.ClientMessagex) *CountDownLatchTrySetCountResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CountDownLatchTrySetCountResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, CountDownLatchTrySetCountResponseResponseFieldOffset)
    return response
}

