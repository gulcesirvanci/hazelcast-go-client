/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("f03901d0a090de0bc961810349d08e6d")
const (
    //hex: 0x001200
    ClientIsFailoverSupportedRequestMessageType = 4608
    //hex: 0x001201
    ClientIsFailoverSupportedResponseMessageType = 4609
    ClientIsFailoverSupportedRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientIsFailoverSupportedResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ClientIsFailoverSupportedResponseInitialFrameSize = ClientIsFailoverSupportedResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientIsFailoverSupportedRequestParameters struct {
}

func ClientIsFailoverSupportedEncodeRequest() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Client.IsFailoverSupported")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientIsFailoverSupportedRequestMessageType)
    clientMessage.Add(initialFrame)
    return clientMessage
}




/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientIsFailoverSupportedResponseParameters struct {
    /**
    * Returns true if server supports cluster failover
    */
response bool
}



func ClientIsFailoverSupportedDecodeResponse(clientMessage *bufutil.ClientMessagex) *ClientIsFailoverSupportedResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ClientIsFailoverSupportedResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, ClientIsFailoverSupportedResponseResponseFieldOffset)
    return response
}

