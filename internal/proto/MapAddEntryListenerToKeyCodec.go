/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a MapListener for this map. To receive an event, you should implement a corresponding MapListener
 * sub-interface for that event.
 */
//@Generated("abf9e7cece68603e57c309b6486b51d1")
const (
    //hex: 0x011800
    MapAddEntryListenerToKeyRequestMessageType = 71680
    //hex: 0x011801
    MapAddEntryListenerToKeyResponseMessageType = 71681
    MapAddEntryListenerToKeyRequestIncludeValueFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerToKeyRequestListenerFlagsFieldOffset = MapAddEntryListenerToKeyRequestIncludeValueFieldOffset + bufutil.BooleanSizeInBytes
    MapAddEntryListenerToKeyRequestLocalOnlyFieldOffset = MapAddEntryListenerToKeyRequestListenerFlagsFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerToKeyRequestInitialFrameSize = MapAddEntryListenerToKeyRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    MapAddEntryListenerToKeyResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerToKeyResponseInitialFrameSize = MapAddEntryListenerToKeyResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    MapAddEntryListenerToKeyEventEntryEventTypeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerToKeyEventEntryUuidFieldOffset = MapAddEntryListenerToKeyEventEntryEventTypeFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset = MapAddEntryListenerToKeyEventEntryUuidFieldOffset + bufutil.UUIDSizeInBytes
    MapAddEntryListenerToKeyEventEntryInitialFrameSize = MapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x011802
    MapAddEntryListenerToKeyEventEntryMessageType = 71682


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddEntryListenerToKeyRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * Key for the map entry.
    */
key serialization.Data

    /**
    * true if EntryEvent should contain the value.
    */
includeValue bool

    /**
    * flags of enabled listeners.
    */
listenerFlags int

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func MapAddEntryListenerToKeyEncodeRequest(name string, key serialization.Data, includeValue bool, listenerFlags int, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.AddEntryListenerToKey")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddEntryListenerToKeyRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, MapAddEntryListenerToKeyRequestIncludeValueFieldOffset, includeValue)
    bufutil.EncodeInt(initialFrame.Content, MapAddEntryListenerToKeyRequestListenerFlagsFieldOffset, listenerFlags)
    bufutil.EncodeBoolean(initialFrame.Content, MapAddEntryListenerToKeyRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    return clientMessage
}

func MapAddEntryListenerToKeyDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapAddEntryListenerToKeyRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapAddEntryListenerToKeyRequestParameters)
    initialFrame := iterator.Next()
    request.includeValue = bufutil.DecodeBoolean(initialFrame.Content, MapAddEntryListenerToKeyRequestIncludeValueFieldOffset)
    request.listenerFlags = bufutil.DecodeInt(initialFrame.Content, MapAddEntryListenerToKeyRequestListenerFlagsFieldOffset)
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, MapAddEntryListenerToKeyRequestLocalOnlyFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddEntryListenerToKeyResponseParameters struct {
    /**
    * A unique string which is used as a key to remove the listener.
    */
response UUID
}

func MapAddEntryListenerToKeyEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapAddEntryListenerToKeyResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddEntryListenerToKeyResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, MapAddEntryListenerToKeyResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MapAddEntryListenerToKeyDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapAddEntryListenerToKeyResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapAddEntryListenerToKeyResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, MapAddEntryListenerToKeyResponseResponseFieldOffset)
    return response
}

    func encodeMapAddEntryListenerToKeyEvent(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int, uuid UUID, numberOfAffectedEntries int) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, MapAddEntryListenerToKeyEventEntryInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddEntryListenerToKeyEventEntryMessageType)
        encodeInt(initialFrame.Content, MapAddEntryListenerToKeyEventEntryEventTypeFieldOffset, eventType)
        encodeUUID(initialFrame.Content, MapAddEntryListenerToKeyEventEntryUuidFieldOffset, uuid)
        encodeInt(initialFrame.Content, MapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset, numberOfAffectedEntries)
        clientMessage.Add(initialFrame)

        CodecUtil.encodeNullable(clientMessage, key, DataCodecEncode)
        CodecUtil.encodeNullable(clientMessage, value, DataCodecEncode)
        CodecUtil.encodeNullable(clientMessage, oldValue, DataCodecEncode)
        CodecUtil.encodeNullable(clientMessage, mergingValue, DataCodecEncode)
        return clientMessage
    }

    type MapAddEntryListenerToKeyAbstractEventItemFunc func(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int, uuid UUID, numberOfAffectedEntries int)

     func MapAddEntryListenerToKeyHandle(clientMessage *bufutil.ClientMessagex, handleEventItem MapAddEntryListenerToKeyAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == MapAddEntryListenerToKeyEventEntryMessageType {
             initialFrame := iterator.Next()
             eventType := bufutil.DecodeInt(initialFrame.Content, MapAddEntryListenerToKeyEventEntryEventTypeFieldOffset)
             uuid := bufutil.DecodeUUID(initialFrame.Content, MapAddEntryListenerToKeyEventEntryUuidFieldOffset)
             numberOfAffectedEntries := bufutil.DecodeInt(initialFrame.Content, MapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset)
             key := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             value := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             oldValue := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             mergingValue := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             handleEventItem(key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

