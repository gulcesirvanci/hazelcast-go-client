/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("036cb6db2e5e647553b6a6da5233bf84")
const (
    //hex: 0x130F00
    CacheListenerRegistrationRequestMessageType = 1249024
    //hex: 0x130F01
    CacheListenerRegistrationResponseMessageType = 1249025
    CacheListenerRegistrationRequestShouldRegisterFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheListenerRegistrationRequestInitialFrameSize = CacheListenerRegistrationRequestShouldRegisterFieldOffset + bufutil.BooleanSizeInBytes
    CacheListenerRegistrationResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheListenerRegistrationRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * The listener configuration. Byte-array which is serialized from an object implementing
    * javax.cache.configuration.CacheEntryListenerConfiguration
    */
listenerConfig serialization.Data

    /**
    * true if the listener is being registered, false if the listener is being unregistered.
    */
shouldRegister bool

    /**
    * The address of the member server for which the listener is being registered for.
    */
address Address
}

func CacheListenerRegistrationEncodeRequest(name string, listenerConfig serialization.Data, shouldRegister bool, address Address) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.ListenerRegistration")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheListenerRegistrationRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CacheListenerRegistrationRequestShouldRegisterFieldOffset, shouldRegister)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, listenerConfig)
    AddressCodec.encode(clientMessage, address)
    return clientMessage
}

func CacheListenerRegistrationDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheListenerRegistrationRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheListenerRegistrationRequestParameters)
    initialFrame := iterator.Next()
    request.shouldRegister = bufutil.DecodeBoolean(initialFrame.Content, CacheListenerRegistrationRequestShouldRegisterFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.listenerConfig = DataCodec.decode(iterator)
    request.address = AddressCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheListenerRegistrationResponseParameters struct {
}

func CacheListenerRegistrationEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheListenerRegistrationResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheListenerRegistrationResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CacheListenerRegistrationDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheListenerRegistrationResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheListenerRegistrationResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

