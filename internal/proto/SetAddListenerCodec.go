/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds an item listener for this collection. Listener will be notified for all collection add/remove events.
 */
//@Generated("9c01d29e55f6e2ee38250a21926ecbf4")
const (
    //hex: 0x060B00
    SetAddListenerRequestMessageType = 396032
    //hex: 0x060B01
    SetAddListenerResponseMessageType = 396033
    SetAddListenerRequestIncludeValueFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SetAddListenerRequestLocalOnlyFieldOffset = SetAddListenerRequestIncludeValueFieldOffset + bufutil.BooleanSizeInBytes
    SetAddListenerRequestInitialFrameSize = SetAddListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    SetAddListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    SetAddListenerResponseInitialFrameSize = SetAddListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    SetAddListenerEventItemUuidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SetAddListenerEventItemEventTypeFieldOffset = SetAddListenerEventItemUuidFieldOffset + bufutil.UUIDSizeInBytes
    SetAddListenerEventItemInitialFrameSize = SetAddListenerEventItemEventTypeFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x060B02
    SetAddListenerEventItemMessageType = 396034


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SetAddListenerRequestParameters struct {

    /**
    * Name of the Set
    */
name string

    /**
    * if set to true, the event shall also include the value.
    */
includeValue bool

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func SetAddListenerEncodeRequest(name string, includeValue bool, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Set.AddListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SetAddListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, SetAddListenerRequestIncludeValueFieldOffset, includeValue)
    bufutil.EncodeBoolean(initialFrame.Content, SetAddListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func SetAddListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *SetAddListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(SetAddListenerRequestParameters)
    initialFrame := iterator.Next()
    request.includeValue = bufutil.DecodeBoolean(initialFrame.Content, SetAddListenerRequestIncludeValueFieldOffset)
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, SetAddListenerRequestLocalOnlyFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SetAddListenerResponseParameters struct {
    /**
    * The registration id.
    */
response UUID
}

func SetAddListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, SetAddListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SetAddListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, SetAddListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func SetAddListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *SetAddListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(SetAddListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, SetAddListenerResponseResponseFieldOffset)
    return response
}

    func encodeSetAddListenerEvent(/* @Nullable */ item serialization.Data, uuid UUID, eventType int) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, SetAddListenerEventItemInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SetAddListenerEventItemMessageType)
        encodeUUID(initialFrame.Content, SetAddListenerEventItemUuidFieldOffset, uuid)
        encodeInt(initialFrame.Content, SetAddListenerEventItemEventTypeFieldOffset, eventType)
        clientMessage.Add(initialFrame)

        CodecUtil.encodeNullable(clientMessage, item, DataCodecEncode)
        return clientMessage
    }

    type SetAddListenerAbstractEventItemFunc func(/* @Nullable */ item serialization.Data, uuid UUID, eventType int)

     func SetAddListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem SetAddListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == SetAddListenerEventItemMessageType {
             initialFrame := iterator.Next()
             uuid := bufutil.DecodeUUID(initialFrame.Content, SetAddListenerEventItemUuidFieldOffset)
             eventType := bufutil.DecodeInt(initialFrame.Content, SetAddListenerEventItemEventTypeFieldOffset)
             item := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             handleEventItem(item, uuid, eventType)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

