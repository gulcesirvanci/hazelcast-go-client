
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Queries the map based on the specified predicate and returns the matching entries.Specified predicate
 * runs on all members in parallel. The collection is NOT backed by the map, so changes to the map are NOT reflected
 * in the collection, and vice-versa. This method is always executed by a distributed query, so it may throw a
 * QueryResultSizeExceededException if query result size limit is configured.
 */
//@Generated("92b2177f66e761e46498340e074ad777")
const (
    //hex: 0x012800
    MapEntriesWithPredicateRequestMessageType = 75776
    //hex: 0x012801
    MapEntriesWithPredicateResponseMessageType = 75777
    MapEntriesWithPredicateRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    MapEntriesWithPredicateResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func MapEntriesWithPredicateEncodeRequest(name string, predicate serialization.Data) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Map.EntriesWithPredicate")
	initialFrame := &Frame{Content: make([]byte, MapEntriesWithPredicateResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapEntriesWithPredicateRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, predicate)

    return clientMessage
}


func MapEntriesWithPredicateDecodeResponse(clientMessage *ClientMessage) func() (/*** result key-value entry collection of the query.*/response []*Pair) {
    return func() (/*** result key-value entry collection of the query.*/response []*Pair) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        var result []*Pair
        //begin frame, list
        iterator.Next()
        for !NextFrameIsDataStructureEndFrame(iterator) {
            i := 0
            key := DataCodecDecode(iterator)
            value := DataCodecDecode(iterator)
            result[i] = NewPair(key,value)
            i++
        }

        //end frame, list
        iterator.Next()
        response = result //2


        return
    }
}

