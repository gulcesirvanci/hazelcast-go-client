/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Gets the config of a map on the member it's called on.
 */
//@Generated("d1544107af01665072b66441eb0412c0")
const (
    //hex: 0x200300
    MCGetMapConfigRequestMessageType = 2097920
    //hex: 0x200301
    MCGetMapConfigResponseMessageType = 2097921
    MCGetMapConfigRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MCGetMapConfigResponseInMemoryFormatFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MCGetMapConfigResponseBackupCountFieldOffset = MCGetMapConfigResponseInMemoryFormatFieldOffset + bufutil.IntSizeInBytes
    MCGetMapConfigResponseAsyncBackupCountFieldOffset = MCGetMapConfigResponseBackupCountFieldOffset + bufutil.IntSizeInBytes
    MCGetMapConfigResponseTimeToLiveSecondsFieldOffset = MCGetMapConfigResponseAsyncBackupCountFieldOffset + bufutil.IntSizeInBytes
    MCGetMapConfigResponseMaxIdleSecondsFieldOffset = MCGetMapConfigResponseTimeToLiveSecondsFieldOffset + bufutil.IntSizeInBytes
    MCGetMapConfigResponseMaxSizeFieldOffset = MCGetMapConfigResponseMaxIdleSecondsFieldOffset + bufutil.IntSizeInBytes
    MCGetMapConfigResponseMaxSizePolicyFieldOffset = MCGetMapConfigResponseMaxSizeFieldOffset + bufutil.IntSizeInBytes
    MCGetMapConfigResponseReadBackupDataFieldOffset = MCGetMapConfigResponseMaxSizePolicyFieldOffset + bufutil.IntSizeInBytes
    MCGetMapConfigResponseEvictionPolicyFieldOffset = MCGetMapConfigResponseReadBackupDataFieldOffset + bufutil.BooleanSizeInBytes
    MCGetMapConfigResponseInitialFrameSize = MCGetMapConfigResponseEvictionPolicyFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCGetMapConfigRequestParameters struct {

    /**
    * Name of the map.
    */
mapName string
}

func MCGetMapConfigEncodeRequest(mapName string) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("MC.GetMapConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCGetMapConfigRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, mapName)
    return clientMessage
}

func MCGetMapConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *MCGetMapConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MCGetMapConfigRequestParameters)
    //empty initial frame
    iterator.Next()
    request.mapName = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCGetMapConfigResponseParameters struct {
    /**
    * The in memory storage format of the map:
    * 0 - Binary
    * 1 - Object
    * 2 - Native
    */
inMemoryFormat int
    /**
    * Backup count of the map.
    */
backupCount int
    /**
    * Async backup count of the map.
    */
asyncBackupCount int
    /**
    * Time to live seconds for the map entries.
    */
timeToLiveSeconds int
    /**
    * Maximum idle seconds for the map entries.
    */
maxIdleSeconds int
    /**
    * Maximum size of the map.
    */
maxSize int
    /**
    * The maximum size policy of the map:
    * 0 - PER_NODE
    * 1 - PER_PARTITION
    * 2 - USED_HEAP_PERCENTAGE
    * 3 - USED_HEAP_SIZE
    * 4 - FREE_HEAP_PERCENTAGE
    * 5 - FREE_HEAP_SIZE
    * 6 - USED_NATIVE_MEMORY_SIZE
    * 7 - USED_NATIVE_MEMORY_PERCENTAGE
    * 8 - FREE_NATIVE_MEMORY_SIZE
    * 9 - FREE_NATIVE_MEMORY_PERCENTAGE
    */
maxSizePolicy int
    /**
    * Whether reading from backup data is allowed.
    */
readBackupData bool
    /**
    * The eviction policy of the map:
    * 0 - LRU
    * 1 - LFU
    * 2 - NONE
    * 3 - RANDOM
    */
evictionPolicy int
    /**
    * Classname of the SplitBrainMergePolicy for the map.
    */
mergePolicy string
}

func MCGetMapConfigEncodeResponse(inMemoryFormat int , backupCount int , asyncBackupCount int , timeToLiveSeconds int , maxIdleSeconds int , maxSize int , maxSizePolicy int , readBackupData bool , evictionPolicy int , mergePolicy string ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MCGetMapConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCGetMapConfigResponseMessageType)
    bufutil.EncodeInt(initialFrame.Content, MCGetMapConfigResponseInMemoryFormatFieldOffset, inMemoryFormat)
    bufutil.EncodeInt(initialFrame.Content, MCGetMapConfigResponseBackupCountFieldOffset, backupCount)
    bufutil.EncodeInt(initialFrame.Content, MCGetMapConfigResponseAsyncBackupCountFieldOffset, asyncBackupCount)
    bufutil.EncodeInt(initialFrame.Content, MCGetMapConfigResponseTimeToLiveSecondsFieldOffset, timeToLiveSeconds)
    bufutil.EncodeInt(initialFrame.Content, MCGetMapConfigResponseMaxIdleSecondsFieldOffset, maxIdleSeconds)
    bufutil.EncodeInt(initialFrame.Content, MCGetMapConfigResponseMaxSizeFieldOffset, maxSize)
    bufutil.EncodeInt(initialFrame.Content, MCGetMapConfigResponseMaxSizePolicyFieldOffset, maxSizePolicy)
    bufutil.EncodeBoolean(initialFrame.Content, MCGetMapConfigResponseReadBackupDataFieldOffset, readBackupData)
    bufutil.EncodeInt(initialFrame.Content, MCGetMapConfigResponseEvictionPolicyFieldOffset, evictionPolicy)
    clientMessage.Add(initialFrame)

    StringCodec.encode(clientMessage, mergePolicy)
    return clientMessage
}

func MCGetMapConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *MCGetMapConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MCGetMapConfigResponseParameters)
    initialFrame := iterator.Next()
    response.inMemoryFormat = bufutil.DecodeInt(initialFrame.Content, MCGetMapConfigResponseInMemoryFormatFieldOffset)
    response.backupCount = bufutil.DecodeInt(initialFrame.Content, MCGetMapConfigResponseBackupCountFieldOffset)
    response.asyncBackupCount = bufutil.DecodeInt(initialFrame.Content, MCGetMapConfigResponseAsyncBackupCountFieldOffset)
    response.timeToLiveSeconds = bufutil.DecodeInt(initialFrame.Content, MCGetMapConfigResponseTimeToLiveSecondsFieldOffset)
    response.maxIdleSeconds = bufutil.DecodeInt(initialFrame.Content, MCGetMapConfigResponseMaxIdleSecondsFieldOffset)
    response.maxSize = bufutil.DecodeInt(initialFrame.Content, MCGetMapConfigResponseMaxSizeFieldOffset)
    response.maxSizePolicy = bufutil.DecodeInt(initialFrame.Content, MCGetMapConfigResponseMaxSizePolicyFieldOffset)
    response.readBackupData = bufutil.DecodeBoolean(initialFrame.Content, MCGetMapConfigResponseReadBackupDataFieldOffset)
    response.evictionPolicy = bufutil.DecodeInt(initialFrame.Content, MCGetMapConfigResponseEvictionPolicyFieldOffset)
    response.mergePolicy = StringCodec.decode(iterator)
    return response
}

