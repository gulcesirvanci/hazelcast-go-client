/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns current lock ownership status of the given FencedLock instance.
 */
//@Generated("d9fc7c01042c4035f0c8bebf5eadb353")
const (
    //hex: 0x070400
    FencedLockGetLockOwnershipRequestMessageType = 459776
    //hex: 0x070401
    FencedLockGetLockOwnershipResponseMessageType = 459777
    FencedLockGetLockOwnershipRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    FencedLockGetLockOwnershipResponseFenceFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    FencedLockGetLockOwnershipResponseLockCountFieldOffset = FencedLockGetLockOwnershipResponseFenceFieldOffset + bufutil.LongSizeInBytes
    FencedLockGetLockOwnershipResponseSessionIdFieldOffset = FencedLockGetLockOwnershipResponseLockCountFieldOffset + bufutil.IntSizeInBytes
    FencedLockGetLockOwnershipResponseThreadIdFieldOffset = FencedLockGetLockOwnershipResponseSessionIdFieldOffset + bufutil.LongSizeInBytes
    FencedLockGetLockOwnershipResponseInitialFrameSize = FencedLockGetLockOwnershipResponseThreadIdFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type FencedLockGetLockOwnershipRequestParameters struct {

    /**
    * CP group id of this FencedLock instance
    */
groupId RaftGroupId

    /**
    * Name of this FencedLock instance
    */
name string
}

func FencedLockGetLockOwnershipEncodeRequest(groupId RaftGroupId, name string) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("FencedLock.GetLockOwnership")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, FencedLockGetLockOwnershipRequestMessageType)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func FencedLockGetLockOwnershipDecodeRequest(clientMessage *bufutil.ClientMessagex) *FencedLockGetLockOwnershipRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(FencedLockGetLockOwnershipRequestParameters)
    //empty initial frame
    iterator.Next()
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type FencedLockGetLockOwnershipResponseParameters struct {
    /**
    * TODO DOC
    */
fence int64
    /**
    * TODO DOC
    */
lockCount int
    /**
    * TODO DOC
    */
sessionId int64
    /**
    * TODO DOC
    */
threadId int64
}

func FencedLockGetLockOwnershipEncodeResponse(fence int64 , lockCount int , sessionId int64 , threadId int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, FencedLockGetLockOwnershipResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, FencedLockGetLockOwnershipResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, FencedLockGetLockOwnershipResponseFenceFieldOffset, fence)
    bufutil.EncodeInt(initialFrame.Content, FencedLockGetLockOwnershipResponseLockCountFieldOffset, lockCount)
    bufutil.EncodeLong(initialFrame.Content, FencedLockGetLockOwnershipResponseSessionIdFieldOffset, sessionId)
    bufutil.EncodeLong(initialFrame.Content, FencedLockGetLockOwnershipResponseThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func FencedLockGetLockOwnershipDecodeResponse(clientMessage *bufutil.ClientMessagex) *FencedLockGetLockOwnershipResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(FencedLockGetLockOwnershipResponseParameters)
    initialFrame := iterator.Next()
    response.fence = bufutil.DecodeLong(initialFrame.Content, FencedLockGetLockOwnershipResponseFenceFieldOffset)
    response.lockCount = bufutil.DecodeInt(initialFrame.Content, FencedLockGetLockOwnershipResponseLockCountFieldOffset)
    response.sessionId = bufutil.DecodeLong(initialFrame.Content, FencedLockGetLockOwnershipResponseSessionIdFieldOffset)
    response.threadId = bufutil.DecodeLong(initialFrame.Content, FencedLockGetLockOwnershipResponseThreadIdFieldOffset)
    return response
}

