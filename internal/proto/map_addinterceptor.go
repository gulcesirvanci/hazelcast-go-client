/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds an interceptor for this map. Added interceptor will intercept operations
 * and execute user defined methods and will cancel operations if user defined method throw exception.
 */
//@Generated("c2b80ace1626308342ac8108455bbe74")
const (
    //hex: 0x011400
    MapAddInterceptorRequestMessageType = 70656
    //hex: 0x011401
    MapAddInterceptorResponseMessageType = 70657
    MapAddInterceptorRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapAddInterceptorResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddInterceptorRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * interceptor to add
    */
interceptor serialization.Data
}

func MapAddInterceptorEncodeRequest(name string, interceptor serialization.Data) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Map.AddInterceptor")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddInterceptorRequestMessageType)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, interceptor)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddInterceptorResponseParameters struct {
    /**
    * id of registered interceptor.
    */
response string
}



func MapAddInterceptorDecodeResponse(clientMessage *bufutil.ClientMessage) *MapAddInterceptorResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapAddInterceptorResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = bufutil.StringCodecDecode(iterator)
    return response
}

