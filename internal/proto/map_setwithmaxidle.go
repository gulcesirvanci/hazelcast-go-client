
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Puts an entry into this map with a given ttl (time to live) value and maxIdle.
 * Entry will expire and get evicted after the ttl or maxIdle, whichever comes first.
 * If ttl and maxIdle are 0, then the entry lives forever.
 * 
 * Similar to the put operation except that set doesn't return the old value, which is more efficient.
 */
//@Generated("ce783a534aac1c199f3670c733b0ceb5")
const (
    //hex: 0x014700
    MapSetWithMaxIdleRequestMessageType = 83712
    //hex: 0x014701
    MapSetWithMaxIdleResponseMessageType = 83713
    MapSetWithMaxIdleRequestThreadIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    MapSetWithMaxIdleRequestTtlFieldOffset = MapSetWithMaxIdleRequestThreadIdFieldOffset + LongSizeInBytes
    MapSetWithMaxIdleRequestMaxIdleFieldOffset = MapSetWithMaxIdleRequestTtlFieldOffset + LongSizeInBytes
    MapSetWithMaxIdleRequestInitialFrameSize = MapSetWithMaxIdleRequestMaxIdleFieldOffset + LongSizeInBytes
    MapSetWithMaxIdleResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func MapSetWithMaxIdleEncodeRequest(name string, key serialization.Data, value serialization.Data, threadId int64, ttl int64, maxIdle int64) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Map.SetWithMaxIdle")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapSetWithMaxIdleRequestMessageType)
    EncodeLong(initialFrame.Content, MapSetWithMaxIdleRequestThreadIdFieldOffset, threadId)
    EncodeLong(initialFrame.Content, MapSetWithMaxIdleRequestTtlFieldOffset, ttl)
    EncodeLong(initialFrame.Content, MapSetWithMaxIdleRequestMaxIdleFieldOffset, maxIdle)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, key)


    DataCodecEncode(clientMessage, value)

    return clientMessage
}


func MapSetWithMaxIdleDecodeResponse(clientMessage *ClientMessage) func() ( /*** old value of the entry*//* @Nullable */response serialization.Data) {
    return func() (/*** old value of the entry*//* @Nullable */response serialization.Data) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        response = DecodeNullable(iterator, DataCodecDecode).(serialization.Data)
        return
    }
}

