
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Releases the lock for the specified key regardless of the lock owner.It always successfully unlocks the key,
 * never blocks,and returns immediately.
 */
//@Generated("87c2d3b4c81caa09d3161a10990c90ae")
const (
    //hex: 0x013300
    MapForceUnlockRequestMessageType = 78592
    //hex: 0x013301
    MapForceUnlockResponseMessageType = 78593
    MapForceUnlockRequestReferenceIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    MapForceUnlockRequestInitialFrameSize = MapForceUnlockRequestReferenceIdFieldOffset + LongSizeInBytes
    MapForceUnlockResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func MapForceUnlockEncodeRequest(name string, key serialization.Data, referenceId int64) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Map.ForceUnlock")
	initialFrame := &Frame{Content: make([]byte, MapForceUnlockResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapForceUnlockRequestMessageType)
    EncodeLong(initialFrame.Content, MapForceUnlockRequestReferenceIdFieldOffset, referenceId)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, key)

    return clientMessage
}


func MapForceUnlockDecodeResponse(clientMessage *ClientMessage) func() () {
    return func() () {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        return
    }
}

