/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("7dfc11706fca1a8a4e713508d51b4823")
const (
    //hex: 0x000B00
    ClientAddDistributedObjectListenerRequestMessageType = 2816
    //hex: 0x000B01
    ClientAddDistributedObjectListenerResponseMessageType = 2817
    ClientAddDistributedObjectListenerRequestLocalOnlyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddDistributedObjectListenerRequestInitialFrameSize = ClientAddDistributedObjectListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    ClientAddDistributedObjectListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddDistributedObjectListenerResponseInitialFrameSize = ClientAddDistributedObjectListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    ClientAddDistributedObjectListenerEventDistributedObjectInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x000B02
    ClientAddDistributedObjectListenerEventDistributedObjectMessageType = 2818


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientAddDistributedObjectListenerRequestParameters struct {

    /**
    * If set to true, the server adds the listener only to itself, otherwise the listener is is added for all
    * members in the cluster.
    */
localOnly bool
}

func ClientAddDistributedObjectListenerEncodeRequest(localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Client.AddDistributedObjectListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddDistributedObjectListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, ClientAddDistributedObjectListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func ClientAddDistributedObjectListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *ClientAddDistributedObjectListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ClientAddDistributedObjectListenerRequestParameters)
    initialFrame := iterator.Next()
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, ClientAddDistributedObjectListenerRequestLocalOnlyFieldOffset)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientAddDistributedObjectListenerResponseParameters struct {
    /**
    * The registration id for the distributed object listener.
    */
response UUID
}

func ClientAddDistributedObjectListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ClientAddDistributedObjectListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddDistributedObjectListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, ClientAddDistributedObjectListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ClientAddDistributedObjectListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *ClientAddDistributedObjectListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ClientAddDistributedObjectListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, ClientAddDistributedObjectListenerResponseResponseFieldOffset)
    return response
}

    func encodeClientAddDistributedObjectListenerEvent(name string, serviceName string, eventType string) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ClientAddDistributedObjectListenerEventDistributedObjectInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddDistributedObjectListenerEventDistributedObjectMessageType)
        clientMessage.Add(initialFrame)

        StringCodec.encode(clientMessage, name)
        StringCodec.encode(clientMessage, serviceName)
        StringCodec.encode(clientMessage, eventType)
        return clientMessage
    }

    type ClientAddDistributedObjectListenerAbstractEventItemFunc func(name string, serviceName string, eventType string)

     func ClientAddDistributedObjectListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem ClientAddDistributedObjectListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == ClientAddDistributedObjectListenerEventDistributedObjectMessageType {
             //empty initial frame
             iterator.Next()
             name := StringCodec.decode(iterator)
             serviceName := StringCodec.decode(iterator)
             eventType := StringCodec.decode(iterator)
             handleEventItem(name, serviceName, eventType)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

