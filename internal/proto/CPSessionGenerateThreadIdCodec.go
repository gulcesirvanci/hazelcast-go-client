/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Generates a new ID for the caller thread. The ID is unique in the given
 * CP group.
 */
//@Generated("fa419831e3664771cd02f89ee8bde65b")
const (
    //hex: 0x1F0400
    CPSessionGenerateThreadIdRequestMessageType = 2032640
    //hex: 0x1F0401
    CPSessionGenerateThreadIdResponseMessageType = 2032641
    CPSessionGenerateThreadIdRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CPSessionGenerateThreadIdResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CPSessionGenerateThreadIdResponseInitialFrameSize = CPSessionGenerateThreadIdResponseResponseFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CPSessionGenerateThreadIdRequestParameters struct {

    /**
    * ID of the CP group
    */
groupId RaftGroupId
}

func CPSessionGenerateThreadIdEncodeRequest(groupId RaftGroupId) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("CPSession.GenerateThreadId")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CPSessionGenerateThreadIdRequestMessageType)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    return clientMessage
}

func CPSessionGenerateThreadIdDecodeRequest(clientMessage *bufutil.ClientMessagex) *CPSessionGenerateThreadIdRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CPSessionGenerateThreadIdRequestParameters)
    //empty initial frame
    iterator.Next()
    request.groupId = RaftGroupIdCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CPSessionGenerateThreadIdResponseParameters struct {
    /**
    * A unique ID for the caller thread
    */
response int64
}

func CPSessionGenerateThreadIdEncodeResponse(response int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CPSessionGenerateThreadIdResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CPSessionGenerateThreadIdResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, CPSessionGenerateThreadIdResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CPSessionGenerateThreadIdDecodeResponse(clientMessage *bufutil.ClientMessagex) *CPSessionGenerateThreadIdResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CPSessionGenerateThreadIdResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeLong(initialFrame.Content, CPSessionGenerateThreadIdResponseResponseFieldOffset)
    return response
}

