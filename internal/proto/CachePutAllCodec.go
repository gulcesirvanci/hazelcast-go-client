/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("8779379614a4c253aa5dab02cd025d9a")
const (
    //hex: 0x131B00
    CachePutAllRequestMessageType = 1252096
    //hex: 0x131B01
    CachePutAllResponseMessageType = 1252097
    CachePutAllRequestCompletionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CachePutAllRequestInitialFrameSize = CachePutAllRequestCompletionIdFieldOffset + bufutil.IntSizeInBytes
    CachePutAllResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CachePutAllRequestParameters struct {

    /**
    * name of the cache
    */
name string

    /**
    * entries to be put as batch
    */
entries java.util.List<[]serialization.Data, []serialization.Data>

    /**
    * expiry policy for the entry. Byte-array which is serialized from an object implementing
    * {@link javax.cache.expiry.ExpiryPolicy} interface.
    */
/* @Nullable */ expiryPolicy serialization.Data

    /**
    * user generated id which shall be received as a field of the cache event upon completion of
    * the request in the cluster.
    */
completionId int
}

func CachePutAllEncodeRequest(name string, entries []serialization.Data, []serialization.Data, /* @Nullable */ expiryPolicy serialization.Data, completionId int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.PutAll")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CachePutAllRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, CachePutAllRequestCompletionIdFieldOffset, completionId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    EntryListCodec.encode(clientMessage, entries, DataCodecEncode, DataCodecEncode)
    CodecUtil.encodeNullable(clientMessage, expiryPolicy, DataCodecEncode)
    return clientMessage
}

func CachePutAllDecodeRequest(clientMessage *bufutil.ClientMessagex) *CachePutAllRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CachePutAllRequestParameters)
    initialFrame := iterator.Next()
    request.completionId = bufutil.DecodeInt(initialFrame.Content, CachePutAllRequestCompletionIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.entries = EntryListCodec.decode(iterator, DataCodecDecode, DataCodecDecode)
    request.expiryPolicy = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CachePutAllResponseParameters struct {
}

func CachePutAllEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CachePutAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CachePutAllResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CachePutAllDecodeResponse(clientMessage *bufutil.ClientMessagex) *CachePutAllResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CachePutAllResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

