/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Removes all available elements from this queue and adds them to the given collection.  This operation may be more
 * efficient than repeatedly polling this queue.  A failure encountered while attempting to add elements to
 * collection c may result in elements being in neither, either or both collections when the associated exception is
 * thrown. Attempts to drain a queue to itself result in ILLEGAL_ARGUMENT. Further, the behavior of
 * this operation is undefined if the specified collection is modified while the operation is in progress.
 */
//@Generated("428843728f87a1e7eeaba80a06939896")
const (
    //hex: 0x030900
    QueueDrainToRequestMessageType = 198912
    //hex: 0x030901
    QueueDrainToResponseMessageType = 198913
    QueueDrainToRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    QueueDrainToResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueDrainToRequestParameters struct {

    /**
    * Name of the Queue
    */
name string
}

func QueueDrainToEncodeRequest(name string) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Queue.DrainTo")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, QueueDrainToRequestMessageType)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueDrainToResponseParameters struct {
    /**
    * list of all removed data in queue
    */
response []serialization.Data
}



func QueueDrainToDecodeResponse(clientMessage *bufutil.ClientMessage) *QueueDrainToResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(QueueDrainToResponseParameters)
    //empty initial frame
    iterator.Next()
    var result []serialization.Data
        //begin frame, list
        iterator.Next()
        for !bufutil.NextFrameIsDataStructureEndFrame(iterator) {
        result = append(result, bufutil.DataCodecDecode(iterator))
        }
        //end frame, list
        iterator.Next()
        response.response = result
    return response
}

