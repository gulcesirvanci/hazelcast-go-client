/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds all the items of a collection to the tail of the Ringbuffer. A addAll is likely to outperform multiple calls
 * to add(Object) due to better io utilization and a reduced number of executed operations. If the batch is empty,
 * the call is ignored. When the collection is not empty, the content is copied into a different data-structure.
 * This means that: after this call completes, the collection can be re-used. the collection doesn't need to be serializable.
 * If the collection is larger than the capacity of the ringbuffer, then the items that were written first will be
 * overwritten. Therefor this call will not block. The items are inserted in the order of the Iterator of the collection.
 * If an addAll is executed concurrently with an add or addAll, no guarantee is given that items are contiguous.
 * The result of the future contains the sequenceId of the last written item
 */
//@Generated("8318abb6ab755b1d2994447f3fd78e13")
const (
    //hex: 0x170800
    RingbufferAddAllRequestMessageType = 1509376
    //hex: 0x170801
    RingbufferAddAllResponseMessageType = 1509377
    RingbufferAddAllRequestOverflowPolicyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    RingbufferAddAllRequestInitialFrameSize = RingbufferAddAllRequestOverflowPolicyFieldOffset + bufutil.IntSizeInBytes
    RingbufferAddAllResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    RingbufferAddAllResponseInitialFrameSize = RingbufferAddAllResponseResponseFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type RingbufferAddAllRequestParameters struct {

    /**
    * Name of the Ringbuffer
    */
name string

    /**
    * the batch of items to add
    */
valueList []serialization.Data

    /**
    * the overflowPolicy to use
    */
overflowPolicy int
}

func RingbufferAddAllEncodeRequest(name string, valueList []serialization.Data, overflowPolicy int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Ringbuffer.AddAll")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, RingbufferAddAllRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, RingbufferAddAllRequestOverflowPolicyFieldOffset, overflowPolicy)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encode(clientMessage, valueList, DataCodecEncode)
    return clientMessage
}

func RingbufferAddAllDecodeRequest(clientMessage *bufutil.ClientMessagex) *RingbufferAddAllRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(RingbufferAddAllRequestParameters)
    initialFrame := iterator.Next()
    request.overflowPolicy = bufutil.DecodeInt(initialFrame.Content, RingbufferAddAllRequestOverflowPolicyFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.valueList = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type RingbufferAddAllResponseParameters struct {
    /**
    * the CompletionStage to synchronize on completion.
    */
response int64
}

func RingbufferAddAllEncodeResponse(response int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, RingbufferAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, RingbufferAddAllResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, RingbufferAddAllResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func RingbufferAddAllDecodeResponse(clientMessage *bufutil.ClientMessagex) *RingbufferAddAllResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(RingbufferAddAllResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeLong(initialFrame.Content, RingbufferAddAllResponseResponseFieldOffset)
    return response
}

