/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds an entry listener for this multimap. The listener will be notified for all multimap add/remove/update/evict events.
 */
//@Generated("25b4b2728e31adbcd0b4df738a008a3f")
const (
    //hex: 0x020E00
    MultiMapAddEntryListenerRequestMessageType = 134656
    //hex: 0x020E01
    MultiMapAddEntryListenerResponseMessageType = 134657
    MultiMapAddEntryListenerRequestIncludeValueFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MultiMapAddEntryListenerRequestLocalOnlyFieldOffset = MultiMapAddEntryListenerRequestIncludeValueFieldOffset + bufutil.BooleanSizeInBytes
    MultiMapAddEntryListenerRequestInitialFrameSize = MultiMapAddEntryListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    MultiMapAddEntryListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MultiMapAddEntryListenerResponseInitialFrameSize = MultiMapAddEntryListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    MultiMapAddEntryListenerEventEntryEventTypeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MultiMapAddEntryListenerEventEntryUuidFieldOffset = MultiMapAddEntryListenerEventEntryEventTypeFieldOffset + bufutil.IntSizeInBytes
    MultiMapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset = MultiMapAddEntryListenerEventEntryUuidFieldOffset + bufutil.UUIDSizeInBytes
    MultiMapAddEntryListenerEventEntryInitialFrameSize = MultiMapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x020E02
    MultiMapAddEntryListenerEventEntryMessageType = 134658


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MultiMapAddEntryListenerRequestParameters struct {

    /**
    * Name of the MultiMap
    */
name string

    /**
    * True if EntryEvent should contain the value,false otherwise
    */
includeValue bool

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func MultiMapAddEntryListenerEncodeRequest(name string, includeValue bool, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("MultiMap.AddEntryListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MultiMapAddEntryListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, MultiMapAddEntryListenerRequestIncludeValueFieldOffset, includeValue)
    bufutil.EncodeBoolean(initialFrame.Content, MultiMapAddEntryListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func MultiMapAddEntryListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *MultiMapAddEntryListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MultiMapAddEntryListenerRequestParameters)
    initialFrame := iterator.Next()
    request.includeValue = bufutil.DecodeBoolean(initialFrame.Content, MultiMapAddEntryListenerRequestIncludeValueFieldOffset)
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, MultiMapAddEntryListenerRequestLocalOnlyFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MultiMapAddEntryListenerResponseParameters struct {
    /**
    * Returns registration id for the entry listener
    */
response UUID
}

func MultiMapAddEntryListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MultiMapAddEntryListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MultiMapAddEntryListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, MultiMapAddEntryListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MultiMapAddEntryListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *MultiMapAddEntryListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MultiMapAddEntryListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, MultiMapAddEntryListenerResponseResponseFieldOffset)
    return response
}

    func encodeMultiMapAddEntryListenerEvent(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int, uuid UUID, numberOfAffectedEntries int) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, MultiMapAddEntryListenerEventEntryInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MultiMapAddEntryListenerEventEntryMessageType)
        encodeInt(initialFrame.Content, MultiMapAddEntryListenerEventEntryEventTypeFieldOffset, eventType)
        encodeUUID(initialFrame.Content, MultiMapAddEntryListenerEventEntryUuidFieldOffset, uuid)
        encodeInt(initialFrame.Content, MultiMapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset, numberOfAffectedEntries)
        clientMessage.Add(initialFrame)

        CodecUtil.encodeNullable(clientMessage, key, DataCodecEncode)
        CodecUtil.encodeNullable(clientMessage, value, DataCodecEncode)
        CodecUtil.encodeNullable(clientMessage, oldValue, DataCodecEncode)
        CodecUtil.encodeNullable(clientMessage, mergingValue, DataCodecEncode)
        return clientMessage
    }

    type MultiMapAddEntryListenerAbstractEventItemFunc func(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int, uuid UUID, numberOfAffectedEntries int)

     func MultiMapAddEntryListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem MultiMapAddEntryListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == MultiMapAddEntryListenerEventEntryMessageType {
             initialFrame := iterator.Next()
             eventType := bufutil.DecodeInt(initialFrame.Content, MultiMapAddEntryListenerEventEntryEventTypeFieldOffset)
             uuid := bufutil.DecodeUUID(initialFrame.Content, MultiMapAddEntryListenerEventEntryUuidFieldOffset)
             numberOfAffectedEntries := bufutil.DecodeInt(initialFrame.Content, MultiMapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset)
             key := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             value := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             oldValue := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             mergingValue := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             handleEventItem(key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

