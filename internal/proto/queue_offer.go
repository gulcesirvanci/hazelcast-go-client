/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to
 * become available.
 */
//@Generated("d6f1262749586e4588775d020ed55c32")
const (
    //hex: 0x030100
    QueueOfferRequestMessageType = 196864
    //hex: 0x030101
    QueueOfferResponseMessageType = 196865
    QueueOfferRequestTimeoutMillisFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    QueueOfferRequestInitialFrameSize = QueueOfferRequestTimeoutMillisFieldOffset + bufutil.LongSizeInBytes
    QueueOfferResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    QueueOfferResponseInitialFrameSize = QueueOfferResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueOfferRequestParameters struct {

    /**
    * Name of the Queue
    */
name string

    /**
    * The element to add
    */
value serialization.Data

    /**
    * Maximum time in milliseconds to wait for acquiring the lock for the key.
    */
timeoutMillis int64
}

func QueueOfferEncodeRequest(name string, value serialization.Data, timeoutMillis int64) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Queue.Offer")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, QueueOfferRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, QueueOfferRequestTimeoutMillisFieldOffset, timeoutMillis)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, value)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueOfferResponseParameters struct {
    /**
    * <tt>True</tt> if the element was added to this queue, else <tt>false</tt>
    */
response bool
}



func QueueOfferDecodeResponse(clientMessage *bufutil.ClientMessage) *QueueOfferResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(QueueOfferResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, QueueOfferResponseResponseFieldOffset)
    return response
}

