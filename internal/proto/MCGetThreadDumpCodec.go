/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Takes a thread dump of the member it's called on.
 */
//@Generated("06a61a1ce4f0f31891ba19157acf850a")
const (
    //hex: 0x200700
    MCGetThreadDumpRequestMessageType = 2098944
    //hex: 0x200701
    MCGetThreadDumpResponseMessageType = 2098945
    MCGetThreadDumpRequestDumpDeadLocksFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MCGetThreadDumpRequestInitialFrameSize = MCGetThreadDumpRequestDumpDeadLocksFieldOffset + bufutil.BooleanSizeInBytes
    MCGetThreadDumpResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCGetThreadDumpRequestParameters struct {

    /**
    * Whether only dead-locked threads or all threads should be dumped.
    */
dumpDeadLocks bool
}

func MCGetThreadDumpEncodeRequest(dumpDeadLocks bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("MC.GetThreadDump")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCGetThreadDumpRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, MCGetThreadDumpRequestDumpDeadLocksFieldOffset, dumpDeadLocks)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func MCGetThreadDumpDecodeRequest(clientMessage *bufutil.ClientMessagex) *MCGetThreadDumpRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MCGetThreadDumpRequestParameters)
    initialFrame := iterator.Next()
    request.dumpDeadLocks = bufutil.DecodeBoolean(initialFrame.Content, MCGetThreadDumpRequestDumpDeadLocksFieldOffset)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCGetThreadDumpResponseParameters struct {
    /**
    * Thread dump of the member's JVM.
    */
threadDump string
}

func MCGetThreadDumpEncodeResponse(threadDump string ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MCGetThreadDumpResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCGetThreadDumpResponseMessageType)
    clientMessage.Add(initialFrame)

    StringCodec.encode(clientMessage, threadDump)
    return clientMessage
}

func MCGetThreadDumpDecodeResponse(clientMessage *bufutil.ClientMessagex) *MCGetThreadDumpResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MCGetThreadDumpResponseParameters)
    //empty initial frame
    iterator.Next()
    response.threadDump = StringCodec.decode(iterator)
    return response
}

