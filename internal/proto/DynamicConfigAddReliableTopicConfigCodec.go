/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new reliable topic configuration to a running cluster.
 * If a reliable topic configuration with the given {@code name} already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("c2c11ce2ee60e0ca409e977289751cc1")
const (
    //hex: 0x1B0D00
    DynamicConfigAddReliableTopicConfigRequestMessageType = 1772800
    //hex: 0x1B0D01
    DynamicConfigAddReliableTopicConfigResponseMessageType = 1772801
    DynamicConfigAddReliableTopicConfigRequestReadBatchSizeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddReliableTopicConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddReliableTopicConfigRequestReadBatchSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddReliableTopicConfigRequestInitialFrameSize = DynamicConfigAddReliableTopicConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddReliableTopicConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddReliableTopicConfigRequestParameters struct {

    /**
    * name of reliable topic
    */
name string

    /**
    * message listener configurations
    */
/* @Nullable */ listenerConfigs []]ListenerConfigHolder

    /**
    * maximum number of items to read in a batch.
    */
readBatchSize int

    /**
    * {@code true} to enable gathering of statistics, otherwise {@code false}
    */
statisticsEnabled bool

    /**
    * policy to handle an overloaded topic. Available values are {@code DISCARD_OLDEST},
    * {@code DISCARD_NEWEST}, {@code BLOCK} and {@code ERROR}.
    */
topicOverloadPolicy string

    /**
    * a serialized {@link java.util.concurrent.Executor} instance to use for executing
    * message listeners or {@code null}
    */
/* @Nullable */ executor serialization.Data
}

func DynamicConfigAddReliableTopicConfigEncodeRequest(name string, /* @Nullable */ listenerConfigs Collection<ListenerConfigHolder>, readBatchSize int, statisticsEnabled bool, topicOverloadPolicy string, /* @Nullable */ executor serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddReliableTopicConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddReliableTopicConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddReliableTopicConfigRequestReadBatchSizeFieldOffset, readBatchSize)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddReliableTopicConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encodeNullable(clientMessage, listenerConfigs, ListenerConfigHolderCodecEncode)
    StringCodec.encode(clientMessage, topicOverloadPolicy)
    CodecUtil.encodeNullable(clientMessage, executor, DataCodecEncode)
    return clientMessage
}

func DynamicConfigAddReliableTopicConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddReliableTopicConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddReliableTopicConfigRequestParameters)
    initialFrame := iterator.Next()
    request.readBatchSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddReliableTopicConfigRequestReadBatchSizeFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddReliableTopicConfigRequestStatisticsEnabledFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.listenerConfigs = ListMultiFrameCodec.decodeNullable(iterator, ListenerConfigHolderCodecDecode)
    request.topicOverloadPolicy = StringCodec.decode(iterator)
    request.executor = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddReliableTopicConfigResponseParameters struct {
}

func DynamicConfigAddReliableTopicConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddReliableTopicConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddReliableTopicConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddReliableTopicConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddReliableTopicConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddReliableTopicConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

