/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("853418440d1837382e9ecd6a3a703117")
const (
    //hex: 0x001000
    ClientAddPartitionListenerRequestMessageType = 4096
    //hex: 0x001001
    ClientAddPartitionListenerResponseMessageType = 4097
    ClientAddPartitionListenerRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddPartitionListenerResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddPartitionListenerEventPartitionsPartitionStateVersionFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddPartitionListenerEventPartitionsInitialFrameSize = ClientAddPartitionListenerEventPartitionsPartitionStateVersionFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x001002
    ClientAddPartitionListenerEventPartitionsMessageType = 4098


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientAddPartitionListenerRequestParameters struct {
}

func ClientAddPartitionListenerEncodeRequest() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Client.AddPartitionListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddPartitionListenerRequestMessageType)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func ClientAddPartitionListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *ClientAddPartitionListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ClientAddPartitionListenerRequestParameters)
    //empty initial frame
    iterator.Next()
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientAddPartitionListenerResponseParameters struct {
}

func ClientAddPartitionListenerEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ClientAddPartitionListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddPartitionListenerResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ClientAddPartitionListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *ClientAddPartitionListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ClientAddPartitionListenerResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

    func encodeClientAddPartitionListenerEvent(partitions java.util.Collection<java.util.Map.Entry<Address, java.util.List<java.lang.Integer>>>, partitionStateVersion int) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ClientAddPartitionListenerEventPartitionsInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddPartitionListenerEventPartitionsMessageType)
        encodeInt(initialFrame.Content, ClientAddPartitionListenerEventPartitionsPartitionStateVersionFieldOffset, partitionStateVersion)
        clientMessage.Add(initialFrame)

        EntryListCodec.encode(clientMessage, partitions, AddressCodecEncode, ListIntegerCodecEncode)
        return clientMessage
    }

    type ClientAddPartitionListenerAbstractEventItemFunc func(partitions java.util.Collection<java.util.Map.Entry<Address, java.util.List<java.lang.Integer>>>, partitionStateVersion int)

     func ClientAddPartitionListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem ClientAddPartitionListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == ClientAddPartitionListenerEventPartitionsMessageType {
             initialFrame := iterator.Next()
             partitionStateVersion := bufutil.DecodeInt(initialFrame.Content, ClientAddPartitionListenerEventPartitionsPartitionStateVersionFieldOffset)
             partitions := EntryListCodec.decode(iterator, AddressCodecDecode, ListIntegerCodecDecode)
             handleEventItem(partitions, partitionStateVersion)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

