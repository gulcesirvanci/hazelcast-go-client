/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Initializes the ISemaphore instance with the given permit number, if not
 * initialized before.
 */
//@Generated("2182f7103f0b05a338bef7fac1e2ee79")
const (
    //hex: 0x0C0100
    SemaphoreInitRequestMessageType = 786688
    //hex: 0x0C0101
    SemaphoreInitResponseMessageType = 786689
    SemaphoreInitRequestPermitsFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SemaphoreInitRequestInitialFrameSize = SemaphoreInitRequestPermitsFieldOffset + bufutil.IntSizeInBytes
    SemaphoreInitResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    SemaphoreInitResponseInitialFrameSize = SemaphoreInitResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SemaphoreInitRequestParameters struct {

    /**
    * CP group id of this ISemaphore instance
    */
groupId RaftGroupId

    /**
    * Name of this ISemaphore instance
    */
name string

    /**
    * Number of permits to initialize this ISemaphore
    */
permits int
}

func SemaphoreInitEncodeRequest(groupId RaftGroupId, name string, permits int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Semaphore.Init")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SemaphoreInitRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, SemaphoreInitRequestPermitsFieldOffset, permits)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func SemaphoreInitDecodeRequest(clientMessage *bufutil.ClientMessagex) *SemaphoreInitRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(SemaphoreInitRequestParameters)
    initialFrame := iterator.Next()
    request.permits = bufutil.DecodeInt(initialFrame.Content, SemaphoreInitRequestPermitsFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SemaphoreInitResponseParameters struct {
    /**
    * true if the ISemaphore is initialized with this call
    */
response bool
}

func SemaphoreInitEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, SemaphoreInitResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SemaphoreInitResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, SemaphoreInitResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func SemaphoreInitDecodeResponse(clientMessage *bufutil.ClientMessagex) *SemaphoreInitResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(SemaphoreInitResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, SemaphoreInitResponseResponseFieldOffset)
    return response
}

