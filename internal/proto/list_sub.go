/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns a view of the portion of this list between the specified from, inclusive, and to, exclusive.(If from and
 * to are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in
 * the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list
 * operations supported by this list.
 * This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays).
 * Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list.
 * Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class
 * can be applied to a subList.
 * The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is
 * structurally modified in any way other than via the returned list.(Structural modifications are those that change
 * the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)
 */
//@Generated("4e07cd3d082c08a49d7966b792e2e5ba")
const (
    //hex: 0x051500
    ListSubRequestMessageType = 333056
    //hex: 0x051501
    ListSubResponseMessageType = 333057
    ListSubRequestFromFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ListSubRequestToFieldOffset = ListSubRequestFromFieldOffset + bufutil.IntSizeInBytes
    ListSubRequestInitialFrameSize = ListSubRequestToFieldOffset + bufutil.IntSizeInBytes
    ListSubResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ListSubRequestParameters struct {

    /**
    * Name of the List
    */
name string

    /**
    * Low endpoint (inclusive) of the subList
    */
from int32

    /**
    * High endpoint (exclusive) of the subList
    */
to int32
}

func ListSubEncodeRequest(name string, from int32, to int32) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("List.Sub")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ListSubRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, ListSubRequestFromFieldOffset, from)
    bufutil.EncodeInt(initialFrame.Content, ListSubRequestToFieldOffset, to)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    return clientMessage
}




/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ListSubResponseParameters struct {
    /**
    * A view of the specified range within this list
    */
response []serialization.Data
}



func ListSubDecodeResponse(clientMessage *bufutil.ClientMessagex) *ListSubResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ListSubResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = bufutil.ListMultiFrameCodecDecode(iterator, bufutil.DataCodecDecode)
    return response
}

