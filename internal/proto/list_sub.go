
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns a view of the portion of this list between the specified from, inclusive, and to, exclusive.(If from and
 * to are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in
 * the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list
 * operations supported by this list.
 * This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays).
 * Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list.
 * Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class
 * can be applied to a subList.
 * The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is
 * structurally modified in any way other than via the returned list.(Structural modifications are those that change
 * the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)
 */
//@Generated("de59909f1698201514d582a3b6d09472")
const (
    //hex: 0x051500
    ListSubRequestMessageType = 333056
    //hex: 0x051501
    ListSubResponseMessageType = 333057
    ListSubRequestFromFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ListSubRequestToFieldOffset = ListSubRequestFromFieldOffset + IntSizeInBytes
    ListSubRequestInitialFrameSize = ListSubRequestToFieldOffset + IntSizeInBytes
    ListSubResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func ListSubEncodeRequest(name string, from int32, to int32) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("List.Sub")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ListSubRequestMessageType)
    EncodeInt(initialFrame.Content, ListSubRequestFromFieldOffset, from)
    EncodeInt(initialFrame.Content, ListSubRequestToFieldOffset, to)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func ListSubDecodeResponse(clientMessage *ClientMessage) func() (/*** A view of the specified range within this list*/response []serialization.Data) {
    return func() (/*** A view of the specified range within this list*/response []serialization.Data) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        var result []serialization.Data
        //begin frame, list
        iterator.Next()
        for !NextFrameIsDataStructureEndFrame(iterator) {
        result = append(result, DataCodecDecode(iterator))
        }
        //end frame, list
        iterator.Next()
        response = result //0.1
        return
    }
}

