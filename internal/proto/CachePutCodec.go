/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("68b92c5379a53e4a96b14df5b381ccdb")
const (
    //hex: 0x131300
    CachePutRequestMessageType = 1250048
    //hex: 0x131301
    CachePutResponseMessageType = 1250049
    CachePutRequestGetFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CachePutRequestCompletionIdFieldOffset = CachePutRequestGetFieldOffset + bufutil.BooleanSizeInBytes
    CachePutRequestInitialFrameSize = CachePutRequestCompletionIdFieldOffset + bufutil.IntSizeInBytes
    CachePutResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CachePutRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * The key that has the specified value associated with it.
    */
key serialization.Data

    /**
    * The value to be associated with the key.
    */
value serialization.Data

    /**
    * Expiry policy for the entry. Byte-array which is serialized from an object implementing
    * javax.cache.expiry.ExpiryPolicy interface.
    */
/* @Nullable */ expiryPolicy serialization.Data

    /**
    * boolean flag indicating if the previous value should be retrieved.
    */
get bool

    /**
    * User generated id which shall be received as a field of the cache event upon completion of
    * the request in the cluster.
    */
completionId int
}

func CachePutEncodeRequest(name string, key serialization.Data, value serialization.Data, /* @Nullable */ expiryPolicy serialization.Data, get bool, completionId int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.Put")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CachePutRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CachePutRequestGetFieldOffset, get)
    bufutil.EncodeInt(initialFrame.Content, CachePutRequestCompletionIdFieldOffset, completionId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    DataCodec.encode(clientMessage, value)
    CodecUtil.encodeNullable(clientMessage, expiryPolicy, DataCodecEncode)
    return clientMessage
}

func CachePutDecodeRequest(clientMessage *bufutil.ClientMessagex) *CachePutRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CachePutRequestParameters)
    initialFrame := iterator.Next()
    request.get = bufutil.DecodeBoolean(initialFrame.Content, CachePutRequestGetFieldOffset)
    request.completionId = bufutil.DecodeInt(initialFrame.Content, CachePutRequestCompletionIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    request.value = DataCodec.decode(iterator)
    request.expiryPolicy = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CachePutResponseParameters struct {
    /**
    * The value previously assigned to the given key, or null if not assigned.
    */
/* @Nullable */ response serialization.Data
}

func CachePutEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CachePutResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CachePutResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func CachePutDecodeResponse(clientMessage *bufutil.ClientMessagex) *CachePutResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CachePutResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

