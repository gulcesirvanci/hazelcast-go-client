/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Applies the user defined EntryProcessor to the entries mapped by the collection of keys.The results mapped by
 * each key in the collection.
 */
//@Generated("5acad2ef9b81f266c61f26cdeb7bd013")
const (
    //hex: 0x013200
    MapExecuteOnKeysRequestMessageType = 78336
    //hex: 0x013201
    MapExecuteOnKeysResponseMessageType = 78337
    MapExecuteOnKeysRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapExecuteOnKeysResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapExecuteOnKeysRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * entry processor to be executed.
    */
entryProcessor bufutil.Data

    /**
    * The keys for the entries for which the entry processor shall be executed on.
    */
keys []bufutil.Data
}

func MapExecuteOnKeysEncodeRequest(name string, entryProcessor bufutil.Data, keys []bufutil.Data) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Map.ExecuteOnKeys")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapExecuteOnKeysRequestMessageType)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, entryProcessor)
    clientMessage.Add(bufutil.BeginFrame)
        for i := 0; i < len(keys) ; i++ {
            bufutil.DataCodecEncode(clientMessage, keys[i])
        }
        clientMessage.Add(bufutil.EndFrame)


    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapExecuteOnKeysResponseParameters struct {
    /**
    * results of entry process on the entries with the provided keys
    */
response []*bufutil.Pair
}



func MapExecuteOnKeysDecodeResponse(clientMessage *bufutil.ClientMessage) *MapExecuteOnKeysResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapExecuteOnKeysResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = var result []*bufutil.Pair
        //begin frame, list
        iterator.Next()
        for !bufutil.NextFrameIsDataStructureEndFrame(iterator) {
            i := 0
            key := bufutil.NoneCodecDecode(iterator))
            value := bufutil.NoneCodecDecode(iterator))
            result[i] = bufutil.NewPair(key,value)             i++
        }

        //end frame, list
        iterator.Next()
        response.response = result



    return response
}

