/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Applies a function on the value, the actual stored value will not change
 */
//@Generated("c9342433863e847b00be08b522a595ae")
const (
    //hex: 0x090100
    AtomicLongApplyRequestMessageType = 590080
    //hex: 0x090101
    AtomicLongApplyResponseMessageType = 590081
    AtomicLongApplyRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    AtomicLongApplyResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicLongApplyRequestParameters struct {

    /**
    * CP group id of this IAtomicLong instance.
    */
groupId RaftGroupId

    /**
    * Name of this IAtomicLong instance.
    */
name string

    /**
    * The function applied to the value and the value is not
    * changed.
    */
function serialization.Data
}

func AtomicLongApplyEncodeRequest(groupId RaftGroupId, name string, function serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("AtomicLong.Apply")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicLongApplyRequestMessageType)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, function)
    return clientMessage
}

func AtomicLongApplyDecodeRequest(clientMessage *bufutil.ClientMessagex) *AtomicLongApplyRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(AtomicLongApplyRequestParameters)
    //empty initial frame
    iterator.Next()
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    request.function = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicLongApplyResponseParameters struct {
    /**
    * The result of the function application.
    */
/* @Nullable */ response serialization.Data
}

func AtomicLongApplyEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, AtomicLongApplyResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicLongApplyResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func AtomicLongApplyDecodeResponse(clientMessage *bufutil.ClientMessagex) *AtomicLongApplyResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(AtomicLongApplyResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

