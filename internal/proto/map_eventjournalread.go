/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Reads from the map event journal in batches. You may specify the start sequence,
 * the minumum required number of items in the response, the maximum number of items
 * in the response, a predicate that the events should pass and a projection to
 * apply to the events in the journal.
 * If the event journal currently contains less events than {@code minSize}, the
 * call will wait until it has sufficient items.
 * The predicate, filter and projection may be {@code null} in which case all elements are returned
 * and no projection is applied.
 */
//@Generated("1cb7a911e72aaddf86f63124b4a00790")
const (
    //hex: 0x014200
    MapEventJournalReadRequestMessageType = 82432
    //hex: 0x014201
    MapEventJournalReadResponseMessageType = 82433
    MapEventJournalReadRequestStartSequenceFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapEventJournalReadRequestMinSizeFieldOffset = MapEventJournalReadRequestStartSequenceFieldOffset + bufutil.LongSizeInBytes
    MapEventJournalReadRequestMaxSizeFieldOffset = MapEventJournalReadRequestMinSizeFieldOffset + bufutil.IntSizeInBytes
    MapEventJournalReadRequestInitialFrameSize = MapEventJournalReadRequestMaxSizeFieldOffset + bufutil.IntSizeInBytes
    MapEventJournalReadResponseReadCountFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapEventJournalReadResponseNextSeqFieldOffset = MapEventJournalReadResponseReadCountFieldOffset + bufutil.IntSizeInBytes
    MapEventJournalReadResponseInitialFrameSize = MapEventJournalReadResponseNextSeqFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapEventJournalReadRequestParameters struct {

    /**
    * name of the map
    */
name string

    /**
    * the startSequence of the first item to read
    */
startSequence int64

    /**
    * the minimum number of items to read.
    */
minSize int32

    /**
    * the maximum number of items to read.
    */
maxSize int32

    /**
    * the predicate to apply before processing events
    */
/* @Nullable */ predicate serialization.Data

    /**
    * the projection to apply to journal events
    */
/* @Nullable */ projection serialization.Data
}

func MapEventJournalReadEncodeRequest(name string, startSequence int64, minSize int32, maxSize int32, /* @Nullable */ predicate serialization.Data, /* @Nullable */ projection serialization.Data) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = true
    clientMessage.SetOperationName("Map.EventJournalRead")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapEventJournalReadRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapEventJournalReadRequestStartSequenceFieldOffset, startSequence)
    bufutil.EncodeInt(initialFrame.Content, MapEventJournalReadRequestMinSizeFieldOffset, minSize)
    bufutil.EncodeInt(initialFrame.Content, MapEventJournalReadRequestMaxSizeFieldOffset, maxSize)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.EncodeNullable(clientMessage, predicate, bufutil.DataCodecEncode)
    bufutil.EncodeNullable(clientMessage, projection, bufutil.DataCodecEncode)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapEventJournalReadResponseParameters struct {
    /**
    * Number of items that have been read.
    */
readCount int32
    /**
    * List of items that have been read.
    */
items []serialization.Data
    /**
    * Sequence numbers of items in the event journal.
    */
/* @Nullable */ itemSeqs []int64
    /**
    * Sequence number of the item following the last read item.
    */
nextSeq int64
}



func MapEventJournalReadDecodeResponse(clientMessage *bufutil.ClientMessage) *MapEventJournalReadResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapEventJournalReadResponseParameters)
    initialFrame := iterator.Next()
    response.readCount = bufutil.DecodeInt(initialFrame.Content, MapEventJournalReadResponseReadCountFieldOffset)
    response.nextSeq = bufutil.DecodeLong(initialFrame.Content, MapEventJournalReadResponseNextSeqFieldOffset)
    var result []serialization.Data
        //begin frame, list
        iterator.Next()
        for !bufutil.NextFrameIsDataStructureEndFrame(iterator) {
        result = append(result, bufutil.DataCodecDecode(iterator))
        }
        //end frame, list
        iterator.Next()
        response.items = result
    response.itemSeqs = bufutil.DecodeNullable(iterator, bufutil.LongArrayCodecDecode).([]int64)  
    return response
}

