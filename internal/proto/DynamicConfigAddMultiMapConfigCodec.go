/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new multimap config to a running cluster.
 * If a multimap configuration with the given {@code name} already exists, then
 * the new multimap config is ignored and the existing one is preserved.
 */
//@Generated("86dcf65c4746d765fa26347b04ee4eaf")
const (
    //hex: 0x1B0100
    DynamicConfigAddMultiMapConfigRequestMessageType = 1769728
    //hex: 0x1B0101
    DynamicConfigAddMultiMapConfigResponseMessageType = 1769729
    DynamicConfigAddMultiMapConfigRequestBinaryFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMultiMapConfigRequestBackupCountFieldOffset = DynamicConfigAddMultiMapConfigRequestBinaryFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddMultiMapConfigRequestAsyncBackupCountFieldOffset = DynamicConfigAddMultiMapConfigRequestBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMultiMapConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddMultiMapConfigRequestAsyncBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMultiMapConfigRequestMergeBatchSizeFieldOffset = DynamicConfigAddMultiMapConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddMultiMapConfigRequestInitialFrameSize = DynamicConfigAddMultiMapConfigRequestMergeBatchSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMultiMapConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddMultiMapConfigRequestParameters struct {

    /**
    * multimap configuration name
    */
name string

    /**
    * value collection type. Valid values are SET and LIST.
    */
collectionType string

    /**
    * entry listener configurations
    */
/* @Nullable */ listenerConfigs []]ListenerConfigHolder

    /**
    * {@code true} to store values in {@code BINARY} format or {@code false} to store
    * values in {@code OBJECT} format.
    */
binary bool

    /**
    * number of synchronous backups
    */
backupCount int

    /**
    * number of asynchronous backups
    */
asyncBackupCount int

    /**
    * set to {@code true} to enable statistics on this multimap configuration
    */
statisticsEnabled bool

    /**
    * name of an existing configured split brain protection to be used to determine the minimum number of members
    * required in the cluster for the lock to remain functional. When {@code null}, split brain protection does not
    * apply to this lock configuration's operations.
    */
/* @Nullable */ splitBrainProtectionName string

    /**
    * TODO DOC
    */
mergePolicy string

    /**
    * TODO DOC
    */
mergeBatchSize int
}

func DynamicConfigAddMultiMapConfigEncodeRequest(name string, collectionType string, /* @Nullable */ listenerConfigs Collection<ListenerConfigHolder>, binary bool, backupCount int, asyncBackupCount int, statisticsEnabled bool, /* @Nullable */ splitBrainProtectionName string, mergePolicy string, mergeBatchSize int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddMultiMapConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddMultiMapConfigRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestBinaryFieldOffset, binary)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestBackupCountFieldOffset, backupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestAsyncBackupCountFieldOffset, asyncBackupCount)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestMergeBatchSizeFieldOffset, mergeBatchSize)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    StringCodec.encode(clientMessage, collectionType)
    ListMultiFrameCodec.encodeNullable(clientMessage, listenerConfigs, ListenerConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, splitBrainProtectionName, StringCodecEncode)
    StringCodec.encode(clientMessage, mergePolicy)
    return clientMessage
}

func DynamicConfigAddMultiMapConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddMultiMapConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddMultiMapConfigRequestParameters)
    initialFrame := iterator.Next()
    request.binary = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestBinaryFieldOffset)
    request.backupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestBackupCountFieldOffset)
    request.asyncBackupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestAsyncBackupCountFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestStatisticsEnabledFieldOffset)
    request.mergeBatchSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddMultiMapConfigRequestMergeBatchSizeFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.collectionType = StringCodec.decode(iterator)
    request.listenerConfigs = ListMultiFrameCodec.decodeNullable(iterator, ListenerConfigHolderCodecDecode)
    request.splitBrainProtectionName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.mergePolicy = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddMultiMapConfigResponseParameters struct {
}

func DynamicConfigAddMultiMapConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddMultiMapConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddMultiMapConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddMultiMapConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddMultiMapConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddMultiMapConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

