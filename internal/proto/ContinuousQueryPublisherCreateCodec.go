/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("6180c1e32ecb588f71533ff67d9e6213")
const (
    //hex: 0x160200
    ContinuousQueryPublisherCreateRequestMessageType = 1442304
    //hex: 0x160201
    ContinuousQueryPublisherCreateResponseMessageType = 1442305
    ContinuousQueryPublisherCreateRequestBatchSizeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ContinuousQueryPublisherCreateRequestBufferSizeFieldOffset = ContinuousQueryPublisherCreateRequestBatchSizeFieldOffset + bufutil.IntSizeInBytes
    ContinuousQueryPublisherCreateRequestDelaySecondsFieldOffset = ContinuousQueryPublisherCreateRequestBufferSizeFieldOffset + bufutil.IntSizeInBytes
    ContinuousQueryPublisherCreateRequestPopulateFieldOffset = ContinuousQueryPublisherCreateRequestDelaySecondsFieldOffset + bufutil.LongSizeInBytes
    ContinuousQueryPublisherCreateRequestCoalesceFieldOffset = ContinuousQueryPublisherCreateRequestPopulateFieldOffset + bufutil.BooleanSizeInBytes
    ContinuousQueryPublisherCreateRequestInitialFrameSize = ContinuousQueryPublisherCreateRequestCoalesceFieldOffset + bufutil.BooleanSizeInBytes
    ContinuousQueryPublisherCreateResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ContinuousQueryPublisherCreateRequestParameters struct {

    /**
    * Name of the map.
    */
mapName string

    /**
    * Name of query cache.
    */
cacheName string

    /**
    * The predicate to filter events which will be applied to the QueryCache.
    */
predicate serialization.Data

    /**
    * The size of batch. After reaching this minimum size, node immediately sends buffered events to QueryCache.
    */
batchSize int

    /**
    * Maximum number of events which can be stored in a buffer of partition.
    */
bufferSize int

    /**
    * The minimum number of delay seconds which an event waits in the buffer of node.
    */
delaySeconds int64

    /**
    * Flag to enable/disable initial population of the QueryCache.
    */
populate bool

    /**
    * Flag to enable/disable coalescing. If true, then only the last updated value for a key is placed in the
    * batch, otherwise all changed values are included in the update.
    */
coalesce bool
}

func ContinuousQueryPublisherCreateEncodeRequest(mapName string, cacheName string, predicate serialization.Data, batchSize int, bufferSize int, delaySeconds int64, populate bool, coalesce bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("ContinuousQuery.PublisherCreate")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ContinuousQueryPublisherCreateRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, ContinuousQueryPublisherCreateRequestBatchSizeFieldOffset, batchSize)
    bufutil.EncodeInt(initialFrame.Content, ContinuousQueryPublisherCreateRequestBufferSizeFieldOffset, bufferSize)
    bufutil.EncodeLong(initialFrame.Content, ContinuousQueryPublisherCreateRequestDelaySecondsFieldOffset, delaySeconds)
    bufutil.EncodeBoolean(initialFrame.Content, ContinuousQueryPublisherCreateRequestPopulateFieldOffset, populate)
    bufutil.EncodeBoolean(initialFrame.Content, ContinuousQueryPublisherCreateRequestCoalesceFieldOffset, coalesce)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, mapName)
    StringCodec.encode(clientMessage, cacheName)
    DataCodec.encode(clientMessage, predicate)
    return clientMessage
}

func ContinuousQueryPublisherCreateDecodeRequest(clientMessage *bufutil.ClientMessagex) *ContinuousQueryPublisherCreateRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ContinuousQueryPublisherCreateRequestParameters)
    initialFrame := iterator.Next()
    request.batchSize = bufutil.DecodeInt(initialFrame.Content, ContinuousQueryPublisherCreateRequestBatchSizeFieldOffset)
    request.bufferSize = bufutil.DecodeInt(initialFrame.Content, ContinuousQueryPublisherCreateRequestBufferSizeFieldOffset)
    request.delaySeconds = bufutil.DecodeLong(initialFrame.Content, ContinuousQueryPublisherCreateRequestDelaySecondsFieldOffset)
    request.populate = bufutil.DecodeBoolean(initialFrame.Content, ContinuousQueryPublisherCreateRequestPopulateFieldOffset)
    request.coalesce = bufutil.DecodeBoolean(initialFrame.Content, ContinuousQueryPublisherCreateRequestCoalesceFieldOffset)
    request.mapName = StringCodec.decode(iterator)
    request.cacheName = StringCodec.decode(iterator)
    request.predicate = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ContinuousQueryPublisherCreateResponseParameters struct {
    /**
    * Array of keys.
    */
response []serialization.Data
}

func ContinuousQueryPublisherCreateEncodeResponse(response []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ContinuousQueryPublisherCreateResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ContinuousQueryPublisherCreateResponseMessageType)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encode(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func ContinuousQueryPublisherCreateDecodeResponse(clientMessage *bufutil.ClientMessagex) *ContinuousQueryPublisherCreateResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ContinuousQueryPublisherCreateResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return response
}

