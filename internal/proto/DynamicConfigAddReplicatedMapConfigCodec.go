/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new replicated map configuration to a running cluster.
 * If a replicated map configuration with the given {@code name} already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("ddaa1de704cfddd3384f413598d3c7d5")
const (
    //hex: 0x1B0600
    DynamicConfigAddReplicatedMapConfigRequestMessageType = 1771008
    //hex: 0x1B0601
    DynamicConfigAddReplicatedMapConfigResponseMessageType = 1771009
    DynamicConfigAddReplicatedMapConfigRequestAsyncFillupFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddReplicatedMapConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddReplicatedMapConfigRequestAsyncFillupFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddReplicatedMapConfigRequestMergeBatchSizeFieldOffset = DynamicConfigAddReplicatedMapConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddReplicatedMapConfigRequestInitialFrameSize = DynamicConfigAddReplicatedMapConfigRequestMergeBatchSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddReplicatedMapConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddReplicatedMapConfigRequestParameters struct {

    /**
    * name of the replicated map configuration
    */
name string

    /**
    * data type used to store entries. Valid values are {@code "BINARY"}, {@code "OBJECT"}
    * and {@code "NATIVE"}.
    */
inMemoryFormat string

    /**
    * {@code true} to make the replicated map available for reads before initial replication
    * is completed, {@code false} otherwise.
    */
asyncFillup bool

    /**
    * {@code true} to enable gathering of statistics, otherwise {@code false}
    */
statisticsEnabled bool

    /**
    * class name of a class implementing
    * {@link com.hazelcast.spi.merge.SplitBrainMergePolicy} to merge entries
    * while recovering from a split brain
    */
mergePolicy string

    /**
    * entry listener configurations
    */
/* @Nullable */ listenerConfigs []]ListenerConfigHolder

    /**
    * name of an existing configured split brain protection to be used to determine the minimum number of members
    * required in the cluster for the lock to remain functional. When {@code null}, split brain protection does not
    * apply to this lock configuration's operations.
    */
/* @Nullable */ splitBrainProtectionName string

    /**
    * TODO DOC
    */
mergeBatchSize int
}

func DynamicConfigAddReplicatedMapConfigEncodeRequest(name string, inMemoryFormat string, asyncFillup bool, statisticsEnabled bool, mergePolicy string, /* @Nullable */ listenerConfigs Collection<ListenerConfigHolder>, /* @Nullable */ splitBrainProtectionName string, mergeBatchSize int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddReplicatedMapConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddReplicatedMapConfigRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddReplicatedMapConfigRequestAsyncFillupFieldOffset, asyncFillup)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddReplicatedMapConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddReplicatedMapConfigRequestMergeBatchSizeFieldOffset, mergeBatchSize)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    StringCodec.encode(clientMessage, inMemoryFormat)
    StringCodec.encode(clientMessage, mergePolicy)
    ListMultiFrameCodec.encodeNullable(clientMessage, listenerConfigs, ListenerConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, splitBrainProtectionName, StringCodecEncode)
    return clientMessage
}

func DynamicConfigAddReplicatedMapConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddReplicatedMapConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddReplicatedMapConfigRequestParameters)
    initialFrame := iterator.Next()
    request.asyncFillup = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddReplicatedMapConfigRequestAsyncFillupFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddReplicatedMapConfigRequestStatisticsEnabledFieldOffset)
    request.mergeBatchSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddReplicatedMapConfigRequestMergeBatchSizeFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.inMemoryFormat = StringCodec.decode(iterator)
    request.mergePolicy = StringCodec.decode(iterator)
    request.listenerConfigs = ListMultiFrameCodec.decodeNullable(iterator, ListenerConfigHolderCodecDecode)
    request.splitBrainProtectionName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddReplicatedMapConfigResponseParameters struct {
}

func DynamicConfigAddReplicatedMapConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddReplicatedMapConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddReplicatedMapConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddReplicatedMapConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddReplicatedMapConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddReplicatedMapConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

