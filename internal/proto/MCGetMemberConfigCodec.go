/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Gets the effective config of a member rendered as XML.
 */
//@Generated("0c223393c7c1444a07a664713cc57a77")
const (
    //hex: 0x200500
    MCGetMemberConfigRequestMessageType = 2098432
    //hex: 0x200501
    MCGetMemberConfigResponseMessageType = 2098433
    MCGetMemberConfigRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MCGetMemberConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCGetMemberConfigRequestParameters struct {
}

func MCGetMemberConfigEncodeRequest() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("MC.GetMemberConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCGetMemberConfigRequestMessageType)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func MCGetMemberConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *MCGetMemberConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MCGetMemberConfigRequestParameters)
    //empty initial frame
    iterator.Next()
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCGetMemberConfigResponseParameters struct {
    /**
    * Effective config of a member rendered as XML.
    */
configXml string
}

func MCGetMemberConfigEncodeResponse(configXml string ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MCGetMemberConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCGetMemberConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    StringCodec.encode(clientMessage, configXml)
    return clientMessage
}

func MCGetMemberConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *MCGetMemberConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MCGetMemberConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    response.configXml = StringCodec.decode(iterator)
    return response
}

