
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/core"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a distributed object listener to the cluster. This listener will be notified
 * when a distributed object is created or destroyed.
 */
//@Generated("d1184944dae13f9154c02e6e013b6c38")
const (
    //hex: 0x000900
    ClientAddDistributedObjectListenerRequestMessageType = 2304
    //hex: 0x000901
    ClientAddDistributedObjectListenerResponseMessageType = 2305
    ClientAddDistributedObjectListenerRequestLocalOnlyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ClientAddDistributedObjectListenerRequestInternalFieldOffset = ClientAddDistributedObjectListenerRequestLocalOnlyFieldOffset + BooleanSizeInBytes
    ClientAddDistributedObjectListenerRequestInitialFrameSize = ClientAddDistributedObjectListenerRequestInternalFieldOffset + BooleanSizeInBytes
    ClientAddDistributedObjectListenerResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    ClientAddDistributedObjectListenerResponseInitialFrameSize = ClientAddDistributedObjectListenerResponseResponseFieldOffset + UUIDSizeInBytes
    ClientAddDistributedObjectListenerEventDistributedObjectSourceFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ClientAddDistributedObjectListenerEventDistributedObjectInitialFrameSize = ClientAddDistributedObjectListenerEventDistributedObjectSourceFieldOffset + UUIDSizeInBytes
    //hex: 0x000902
    ClientAddDistributedObjectListenerEventDistributedObjectMessageType = 2306


)

func ClientAddDistributedObjectListenerEncodeRequest(localOnly bool, internal bool) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Client.AddDistributedObjectListener")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ClientAddDistributedObjectListenerRequestMessageType)
    EncodeBoolean(initialFrame.Content, ClientAddDistributedObjectListenerRequestLocalOnlyFieldOffset, localOnly)
    EncodeBoolean(initialFrame.Content, ClientAddDistributedObjectListenerRequestInternalFieldOffset, internal)
    clientMessage.Add(initialFrame)
    return clientMessage
}


func ClientAddDistributedObjectListenerDecodeResponse(clientMessage *ClientMessage) func() ( /*** The registration id for the distributed object listener.*/response core.Uuid) {
    return func() (/*** The registration id for the distributed object listener.*/response core.Uuid) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeUUID(initialFrame.Content, ClientAddDistributedObjectListenerResponseResponseFieldOffset)
        return
    }
}


type ClientAddDistributedObjectListenerHandleDistributedObjectFunc func(name string, serviceName string, eventType string, source core.Uuid)

func ClientAddDistributedObjectListenerHandle(clientMessage *ClientMessage, handleDistributedObject ClientAddDistributedObjectListenerHandleDistributedObjectFunc){
    messageType := clientMessage.MessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == ClientAddDistributedObjectListenerEventDistributedObjectMessageType {
        initialFrame := iterator.Next()
        source := DecodeUUID(initialFrame.Content, ClientAddDistributedObjectListenerEventDistributedObjectSourceFieldOffset)
        name := StringCodecDecode(iterator)

        serviceName := StringCodecDecode(iterator)

        eventType := StringCodecDecode(iterator)

        handleDistributedObject(name, serviceName, eventType, source)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
    }

