/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Removes the specified entry listener. Returns silently if there is no such listener added before.
 */
//@Generated("67aa59a2bac082e319bf81adfc0c66a5")
const (
    //hex: 0x011A00
    MapRemoveEntryListenerRequestMessageType = 72192
    //hex: 0x011A01
    MapRemoveEntryListenerResponseMessageType = 72193
    MapRemoveEntryListenerRequestRegistrationIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapRemoveEntryListenerRequestInitialFrameSize = MapRemoveEntryListenerRequestRegistrationIdFieldOffset + bufutil.UUIDSizeInBytes
    MapRemoveEntryListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapRemoveEntryListenerResponseInitialFrameSize = MapRemoveEntryListenerResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapRemoveEntryListenerRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * id of registered listener.
    */
registrationId UUID
}

func MapRemoveEntryListenerEncodeRequest(name string, registrationId UUID) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.RemoveEntryListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapRemoveEntryListenerRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, MapRemoveEntryListenerRequestRegistrationIdFieldOffset, registrationId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func MapRemoveEntryListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapRemoveEntryListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapRemoveEntryListenerRequestParameters)
    initialFrame := iterator.Next()
    request.registrationId = bufutil.DecodeUUID(initialFrame.Content, MapRemoveEntryListenerRequestRegistrationIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapRemoveEntryListenerResponseParameters struct {
    /**
    * true if registration is removed, false otherwise.
    */
response bool
}

func MapRemoveEntryListenerEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapRemoveEntryListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapRemoveEntryListenerResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, MapRemoveEntryListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MapRemoveEntryListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapRemoveEntryListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapRemoveEntryListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, MapRemoveEntryListenerResponseResponseFieldOffset)
    return response
}

