/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns true if this set contains all of the elements of the specified collection. If the specified collection is
 * also a set, this method returns true if it is a subset of this set.
 */
//@Generated("79547039994fed640410f3ad08d5d77e")
const (
    //hex: 0x060300
    SetContainsAllRequestMessageType = 393984
    //hex: 0x060301
    SetContainsAllResponseMessageType = 393985
    SetContainsAllRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SetContainsAllResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    SetContainsAllResponseInitialFrameSize = SetContainsAllResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SetContainsAllRequestParameters struct {

    /**
    * Name of the Set
    */
name string

    /**
    * Collection to be checked for containment in this list
    */
items []serialization.Data
}

func SetContainsAllEncodeRequest(name string, items []serialization.Data) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Set.ContainsAll")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SetContainsAllRequestMessageType)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    clientMessage.Add(bufutil.BeginFrame)
        for i := 0; i < len(items) ; i++ {
            bufutil.DataCodecEncode(clientMessage, items[i])
        }
        clientMessage.Add(bufutil.EndFrame)


    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SetContainsAllResponseParameters struct {
    /**
    * true if this set contains all of the elements of the
    * specified collection
    */
response bool
}



func SetContainsAllDecodeResponse(clientMessage *bufutil.ClientMessage) *SetContainsAllResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(SetContainsAllResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, SetContainsAllResponseResponseFieldOffset)
    return response
}

