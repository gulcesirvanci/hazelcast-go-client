
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
 */
//@Generated("898551b2df4ac9079643e95274f08df8")
const (
    //hex: 0x030700
    QueuePeekRequestMessageType = 198400
    //hex: 0x030701
    QueuePeekResponseMessageType = 198401
    QueuePeekRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    QueuePeekResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func QueuePeekEncodeRequest(name string) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Queue.Peek")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, QueuePeekRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func QueuePeekDecodeResponse(clientMessage *ClientMessage) func() ( /*** The head of this queue, or <tt>null</tt> if this queue is empty*//* @Nullable */response serialization.Data) {
    return func() (/*** The head of this queue, or <tt>null</tt> if this queue is empty*//* @Nullable */response serialization.Data) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        response = DecodeNullable(iterator, DataCodecDecode).(serialization.Data)
        return
    }
}

