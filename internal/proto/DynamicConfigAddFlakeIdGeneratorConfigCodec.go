/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new flake ID generator configuration to a running cluster.
 * If a flake ID generator configuration for the same name already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("6a46fe7c40e24b972554c97247242d47")
const (
    //hex: 0x1B0F00
    DynamicConfigAddFlakeIdGeneratorConfigRequestMessageType = 1773312
    //hex: 0x1B0F01
    DynamicConfigAddFlakeIdGeneratorConfigResponseMessageType = 1773313
    DynamicConfigAddFlakeIdGeneratorConfigRequestPrefetchCountFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddFlakeIdGeneratorConfigRequestPrefetchValidityFieldOffset = DynamicConfigAddFlakeIdGeneratorConfigRequestPrefetchCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddFlakeIdGeneratorConfigRequestIdOffsetFieldOffset = DynamicConfigAddFlakeIdGeneratorConfigRequestPrefetchValidityFieldOffset + bufutil.LongSizeInBytes
    DynamicConfigAddFlakeIdGeneratorConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddFlakeIdGeneratorConfigRequestIdOffsetFieldOffset + bufutil.LongSizeInBytes
    DynamicConfigAddFlakeIdGeneratorConfigRequestNodeIdOffsetFieldOffset = DynamicConfigAddFlakeIdGeneratorConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddFlakeIdGeneratorConfigRequestInitialFrameSize = DynamicConfigAddFlakeIdGeneratorConfigRequestNodeIdOffsetFieldOffset + bufutil.LongSizeInBytes
    DynamicConfigAddFlakeIdGeneratorConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddFlakeIdGeneratorConfigRequestParameters struct {

    /**
    * name of {@code FlakeIdGenerator}
    */
name string

    /**
    * how many IDs are pre-fetched on the background when one call to {@code newId()} is made
    */
prefetchCount int

    /**
    * for how long the pre-fetched IDs can be used
    */
prefetchValidity int64

    /**
    * TODO DOC
    */
idOffset int64

    /**
    * {@code true} to enable gathering of statistics, otherwise {@code false}
    */
statisticsEnabled bool

    /**
    * TODO DOC
    */
nodeIdOffset int64
}

func DynamicConfigAddFlakeIdGeneratorConfigEncodeRequest(name string, prefetchCount int, prefetchValidity int64, idOffset int64, statisticsEnabled bool, nodeIdOffset int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddFlakeIdGeneratorConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddFlakeIdGeneratorConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestPrefetchCountFieldOffset, prefetchCount)
    bufutil.EncodeLong(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestPrefetchValidityFieldOffset, prefetchValidity)
    bufutil.EncodeLong(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestIdOffsetFieldOffset, idOffset)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    bufutil.EncodeLong(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestNodeIdOffsetFieldOffset, nodeIdOffset)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func DynamicConfigAddFlakeIdGeneratorConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddFlakeIdGeneratorConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddFlakeIdGeneratorConfigRequestParameters)
    initialFrame := iterator.Next()
    request.prefetchCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestPrefetchCountFieldOffset)
    request.prefetchValidity = bufutil.DecodeLong(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestPrefetchValidityFieldOffset)
    request.idOffset = bufutil.DecodeLong(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestIdOffsetFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestStatisticsEnabledFieldOffset)
    request.nodeIdOffset = bufutil.DecodeLong(initialFrame.Content, DynamicConfigAddFlakeIdGeneratorConfigRequestNodeIdOffsetFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddFlakeIdGeneratorConfigResponseParameters struct {
}

func DynamicConfigAddFlakeIdGeneratorConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddFlakeIdGeneratorConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddFlakeIdGeneratorConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddFlakeIdGeneratorConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddFlakeIdGeneratorConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddFlakeIdGeneratorConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

