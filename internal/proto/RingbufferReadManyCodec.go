/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Reads a batch of items from the Ringbuffer. If the number of available items after the first read item is smaller
 * than the maxCount, these items are returned. So it could be the number of items read is smaller than the maxCount.
 * If there are less items available than minCount, then this call blacks. Reading a batch of items is likely to
 * perform better because less overhead is involved. A filter can be provided to only select items that need to be read.
 * If the filter is null, all items are read. If the filter is not null, only items where the filter function returns
 * true are returned. Using filters is a good way to prevent getting items that are of no value to the receiver.
 * This reduces the amount of IO and the number of operations being executed, and can result in a significant performance improvement.
 */
//@Generated("78a7a20d607ff7e813c38fc3a2fea2d6")
const (
    //hex: 0x170900
    RingbufferReadManyRequestMessageType = 1509632
    //hex: 0x170901
    RingbufferReadManyResponseMessageType = 1509633
    RingbufferReadManyRequestStartSequenceFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    RingbufferReadManyRequestMinCountFieldOffset = RingbufferReadManyRequestStartSequenceFieldOffset + bufutil.LongSizeInBytes
    RingbufferReadManyRequestMaxCountFieldOffset = RingbufferReadManyRequestMinCountFieldOffset + bufutil.IntSizeInBytes
    RingbufferReadManyRequestInitialFrameSize = RingbufferReadManyRequestMaxCountFieldOffset + bufutil.IntSizeInBytes
    RingbufferReadManyResponseReadCountFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    RingbufferReadManyResponseNextSeqFieldOffset = RingbufferReadManyResponseReadCountFieldOffset + bufutil.IntSizeInBytes
    RingbufferReadManyResponseInitialFrameSize = RingbufferReadManyResponseNextSeqFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type RingbufferReadManyRequestParameters struct {

    /**
    * Name of the Ringbuffer
    */
name string

    /**
    * the startSequence of the first item to read
    */
startSequence int64

    /**
    * the minimum number of items to read.
    */
minCount int

    /**
    * the maximum number of items to read.
    */
maxCount int

    /**
    * Filter is allowed to be null, indicating there is no filter.
    */
/* @Nullable */ filter serialization.Data
}

func RingbufferReadManyEncodeRequest(name string, startSequence int64, minCount int, maxCount int, /* @Nullable */ filter serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Ringbuffer.ReadMany")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, RingbufferReadManyRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, RingbufferReadManyRequestStartSequenceFieldOffset, startSequence)
    bufutil.EncodeInt(initialFrame.Content, RingbufferReadManyRequestMinCountFieldOffset, minCount)
    bufutil.EncodeInt(initialFrame.Content, RingbufferReadManyRequestMaxCountFieldOffset, maxCount)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    CodecUtil.encodeNullable(clientMessage, filter, DataCodecEncode)
    return clientMessage
}

func RingbufferReadManyDecodeRequest(clientMessage *bufutil.ClientMessagex) *RingbufferReadManyRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(RingbufferReadManyRequestParameters)
    initialFrame := iterator.Next()
    request.startSequence = bufutil.DecodeLong(initialFrame.Content, RingbufferReadManyRequestStartSequenceFieldOffset)
    request.minCount = bufutil.DecodeInt(initialFrame.Content, RingbufferReadManyRequestMinCountFieldOffset)
    request.maxCount = bufutil.DecodeInt(initialFrame.Content, RingbufferReadManyRequestMaxCountFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.filter = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type RingbufferReadManyResponseParameters struct {
    /**
    * TODO DOC
    */
readCount int
    /**
    * TODO DOC
    */
items []serialization.Data
    /**
    * TODO DOC
    */
/* @Nullable */ itemSeqs []int64
    /**
    * TODO DOC
    */
nextSeq int64
}

func RingbufferReadManyEncodeResponse(readCount int , items []serialization.Data , /* @Nullable */ itemSeqs []int64 , nextSeq int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, RingbufferReadManyResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, RingbufferReadManyResponseMessageType)
    bufutil.EncodeInt(initialFrame.Content, RingbufferReadManyResponseReadCountFieldOffset, readCount)
    bufutil.EncodeLong(initialFrame.Content, RingbufferReadManyResponseNextSeqFieldOffset, nextSeq)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encode(clientMessage, items, DataCodecEncode)
    CodecUtil.encodeNullable(clientMessage, itemSeqs, LongArrayCodecEncode)
    return clientMessage
}

func RingbufferReadManyDecodeResponse(clientMessage *bufutil.ClientMessagex) *RingbufferReadManyResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(RingbufferReadManyResponseParameters)
    initialFrame := iterator.Next()
    response.readCount = bufutil.DecodeInt(initialFrame.Content, RingbufferReadManyResponseReadCountFieldOffset)
    response.nextSeq = bufutil.DecodeLong(initialFrame.Content, RingbufferReadManyResponseNextSeqFieldOffset)
    response.items = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    response.itemSeqs = CodecUtil.decodeNullable(iterator, LongArrayCodecDecode) 
    return response
}

