/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("75e95ddc65083dca33b693138d1e2e58")
const (
    //hex: 0x130600
    CacheCreateConfigRequestMessageType = 1246720
    //hex: 0x130601
    CacheCreateConfigResponseMessageType = 1246721
    CacheCreateConfigRequestCreateAlsoOnOthersFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheCreateConfigRequestInitialFrameSize = CacheCreateConfigRequestCreateAlsoOnOthersFieldOffset + bufutil.BooleanSizeInBytes
    CacheCreateConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheCreateConfigRequestParameters struct {

    /**
    * The cache configuration.
    */
cacheConfig CacheConfigHolder

    /**
    * True if the configuration shall be created on all members, false otherwise.
    */
createAlsoOnOthers bool
}

func CacheCreateConfigEncodeRequest(cacheConfig CacheConfigHolder, createAlsoOnOthers bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.CreateConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheCreateConfigRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CacheCreateConfigRequestCreateAlsoOnOthersFieldOffset, createAlsoOnOthers)
    clientMessage.Add(initialFrame)
    CacheConfigHolderCodec.encode(clientMessage, cacheConfig)
    return clientMessage
}

func CacheCreateConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheCreateConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheCreateConfigRequestParameters)
    initialFrame := iterator.Next()
    request.createAlsoOnOthers = bufutil.DecodeBoolean(initialFrame.Content, CacheCreateConfigRequestCreateAlsoOnOthersFieldOffset)
    request.cacheConfig = CacheConfigHolderCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheCreateConfigResponseParameters struct {
    /**
    * The created configuration object.
    */
/* @Nullable */ response CacheConfigHolder
}

func CacheCreateConfigEncodeResponse(/* @Nullable */ response CacheConfigHolder ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheCreateConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheCreateConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, CacheConfigHolderCodecEncode)
    return clientMessage
}

func CacheCreateConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheCreateConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheCreateConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, CacheConfigHolderCodecDecode) 
    return response
}

