/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Removes the mapping for a key from this map if it is present.Unlike remove(Object), this operation does not return
 * the removed value, which avoids the serialization cost of the returned value.If the removed value will not be used,
 * a delete operation is preferred over a remove operation for better performance. The map will not contain a mapping
 * for the specified key once the call returns.
 * This method breaks the contract of EntryListener. When an entry is removed by delete(), it fires an EntryEvent
 * with a null oldValue. Also, a listener with predicates will have null values, so only keys can be queried via predicates
 */
//@Generated("7a09e5aa610c28047214c5402721719e")
const (
    //hex: 0x010900
    MapDeleteRequestMessageType = 67840
    //hex: 0x010901
    MapDeleteResponseMessageType = 67841
    MapDeleteRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapDeleteRequestInitialFrameSize = MapDeleteRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MapDeleteResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapDeleteRequestParameters struct {

    /**
    * Name of the map.
    */
name string

    /**
    * Key for the map entry.
    */
key serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64
}

func MapDeleteEncodeRequest(name string, key serialization.Data, threadId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.Delete")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapDeleteRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapDeleteRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, key)
    return clientMessage
}




/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapDeleteResponseParameters struct {
}



func MapDeleteDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapDeleteResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapDeleteResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

