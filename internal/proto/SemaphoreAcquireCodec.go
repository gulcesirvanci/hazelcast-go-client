/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Acquires the requested amount of permits if available, reducing
 * the number of available permits. If no enough permits are available,
 * then the current thread becomes disabled for thread scheduling purposes
 * and lies dormant until other threads release enough permits.
 */
//@Generated("aeefb57db36e33193ba2380372982189")
const (
    //hex: 0x0C0200
    SemaphoreAcquireRequestMessageType = 786944
    //hex: 0x0C0201
    SemaphoreAcquireResponseMessageType = 786945
    SemaphoreAcquireRequestSessionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SemaphoreAcquireRequestThreadIdFieldOffset = SemaphoreAcquireRequestSessionIdFieldOffset + bufutil.LongSizeInBytes
    SemaphoreAcquireRequestInvocationUidFieldOffset = SemaphoreAcquireRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    SemaphoreAcquireRequestPermitsFieldOffset = SemaphoreAcquireRequestInvocationUidFieldOffset + bufutil.UUIDSizeInBytes
    SemaphoreAcquireRequestTimeoutMsFieldOffset = SemaphoreAcquireRequestPermitsFieldOffset + bufutil.IntSizeInBytes
    SemaphoreAcquireRequestInitialFrameSize = SemaphoreAcquireRequestTimeoutMsFieldOffset + bufutil.LongSizeInBytes
    SemaphoreAcquireResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    SemaphoreAcquireResponseInitialFrameSize = SemaphoreAcquireResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SemaphoreAcquireRequestParameters struct {

    /**
    * CP group id of this ISemaphore instance
    */
groupId RaftGroupId

    /**
    * Name of this ISemaphore instance
    */
name string

    /**
    * Session ID of the caller
    */
sessionId int64

    /**
    * ID of the caller thread
    */
threadId int64

    /**
    * UID of this invocation
    */
invocationUid UUID

    /**
    * number of permits to acquire
    */
permits int

    /**
    * Duration to wait for permit acquire
    */
timeoutMs int64
}

func SemaphoreAcquireEncodeRequest(groupId RaftGroupId, name string, sessionId int64, threadId int64, invocationUid UUID, permits int, timeoutMs int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Semaphore.Acquire")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SemaphoreAcquireRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, SemaphoreAcquireRequestSessionIdFieldOffset, sessionId)
    bufutil.EncodeLong(initialFrame.Content, SemaphoreAcquireRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeUUID(initialFrame.Content, SemaphoreAcquireRequestInvocationUidFieldOffset, invocationUid)
    bufutil.EncodeInt(initialFrame.Content, SemaphoreAcquireRequestPermitsFieldOffset, permits)
    bufutil.EncodeLong(initialFrame.Content, SemaphoreAcquireRequestTimeoutMsFieldOffset, timeoutMs)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func SemaphoreAcquireDecodeRequest(clientMessage *bufutil.ClientMessagex) *SemaphoreAcquireRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(SemaphoreAcquireRequestParameters)
    initialFrame := iterator.Next()
    request.sessionId = bufutil.DecodeLong(initialFrame.Content, SemaphoreAcquireRequestSessionIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, SemaphoreAcquireRequestThreadIdFieldOffset)
    request.invocationUid = bufutil.DecodeUUID(initialFrame.Content, SemaphoreAcquireRequestInvocationUidFieldOffset)
    request.permits = bufutil.DecodeInt(initialFrame.Content, SemaphoreAcquireRequestPermitsFieldOffset)
    request.timeoutMs = bufutil.DecodeLong(initialFrame.Content, SemaphoreAcquireRequestTimeoutMsFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SemaphoreAcquireResponseParameters struct {
    /**
    * true if requested permits are acquired,
    * false otherwise
    */
response bool
}

func SemaphoreAcquireEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, SemaphoreAcquireResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SemaphoreAcquireResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, SemaphoreAcquireResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func SemaphoreAcquireDecodeResponse(clientMessage *bufutil.ClientMessagex) *SemaphoreAcquireResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(SemaphoreAcquireResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, SemaphoreAcquireResponseResponseFieldOffset)
    return response
}

