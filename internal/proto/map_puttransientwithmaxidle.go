/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Same as put except that MapStore, if defined, will not be called to store/persist the entry.
 * If ttl and maxIdle are 0, then the entry lives forever.
 */
//@Generated("50e6e016a4942530db3ebb0e8a370a38")
const (
    //hex: 0x014500
    MapPutTransientWithMaxIdleRequestMessageType = 83200
    //hex: 0x014501
    MapPutTransientWithMaxIdleResponseMessageType = 83201
    MapPutTransientWithMaxIdleRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapPutTransientWithMaxIdleRequestTtlFieldOffset = MapPutTransientWithMaxIdleRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MapPutTransientWithMaxIdleRequestMaxIdleFieldOffset = MapPutTransientWithMaxIdleRequestTtlFieldOffset + bufutil.LongSizeInBytes
    MapPutTransientWithMaxIdleRequestInitialFrameSize = MapPutTransientWithMaxIdleRequestMaxIdleFieldOffset + bufutil.LongSizeInBytes
    MapPutTransientWithMaxIdleResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapPutTransientWithMaxIdleRequestParameters struct {

    /**
    * Name of the map.
    */
name string

    /**
    * Key for the map entry.
    */
key serialization.Data

    /**
    * Value for the map entry.
    */
value serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * The duration in milliseconds after which this entry shall be deleted. O means infinite.
    */
ttl int64

    /**
    * The duration of maximum idle for this entry.
    * Milliseconds of idle, after which this entry shall be deleted. O means infinite.
    */
maxIdle int64
}

func MapPutTransientWithMaxIdleEncodeRequest(name string, key serialization.Data, value serialization.Data, threadId int64, ttl int64, maxIdle int64) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Map.PutTransientWithMaxIdle")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapPutTransientWithMaxIdleRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapPutTransientWithMaxIdleRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeLong(initialFrame.Content, MapPutTransientWithMaxIdleRequestTtlFieldOffset, ttl)
    bufutil.EncodeLong(initialFrame.Content, MapPutTransientWithMaxIdleRequestMaxIdleFieldOffset, maxIdle)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, key)
    bufutil.DataCodecEncode(clientMessage, value)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapPutTransientWithMaxIdleResponseParameters struct {
    /**
    * old value of the entry
    */
/* @Nullable */ response serialization.Data
}



func MapPutTransientWithMaxIdleDecodeResponse(clientMessage *bufutil.ClientMessage) *MapPutTransientWithMaxIdleResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapPutTransientWithMaxIdleResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode).(serialization.Data)  
    return response
}

