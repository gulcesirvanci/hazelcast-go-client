
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/core"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Makes an authentication request to the cluster using custom credentials.
 */
//@Generated("150b75df31258e7cf39cb37e564ec2ec")
const (
    //hex: 0x000200
    ClientAuthenticationCustomRequestMessageType = 512
    //hex: 0x000201
    ClientAuthenticationCustomResponseMessageType = 513
    ClientAuthenticationCustomRequestUuidFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ClientAuthenticationCustomRequestSerializationVersionFieldOffset = ClientAuthenticationCustomRequestUuidFieldOffset + UUIDSizeInBytes
    ClientAuthenticationCustomRequestInitialFrameSize = ClientAuthenticationCustomRequestSerializationVersionFieldOffset + ByteSizeInBytes
    ClientAuthenticationCustomResponseStatusFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    ClientAuthenticationCustomResponseUuidFieldOffset = ClientAuthenticationCustomResponseStatusFieldOffset + ByteSizeInBytes
    ClientAuthenticationCustomResponseSerializationVersionFieldOffset = ClientAuthenticationCustomResponseUuidFieldOffset + UUIDSizeInBytes
    ClientAuthenticationCustomResponsePartitionCountFieldOffset = ClientAuthenticationCustomResponseSerializationVersionFieldOffset + ByteSizeInBytes
    ClientAuthenticationCustomResponseClusterIdFieldOffset = ClientAuthenticationCustomResponsePartitionCountFieldOffset + IntSizeInBytes
    ClientAuthenticationCustomResponseFailoverSupportedFieldOffset = ClientAuthenticationCustomResponseClusterIdFieldOffset + UUIDSizeInBytes
    ClientAuthenticationCustomResponseInitialFrameSize = ClientAuthenticationCustomResponseFailoverSupportedFieldOffset + BooleanSizeInBytes

)

func ClientAuthenticationCustomEncodeRequest(clusterName string, credentials []byte, /* @Nullable */ uuid core.Uuid, clientType string, serializationVersion byte, clientHazelcastVersion string, clientName string, labels []string) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Client.AuthenticationCustom")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ClientAuthenticationCustomRequestMessageType)
    EncodeUUID(initialFrame.Content, ClientAuthenticationCustomRequestUuidFieldOffset, uuid)
    EncodeByte(initialFrame.Content, ClientAuthenticationCustomRequestSerializationVersionFieldOffset, serializationVersion)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, clusterName)


    ByteArrayCodecEncode(clientMessage, credentials)


    StringCodecEncode(clientMessage, clientType)


    StringCodecEncode(clientMessage, clientHazelcastVersion)


    StringCodecEncode(clientMessage, clientName)


    clientMessage.Add(BeginFrame)
        for i := 0; i < len(labels) ; i++ {
            StringCodecEncode(clientMessage, labels[i]) //check line
        }
        clientMessage.Add(EndFrame)



    return clientMessage
}


func ClientAuthenticationCustomDecodeResponse(clientMessage *ClientMessage) func() (/*** A byte that represents the authentication status. It can be AUTHENTICATED(0), CREDENTIALS_FAILED(1),* SERIALIZATION_VERSION_MISMATCH(2) or NOT_ALLOWED_IN_CLUSTER(3).*/status byte, /*** Address of the Hazelcast member which sends the authentication response.*//* @Nullable */address Address, /*** Unique string identifying the connected client uniquely.*//* @Nullable */uuid core.Uuid, /*** client side supported version to inform server side*/serializationVersion byte, /*** Version of the Hazelcast member which sends the authentication response.*/serverHazelcastVersion string, /*** Partition count of the cluster.*/partitionCount int32, /*** The cluster id of the cluster.*/clusterId core.Uuid, /*** Returns true if server supports clients with failover feature.*/failoverSupported bool) {
    return func() (/*** A byte that represents the authentication status. It can be AUTHENTICATED(0), CREDENTIALS_FAILED(1),* SERIALIZATION_VERSION_MISMATCH(2) or NOT_ALLOWED_IN_CLUSTER(3).*/status byte, /*** Address of the Hazelcast member which sends the authentication response.*//* @Nullable */address Address, /*** Unique string identifying the connected client uniquely.*//* @Nullable */uuid core.Uuid, /*** client side supported version to inform server side*/serializationVersion byte, /*** Version of the Hazelcast member which sends the authentication response.*/serverHazelcastVersion string, /*** Partition count of the cluster.*/partitionCount int32, /*** The cluster id of the cluster.*/clusterId core.Uuid, /*** Returns true if server supports clients with failover feature.*/failoverSupported bool) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        status = DecodeByte(initialFrame.Content, ClientAuthenticationCustomResponseStatusFieldOffset)
        uuid = DecodeUUID(initialFrame.Content, ClientAuthenticationCustomResponseUuidFieldOffset)
        serializationVersion = DecodeByte(initialFrame.Content, ClientAuthenticationCustomResponseSerializationVersionFieldOffset)
        partitionCount = DecodeInt(initialFrame.Content, ClientAuthenticationCustomResponsePartitionCountFieldOffset)
        clusterId = DecodeUUID(initialFrame.Content, ClientAuthenticationCustomResponseClusterIdFieldOffset)
        failoverSupported = DecodeBoolean(initialFrame.Content, ClientAuthenticationCustomResponseFailoverSupportedFieldOffset)
        address =          DecodeNullable(iterator, AddressCodecDecode).(Address) // 1  
    //check line for no nullable decode
        return
    }
}

