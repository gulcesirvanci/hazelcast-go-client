/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a CachePartitionLostListener. The addPartitionLostListener returns a registration ID. This ID is needed to remove the
 * CachePartitionLostListener using the #removePartitionLostListener(UUID) method. There is no check for duplicate
 * registrations, so if you register the listener twice, it will get events twice.Listeners registered from
 * HazelcastClient may miss some of the cache partition lost events due to design limitations.
 */
//@Generated("700a9a76dd628071f798cfab3c9d2158")
const (
    //hex: 0x131900
    CacheAddPartitionLostListenerRequestMessageType = 1251584
    //hex: 0x131901
    CacheAddPartitionLostListenerResponseMessageType = 1251585
    CacheAddPartitionLostListenerRequestLocalOnlyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddPartitionLostListenerRequestInitialFrameSize = CacheAddPartitionLostListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    CacheAddPartitionLostListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddPartitionLostListenerResponseInitialFrameSize = CacheAddPartitionLostListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    CacheAddPartitionLostListenerEventCachePartitionLostPartitionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddPartitionLostListenerEventCachePartitionLostUuidFieldOffset = CacheAddPartitionLostListenerEventCachePartitionLostPartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheAddPartitionLostListenerEventCachePartitionLostInitialFrameSize = CacheAddPartitionLostListenerEventCachePartitionLostUuidFieldOffset + bufutil.UUIDSizeInBytes
    //hex: 0x131902
    CacheAddPartitionLostListenerEventCachePartitionLostMessageType = 1251586


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheAddPartitionLostListenerRequestParameters struct {

    /**
    * Name of the cache
    */
name string

    /**
    * if true only node that has the partition sends the request, if false
    * sends all partition lost events.
    */
localOnly bool
}

func CacheAddPartitionLostListenerEncodeRequest(name string, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.AddPartitionLostListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddPartitionLostListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CacheAddPartitionLostListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func CacheAddPartitionLostListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheAddPartitionLostListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheAddPartitionLostListenerRequestParameters)
    initialFrame := iterator.Next()
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, CacheAddPartitionLostListenerRequestLocalOnlyFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheAddPartitionLostListenerResponseParameters struct {
    /**
    * returns the registration id for the CachePartitionLostListener.
    */
response UUID
}

func CacheAddPartitionLostListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheAddPartitionLostListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddPartitionLostListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, CacheAddPartitionLostListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CacheAddPartitionLostListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheAddPartitionLostListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheAddPartitionLostListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, CacheAddPartitionLostListenerResponseResponseFieldOffset)
    return response
}

    func encodeCacheAddPartitionLostListenerEvent(partitionId int, uuid UUID) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, CacheAddPartitionLostListenerEventCachePartitionLostInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheAddPartitionLostListenerEventCachePartitionLostMessageType)
        encodeInt(initialFrame.Content, CacheAddPartitionLostListenerEventCachePartitionLostPartitionIdFieldOffset, partitionId)
        encodeUUID(initialFrame.Content, CacheAddPartitionLostListenerEventCachePartitionLostUuidFieldOffset, uuid)
        clientMessage.Add(initialFrame)

        return clientMessage
    }

    type CacheAddPartitionLostListenerAbstractEventItemFunc func(partitionId int, uuid UUID)

     func CacheAddPartitionLostListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem CacheAddPartitionLostListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == CacheAddPartitionLostListenerEventCachePartitionLostMessageType {
             initialFrame := iterator.Next()
             partitionId := bufutil.DecodeInt(initialFrame.Content, CacheAddPartitionLostListenerEventCachePartitionLostPartitionIdFieldOffset)
             uuid := bufutil.DecodeUUID(initialFrame.Content, CacheAddPartitionLostListenerEventCachePartitionLostUuidFieldOffset)
             handleEventItem(partitionId, uuid)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

