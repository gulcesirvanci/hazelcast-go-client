/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Closes the given session on the given CP group
 */
//@Generated("9dbecc147cdeba3f3249806b9bfd572c")
const (
    //hex: 0x1F0200
    CPSessionCloseSessionRequestMessageType = 2032128
    //hex: 0x1F0201
    CPSessionCloseSessionResponseMessageType = 2032129
    CPSessionCloseSessionRequestSessionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CPSessionCloseSessionRequestInitialFrameSize = CPSessionCloseSessionRequestSessionIdFieldOffset + bufutil.LongSizeInBytes
    CPSessionCloseSessionResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CPSessionCloseSessionResponseInitialFrameSize = CPSessionCloseSessionResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CPSessionCloseSessionRequestParameters struct {

    /**
    * ID of the CP group
    */
groupId RaftGroupId

    /**
    * ID of the session
    */
sessionId int64
}

func CPSessionCloseSessionEncodeRequest(groupId RaftGroupId, sessionId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("CPSession.CloseSession")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CPSessionCloseSessionRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, CPSessionCloseSessionRequestSessionIdFieldOffset, sessionId)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    return clientMessage
}

func CPSessionCloseSessionDecodeRequest(clientMessage *bufutil.ClientMessagex) *CPSessionCloseSessionRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CPSessionCloseSessionRequestParameters)
    initialFrame := iterator.Next()
    request.sessionId = bufutil.DecodeLong(initialFrame.Content, CPSessionCloseSessionRequestSessionIdFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CPSessionCloseSessionResponseParameters struct {
    /**
    * true if the session is found & closed,
    * false otherwise.
    */
response bool
}

func CPSessionCloseSessionEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CPSessionCloseSessionResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CPSessionCloseSessionResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CPSessionCloseSessionResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CPSessionCloseSessionDecodeResponse(clientMessage *bufutil.ClientMessagex) *CPSessionCloseSessionResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CPSessionCloseSessionResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, CPSessionCloseSessionResponseResponseFieldOffset)
    return response
}

