
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns the number of additional elements that this queue can ideally (in the absence of memory or resource
 * constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit. Note that you cannot
 * always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be
 * the case that another thread is about to insert or remove an element.
 */
//@Generated("1b24adb6cfcef0f3b3828537b8584efe")
const (
    //hex: 0x031300
    QueueRemainingCapacityRequestMessageType = 201472
    //hex: 0x031301
    QueueRemainingCapacityResponseMessageType = 201473
    QueueRemainingCapacityRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    QueueRemainingCapacityResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    QueueRemainingCapacityResponseInitialFrameSize = QueueRemainingCapacityResponseResponseFieldOffset + IntSizeInBytes

)

func QueueRemainingCapacityEncodeRequest(name string) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Queue.RemainingCapacity")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, QueueRemainingCapacityRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func QueueRemainingCapacityDecodeResponse(clientMessage *ClientMessage) func() ( /*** The remaining capacity*/response int32) {
    return func() (/*** The remaining capacity*/response int32) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeInt(initialFrame.Content, QueueRemainingCapacityResponseResponseFieldOffset)
        return
    }
}

