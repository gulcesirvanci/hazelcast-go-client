/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Acquires the lock for the specified key for the specified lease time. After the lease time, the lock will be
 * released. If the lock is not available, then the current thread becomes disabled for thread scheduling
 * purposes and lies dormant until the lock has been acquired. Scope of the lock is for this map only. The acquired
 * lock is only for the key in this map.Locks are re-entrant, so if the key is locked N times, then it should be
 * unlocked N times before another thread can acquire it.
 */
//@Generated("65b109dd579435510c077670f740648b")
const (
    //hex: 0x021000
    MultiMapLockRequestMessageType = 135168
    //hex: 0x021001
    MultiMapLockResponseMessageType = 135169
    MultiMapLockRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MultiMapLockRequestTtlFieldOffset = MultiMapLockRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MultiMapLockRequestReferenceIdFieldOffset = MultiMapLockRequestTtlFieldOffset + bufutil.LongSizeInBytes
    MultiMapLockRequestInitialFrameSize = MultiMapLockRequestReferenceIdFieldOffset + bufutil.LongSizeInBytes
    MultiMapLockResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MultiMapLockRequestParameters struct {

    /**
    * Name of the MultiMap
    */
name string

    /**
    * The key the Lock
    */
key serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation
    */
threadId int64

    /**
    * The duration in milliseconds after which this entry shall be deleted. O means infinite.
    */
ttl int64

    /**
    * The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.
    */
referenceId int64
}

func MultiMapLockEncodeRequest(name string, key serialization.Data, threadId int64, ttl int64, referenceId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(true)
    clientMessage.SetOperationName("MultiMap.Lock")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MultiMapLockRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MultiMapLockRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeLong(initialFrame.Content, MultiMapLockRequestTtlFieldOffset, ttl)
    bufutil.EncodeLong(initialFrame.Content, MultiMapLockRequestReferenceIdFieldOffset, referenceId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    return clientMessage
}

func MultiMapLockDecodeRequest(clientMessage *bufutil.ClientMessagex) *MultiMapLockRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MultiMapLockRequestParameters)
    initialFrame := iterator.Next()
    request.threadId = bufutil.DecodeLong(initialFrame.Content, MultiMapLockRequestThreadIdFieldOffset)
    request.ttl = bufutil.DecodeLong(initialFrame.Content, MultiMapLockRequestTtlFieldOffset)
    request.referenceId = bufutil.DecodeLong(initialFrame.Content, MultiMapLockRequestReferenceIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MultiMapLockResponseParameters struct {
}

func MultiMapLockEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MultiMapLockResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MultiMapLockResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MultiMapLockDecodeResponse(clientMessage *bufutil.ClientMessagex) *MultiMapLockResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MultiMapLockResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

