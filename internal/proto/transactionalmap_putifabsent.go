/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * If the specified key is not already associated with a value, associate it with the given value.
 * The object to be put will be accessible only in the current transaction context until the transaction is committed.
 */
//@Generated("a5169c8d10982d3947678d7f68aaa40b")
const (
    //hex: 0x0E0800
    TransactionalMapPutIfAbsentRequestMessageType = 919552
    //hex: 0x0E0801
    TransactionalMapPutIfAbsentResponseMessageType = 919553
    TransactionalMapPutIfAbsentRequestTxnIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TransactionalMapPutIfAbsentRequestThreadIdFieldOffset = TransactionalMapPutIfAbsentRequestTxnIdFieldOffset + bufutil.UUIDSizeInBytes
    TransactionalMapPutIfAbsentRequestInitialFrameSize = TransactionalMapPutIfAbsentRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    TransactionalMapPutIfAbsentResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapPutIfAbsentRequestParameters struct {

    /**
    * Name of the Transactional Map
    */
name string

    /**
    * ID of the this transaction operation
    */
txnId string

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * The specified key
    */
key serialization.Data

    /**
    * The value to associate with the key when there is no previous value.
    */
value serialization.Data
}

func TransactionalMapPutIfAbsentEncodeRequest(name string, txnId string, threadId int64, key serialization.Data, value serialization.Data) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("TransactionalMap.PutIfAbsent")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapPutIfAbsentRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, TransactionalMapPutIfAbsentRequestTxnIdFieldOffset, txnId)
    bufutil.EncodeLong(initialFrame.Content, TransactionalMapPutIfAbsentRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, key)
    bufutil.DataCodecEncode(clientMessage, value)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapPutIfAbsentResponseParameters struct {
    /**
    * The previous value associated with key, or null if there was no mapping for key.
    */
/* @Nullable */ response serialization.Data
}



func TransactionalMapPutIfAbsentDecodeResponse(clientMessage *bufutil.ClientMessage) *TransactionalMapPutIfAbsentResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(TransactionalMapPutIfAbsentResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode).(serialization.Data)  
    return response
}

