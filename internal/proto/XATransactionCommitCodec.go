/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("a9fc892dc7501fd447458695a5d9dec9")
const (
    //hex: 0x140400
    XATransactionCommitRequestMessageType = 1311744
    //hex: 0x140401
    XATransactionCommitResponseMessageType = 1311745
    XATransactionCommitRequestTransactionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    XATransactionCommitRequestOnePhaseFieldOffset = XATransactionCommitRequestTransactionIdFieldOffset + bufutil.UUIDSizeInBytes
    XATransactionCommitRequestInitialFrameSize = XATransactionCommitRequestOnePhaseFieldOffset + bufutil.BooleanSizeInBytes
    XATransactionCommitResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type XATransactionCommitRequestParameters struct {

    /**
    * The internal Hazelcast transaction id.
    */
transactionId UUID

    /**
    * If true, the prepare is also done.
    */
onePhase bool
}

func XATransactionCommitEncodeRequest(transactionId UUID, onePhase bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("XATransaction.Commit")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, XATransactionCommitRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, XATransactionCommitRequestTransactionIdFieldOffset, transactionId)
    bufutil.EncodeBoolean(initialFrame.Content, XATransactionCommitRequestOnePhaseFieldOffset, onePhase)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func XATransactionCommitDecodeRequest(clientMessage *bufutil.ClientMessagex) *XATransactionCommitRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(XATransactionCommitRequestParameters)
    initialFrame := iterator.Next()
    request.transactionId = bufutil.DecodeUUID(initialFrame.Content, XATransactionCommitRequestTransactionIdFieldOffset)
    request.onePhase = bufutil.DecodeBoolean(initialFrame.Content, XATransactionCommitRequestOnePhaseFieldOffset)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type XATransactionCommitResponseParameters struct {
}

func XATransactionCommitEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, XATransactionCommitResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, XATransactionCommitResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func XATransactionCommitDecodeResponse(clientMessage *bufutil.ClientMessagex) *XATransactionCommitResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(XATransactionCommitResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

