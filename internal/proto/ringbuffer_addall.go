
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds all the items of a collection to the tail of the Ringbuffer. A addAll is likely to outperform multiple calls
 * to add(Object) due to better io utilization and a reduced number of executed operations. If the batch is empty,
 * the call is ignored. When the collection is not empty, the content is copied into a different data-structure.
 * This means that: after this call completes, the collection can be re-used. the collection doesn't need to be serializable.
 * If the collection is larger than the capacity of the ringbuffer, then the items that were written first will be
 * overwritten. Therefor this call will not block. The items are inserted in the order of the Iterator of the collection.
 * If an addAll is executed concurrently with an add or addAll, no guarantee is given that items are contiguous.
 * The result of the future contains the sequenceId of the last written item
 */
//@Generated("dbb2e79ad882a2dbb30353d7f5d1cef8")
const (
    //hex: 0x170800
    RingbufferAddAllRequestMessageType = 1509376
    //hex: 0x170801
    RingbufferAddAllResponseMessageType = 1509377
    RingbufferAddAllRequestOverflowPolicyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    RingbufferAddAllRequestInitialFrameSize = RingbufferAddAllRequestOverflowPolicyFieldOffset + IntSizeInBytes
    RingbufferAddAllResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    RingbufferAddAllResponseInitialFrameSize = RingbufferAddAllResponseResponseFieldOffset + LongSizeInBytes

)

func RingbufferAddAllEncodeRequest(name string, valueList []serialization.Data, overflowPolicy int32) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Ringbuffer.AddAll")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, RingbufferAddAllRequestMessageType)
    EncodeInt(initialFrame.Content, RingbufferAddAllRequestOverflowPolicyFieldOffset, overflowPolicy)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    clientMessage.Add(BeginFrame)
        for i := 0; i < len(valueList) ; i++ {
            DataCodecEncode(clientMessage, valueList[i]) //check line
        }
        clientMessage.Add(EndFrame)



    return clientMessage
}


func RingbufferAddAllDecodeResponse(clientMessage *ClientMessage) func() (/*** the CompletionStage to synchronize on completion.*/response int64) {
    return func() (/*** the CompletionStage to synchronize on completion.*/response int64) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeLong(initialFrame.Content, RingbufferAddAllResponseResponseFieldOffset)
        return
    }
}

