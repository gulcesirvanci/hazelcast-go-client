/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns a lazy Set view of the key contained in this map. A LazySet is optimized for querying speed
 * (preventing eager deserialization and hashing on HashSet insertion) and does NOT provide all operations.
 * Any kind of mutating function will throw an UNSUPPORTED_OPERATION. Same is true for operations
 * like java.util.Set#contains(Object) and java.util.Set#containsAll(java.util.Collection) which would result in
 * very poor performance if called repeatedly (for example, in a loop). If the use case is different from querying
 * the data, please copy the resulting set into a new java.util.HashSet.
 */
//@Generated("791bd693089f8b1cef6d11cc676b42c6")
const (
    //hex: 0x0D0F00
    ReplicatedMapKeySetRequestMessageType = 855808
    //hex: 0x0D0F01
    ReplicatedMapKeySetResponseMessageType = 855809
    ReplicatedMapKeySetRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ReplicatedMapKeySetResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ReplicatedMapKeySetRequestParameters struct {

    /**
    * Name of the ReplicatedMap
    */
name string
}

func ReplicatedMapKeySetEncodeRequest(name string) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("ReplicatedMap.KeySet")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ReplicatedMapKeySetRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func ReplicatedMapKeySetDecodeRequest(clientMessage *bufutil.ClientMessagex) *ReplicatedMapKeySetRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ReplicatedMapKeySetRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ReplicatedMapKeySetResponseParameters struct {
    /**
    * A lazy set view of the keys contained in this map.
    */
response []serialization.Data
}

func ReplicatedMapKeySetEncodeResponse(response []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ReplicatedMapKeySetResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ReplicatedMapKeySetResponseMessageType)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encode(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func ReplicatedMapKeySetDecodeResponse(clientMessage *bufutil.ClientMessagex) *ReplicatedMapKeySetResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ReplicatedMapKeySetResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return response
}

