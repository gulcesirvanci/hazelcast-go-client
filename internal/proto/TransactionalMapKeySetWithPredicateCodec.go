/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Queries the map based on the specified predicate and returns the keys of matching entries. Specified predicate
 * runs on all members in parallel.The set is NOT backed by the map, so changes to the map are NOT reflected in the
 * set, and vice-versa. This method is always executed by a distributed query, so it may throw a
 * QueryResultSizeExceededException if query result size limit is configured.
 */
//@Generated("04ff9e0a844f6c015dd24c759ae9ad40")
const (
    //hex: 0x0E0F00
    TransactionalMapKeySetWithPredicateRequestMessageType = 921344
    //hex: 0x0E0F01
    TransactionalMapKeySetWithPredicateResponseMessageType = 921345
    TransactionalMapKeySetWithPredicateRequestTxnIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TransactionalMapKeySetWithPredicateRequestThreadIdFieldOffset = TransactionalMapKeySetWithPredicateRequestTxnIdFieldOffset + bufutil.UUIDSizeInBytes
    TransactionalMapKeySetWithPredicateRequestInitialFrameSize = TransactionalMapKeySetWithPredicateRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    TransactionalMapKeySetWithPredicateResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapKeySetWithPredicateRequestParameters struct {

    /**
    * Name of the Transactional Map
    */
name string

    /**
    * ID of the this transaction operation
    */
txnId UUID

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * Specified query criteria.
    */
predicate serialization.Data
}

func TransactionalMapKeySetWithPredicateEncodeRequest(name string, txnId UUID, threadId int64, predicate serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("TransactionalMap.KeySetWithPredicate")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapKeySetWithPredicateRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, TransactionalMapKeySetWithPredicateRequestTxnIdFieldOffset, txnId)
    bufutil.EncodeLong(initialFrame.Content, TransactionalMapKeySetWithPredicateRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, predicate)
    return clientMessage
}

func TransactionalMapKeySetWithPredicateDecodeRequest(clientMessage *bufutil.ClientMessagex) *TransactionalMapKeySetWithPredicateRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(TransactionalMapKeySetWithPredicateRequestParameters)
    initialFrame := iterator.Next()
    request.txnId = bufutil.DecodeUUID(initialFrame.Content, TransactionalMapKeySetWithPredicateRequestTxnIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, TransactionalMapKeySetWithPredicateRequestThreadIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.predicate = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapKeySetWithPredicateResponseParameters struct {
    /**
    * Result key set for the query.
    */
response []serialization.Data
}

func TransactionalMapKeySetWithPredicateEncodeResponse(response []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, TransactionalMapKeySetWithPredicateResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapKeySetWithPredicateResponseMessageType)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encode(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func TransactionalMapKeySetWithPredicateDecodeResponse(clientMessage *bufutil.ClientMessagex) *TransactionalMapKeySetWithPredicateResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(TransactionalMapKeySetWithPredicateResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return response
}

