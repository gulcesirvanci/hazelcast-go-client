
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Reads one item from the Ringbuffer. If the sequence is one beyond the current tail, this call blocks until an
 * item is added. This method is not destructive unlike e.g. a queue.take. So the same item can be read by multiple
 * readers or it can be read multiple times by the same reader. Currently it isn't possible to control how long this
 * call is going to block. In the future we could add e.g. tryReadOne(long sequence, long timeout, TimeUnit unit).
 */
//@Generated("273fb8b72ff3f287f8324026d6fc98a6")
const (
    //hex: 0x170700
    RingbufferReadOneRequestMessageType = 1509120
    //hex: 0x170701
    RingbufferReadOneResponseMessageType = 1509121
    RingbufferReadOneRequestSequenceFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    RingbufferReadOneRequestInitialFrameSize = RingbufferReadOneRequestSequenceFieldOffset + LongSizeInBytes
    RingbufferReadOneResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func RingbufferReadOneEncodeRequest(name string, sequence int64) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Ringbuffer.ReadOne")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, RingbufferReadOneRequestMessageType)
    EncodeLong(initialFrame.Content, RingbufferReadOneRequestSequenceFieldOffset, sequence)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func RingbufferReadOneDecodeResponse(clientMessage *ClientMessage) func() (/*** the read item*//* @Nullable */response serialization.Data) {
    return func() (/*** the read item*//* @Nullable */response serialization.Data) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        response = DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  
        return
    }
}

