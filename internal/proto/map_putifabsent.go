/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Puts an entry into this map with a given ttl (time to live) value if the specified key is not already associated
 * with a value. Entry will expire and get evicted after the ttl.
 */
//@Generated("f76e115a43bd6156abd159e6599c5efd")
const (
    //hex: 0x010E00
    MapPutIfAbsentRequestMessageType = 69120
    //hex: 0x010E01
    MapPutIfAbsentResponseMessageType = 69121
    MapPutIfAbsentRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapPutIfAbsentRequestTtlFieldOffset = MapPutIfAbsentRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MapPutIfAbsentRequestInitialFrameSize = MapPutIfAbsentRequestTtlFieldOffset + bufutil.LongSizeInBytes
    MapPutIfAbsentResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapPutIfAbsentRequestParameters struct {

    /**
    * Name of the map.
    */
name string

    /**
    * Key for the map entry.
    */
key serialization.Data

    /**
    * New value for the map entry.
    */
value serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * The duration in milliseconds after which this entry shall be deleted. O means infinite.
    */
ttl int64
}

func MapPutIfAbsentEncodeRequest(name string, key serialization.Data, value serialization.Data, threadId int64, ttl int64) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Map.PutIfAbsent")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapPutIfAbsentRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapPutIfAbsentRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeLong(initialFrame.Content, MapPutIfAbsentRequestTtlFieldOffset, ttl)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, key)
    bufutil.DataCodecEncode(clientMessage, value)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapPutIfAbsentResponseParameters struct {
    /**
    * returns a clone of the previous value, not the original (identically equal) value previously put into the map.
    */
/* @Nullable */ response serialization.Data
}



func MapPutIfAbsentDecodeResponse(clientMessage *bufutil.ClientMessage) *MapPutIfAbsentResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapPutIfAbsentResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode).(serialization.Data)  
    return response
}

