/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Applies a function on the value
 */
//@Generated("f5b9fd9685ab11e2c7da27b3266d52a1")
const (
    //hex: 0x0A0100
    AtomicRefApplyRequestMessageType = 655616
    //hex: 0x0A0101
    AtomicRefApplyResponseMessageType = 655617
    AtomicRefApplyRequestReturnValueTypeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    AtomicRefApplyRequestAlterFieldOffset = AtomicRefApplyRequestReturnValueTypeFieldOffset + bufutil.IntSizeInBytes
    AtomicRefApplyRequestInitialFrameSize = AtomicRefApplyRequestAlterFieldOffset + bufutil.BooleanSizeInBytes
    AtomicRefApplyResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicRefApplyRequestParameters struct {

    /**
    * CP group id of this IAtomicReference instance.
    */
groupId RaftGroupId

    /**
    * The name of this IAtomicReference instance.
    */
name string

    /**
    * The function applied to the value.
    */
function serialization.Data

    /**
    * 0 returns no value, 1 returns the old value,
    * 2 returns the new value
    */
returnValueType int

    /**
    * Denotes whether result of the function will be
    * set to the IAtomicRefInstance
    */
alter bool
}

func AtomicRefApplyEncodeRequest(groupId RaftGroupId, name string, function serialization.Data, returnValueType int, alter bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("AtomicRef.Apply")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicRefApplyRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, AtomicRefApplyRequestReturnValueTypeFieldOffset, returnValueType)
    bufutil.EncodeBoolean(initialFrame.Content, AtomicRefApplyRequestAlterFieldOffset, alter)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, function)
    return clientMessage
}

func AtomicRefApplyDecodeRequest(clientMessage *bufutil.ClientMessagex) *AtomicRefApplyRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(AtomicRefApplyRequestParameters)
    initialFrame := iterator.Next()
    request.returnValueType = bufutil.DecodeInt(initialFrame.Content, AtomicRefApplyRequestReturnValueTypeFieldOffset)
    request.alter = bufutil.DecodeBoolean(initialFrame.Content, AtomicRefApplyRequestAlterFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    request.function = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicRefApplyResponseParameters struct {
    /**
    * The result of the function application.
    */
/* @Nullable */ response serialization.Data
}

func AtomicRefApplyEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, AtomicRefApplyResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicRefApplyResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func AtomicRefApplyDecodeResponse(clientMessage *bufutil.ClientMessagex) *AtomicRefApplyResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(AtomicRefApplyResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

