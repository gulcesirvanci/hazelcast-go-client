/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("2761a85d0c57d86bca9099f49fb1214f")
const (
    //hex: 0x000300
    ClientAddMembershipListenerRequestMessageType = 768
    //hex: 0x000301
    ClientAddMembershipListenerResponseMessageType = 769
    ClientAddMembershipListenerRequestLocalOnlyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddMembershipListenerRequestInitialFrameSize = ClientAddMembershipListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    ClientAddMembershipListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddMembershipListenerResponseInitialFrameSize = ClientAddMembershipListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    ClientAddMembershipListenerEventMemberEventTypeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddMembershipListenerEventMemberInitialFrameSize = ClientAddMembershipListenerEventMemberEventTypeFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x000302
    ClientAddMembershipListenerEventMemberMessageType = 770

    ClientAddMembershipListenerEventMemberListInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x000303
    ClientAddMembershipListenerEventMemberListMessageType = 771

    ClientAddMembershipListenerEventMemberAttributeChangeOperationTypeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddMembershipListenerEventMemberAttributeChangeInitialFrameSize = ClientAddMembershipListenerEventMemberAttributeChangeOperationTypeFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x000304
    ClientAddMembershipListenerEventMemberAttributeChangeMessageType = 772


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientAddMembershipListenerRequestParameters struct {

    /**
    * if true only master node sends events, otherwise all registered nodes send all membership
    * changes.
    */
localOnly bool
}

func ClientAddMembershipListenerEncodeRequest(localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Client.AddMembershipListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddMembershipListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, ClientAddMembershipListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func ClientAddMembershipListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *ClientAddMembershipListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ClientAddMembershipListenerRequestParameters)
    initialFrame := iterator.Next()
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, ClientAddMembershipListenerRequestLocalOnlyFieldOffset)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientAddMembershipListenerResponseParameters struct {
    /**
    * Returns the registration id for the listener.
    */
response UUID
}

func ClientAddMembershipListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ClientAddMembershipListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddMembershipListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, ClientAddMembershipListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ClientAddMembershipListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *ClientAddMembershipListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ClientAddMembershipListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, ClientAddMembershipListenerResponseResponseFieldOffset)
    return response
}

    func encodeClientAddMembershipListenerEvent(member Member, eventType int) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ClientAddMembershipListenerEventMemberInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddMembershipListenerEventMemberMessageType)
        encodeInt(initialFrame.Content, ClientAddMembershipListenerEventMemberEventTypeFieldOffset, eventType)
        clientMessage.Add(initialFrame)

        MemberCodec.encode(clientMessage, member)
        return clientMessage
    }
    func encodeClientAddMembershipListenerEvent(members Collection<com.hazelcast.cluster.Member>) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ClientAddMembershipListenerEventMemberListInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddMembershipListenerEventMemberListMessageType)
        clientMessage.Add(initialFrame)

        ListMultiFrameCodec.encode(clientMessage, members, MemberCodecEncode)
        return clientMessage
    }
    func encodeClientAddMembershipListenerEvent(member Member, members Collection<com.hazelcast.cluster.Member>, key string, operationType int, /* @Nullable */ value string) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ClientAddMembershipListenerEventMemberAttributeChangeInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddMembershipListenerEventMemberAttributeChangeMessageType)
        encodeInt(initialFrame.Content, ClientAddMembershipListenerEventMemberAttributeChangeOperationTypeFieldOffset, operationType)
        clientMessage.Add(initialFrame)

        MemberCodec.encode(clientMessage, member)
        ListMultiFrameCodec.encode(clientMessage, members, MemberCodecEncode)
        StringCodec.encode(clientMessage, key)
        CodecUtil.encodeNullable(clientMessage, value, StringCodecEncode)
        return clientMessage
    }

    type ClientAddMembershipListenerAbstractEventItemFunc func(member Member, eventType int)
    type ClientAddMembershipListenerAbstractEventItemFunc func(members Collection<com.hazelcast.cluster.Member>)
    type ClientAddMembershipListenerAbstractEventItemFunc func(member Member, members Collection<com.hazelcast.cluster.Member>, key string, operationType int, /* @Nullable */ value string)

     func ClientAddMembershipListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem ClientAddMembershipListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == ClientAddMembershipListenerEventMemberMessageType {
             initialFrame := iterator.Next()
             eventType := bufutil.DecodeInt(initialFrame.Content, ClientAddMembershipListenerEventMemberEventTypeFieldOffset)
             member := MemberCodec.decode(iterator)
             handleEventItem(member, eventType)
             return
          }
         if messageType == ClientAddMembershipListenerEventMemberListMessageType {
             //empty initial frame
             iterator.Next()
             members := ListMultiFrameCodec.decode(iterator, MemberCodecDecode)
             handleEventItem(members)
             return
          }
         if messageType == ClientAddMembershipListenerEventMemberAttributeChangeMessageType {
             initialFrame := iterator.Next()
             operationType := bufutil.DecodeInt(initialFrame.Content, ClientAddMembershipListenerEventMemberAttributeChangeOperationTypeFieldOffset)
             member := MemberCodec.decode(iterator)
             members := ListMultiFrameCodec.decode(iterator, MemberCodecDecode)
             key := StringCodec.decode(iterator)
             value := CodecUtil.decodeNullable(iterator, StringCodecDecode) 
             handleEventItem(member, members, key, operationType, value)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

