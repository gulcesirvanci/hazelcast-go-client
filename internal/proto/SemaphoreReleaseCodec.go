/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Releases the given number of permits and increases the number of
 * available permits by that amount.
 */
//@Generated("12dfa730c46d921bbb2c48812cbe4f1b")
const (
    //hex: 0x0C0300
    SemaphoreReleaseRequestMessageType = 787200
    //hex: 0x0C0301
    SemaphoreReleaseResponseMessageType = 787201
    SemaphoreReleaseRequestSessionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SemaphoreReleaseRequestThreadIdFieldOffset = SemaphoreReleaseRequestSessionIdFieldOffset + bufutil.LongSizeInBytes
    SemaphoreReleaseRequestInvocationUidFieldOffset = SemaphoreReleaseRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    SemaphoreReleaseRequestPermitsFieldOffset = SemaphoreReleaseRequestInvocationUidFieldOffset + bufutil.UUIDSizeInBytes
    SemaphoreReleaseRequestInitialFrameSize = SemaphoreReleaseRequestPermitsFieldOffset + bufutil.IntSizeInBytes
    SemaphoreReleaseResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    SemaphoreReleaseResponseInitialFrameSize = SemaphoreReleaseResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SemaphoreReleaseRequestParameters struct {

    /**
    * CP group id of this ISemaphore instance
    */
groupId RaftGroupId

    /**
    * Name of this ISemaphore instance
    */
name string

    /**
    * Session ID of the caller
    */
sessionId int64

    /**
    * ID of the caller thread
    */
threadId int64

    /**
    * UID of this invocation
    */
invocationUid UUID

    /**
    * number of permits to release
    */
permits int
}

func SemaphoreReleaseEncodeRequest(groupId RaftGroupId, name string, sessionId int64, threadId int64, invocationUid UUID, permits int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Semaphore.Release")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SemaphoreReleaseRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, SemaphoreReleaseRequestSessionIdFieldOffset, sessionId)
    bufutil.EncodeLong(initialFrame.Content, SemaphoreReleaseRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeUUID(initialFrame.Content, SemaphoreReleaseRequestInvocationUidFieldOffset, invocationUid)
    bufutil.EncodeInt(initialFrame.Content, SemaphoreReleaseRequestPermitsFieldOffset, permits)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func SemaphoreReleaseDecodeRequest(clientMessage *bufutil.ClientMessagex) *SemaphoreReleaseRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(SemaphoreReleaseRequestParameters)
    initialFrame := iterator.Next()
    request.sessionId = bufutil.DecodeLong(initialFrame.Content, SemaphoreReleaseRequestSessionIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, SemaphoreReleaseRequestThreadIdFieldOffset)
    request.invocationUid = bufutil.DecodeUUID(initialFrame.Content, SemaphoreReleaseRequestInvocationUidFieldOffset)
    request.permits = bufutil.DecodeInt(initialFrame.Content, SemaphoreReleaseRequestPermitsFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SemaphoreReleaseResponseParameters struct {
    /**
    * true
    */
response bool
}

func SemaphoreReleaseEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, SemaphoreReleaseResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SemaphoreReleaseResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, SemaphoreReleaseResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func SemaphoreReleaseDecodeResponse(clientMessage *bufutil.ClientMessagex) *SemaphoreReleaseResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(SemaphoreReleaseResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, SemaphoreReleaseResponseResponseFieldOffset)
    return response
}

