/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Fetches invalidation metadata from partitions of map.
 */
//@Generated("d7f0753cc10f326aa2a8c28e6115fac4")
const (
    //hex: 0x013E00
    MapFetchNearCacheInvalidationMetadataRequestMessageType = 81408
    //hex: 0x013E01
    MapFetchNearCacheInvalidationMetadataResponseMessageType = 81409
    MapFetchNearCacheInvalidationMetadataRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapFetchNearCacheInvalidationMetadataResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapFetchNearCacheInvalidationMetadataRequestParameters struct {

    /**
    * names of the maps
    */
names []String]

    /**
    * TODO DOC
    */
address Address
}

func MapFetchNearCacheInvalidationMetadataEncodeRequest(names Collection<String>, address Address) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.FetchNearCacheInvalidationMetadata")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapFetchNearCacheInvalidationMetadataRequestMessageType)
    clientMessage.Add(initialFrame)
    ListMultiFrameCodec.encode(clientMessage, names, StringCodecEncode)
    AddressCodec.encode(clientMessage, address)
    return clientMessage
}

func MapFetchNearCacheInvalidationMetadataDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapFetchNearCacheInvalidationMetadataRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapFetchNearCacheInvalidationMetadataRequestParameters)
    //empty initial frame
    iterator.Next()
    request.names = ListMultiFrameCodec.decode(iterator, StringCodecDecode)
    request.address = AddressCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapFetchNearCacheInvalidationMetadataResponseParameters struct {
    /**
    * TODO DOC
    */
namePartitionSequenceList java.util.List<java.util.Map.Entry<java.lang.String, java.util.List<java.util.Map.Entry<java.lang.Integer, java.lang.Long>>>>
    /**
    * TODO DOC
    */
partitionUuidList java.util.List<java.util.Map.Entry<java.lang.Integer, java.util.UUID>>
}

func MapFetchNearCacheInvalidationMetadataEncodeResponse(namePartitionSequenceList java.util.Collection<java.util.Map.Entry<java.lang.String, java.util.List<java.util.Map.Entry<java.lang.Integer, java.lang.Long>>>> , partitionUuidList java.util.Collection<java.util.Map.Entry<java.lang.Integer, java.util.UUID>> ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapFetchNearCacheInvalidationMetadataResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapFetchNearCacheInvalidationMetadataResponseMessageType)
    clientMessage.Add(initialFrame)

    EntryListCodec.encode(clientMessage, namePartitionSequenceList, StringCodecEncode, EntryListIntegerLongCodecEncode)
    EntryListIntegerUUIDCodec.encode(clientMessage, partitionUuidList)
    return clientMessage
}

func MapFetchNearCacheInvalidationMetadataDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapFetchNearCacheInvalidationMetadataResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapFetchNearCacheInvalidationMetadataResponseParameters)
    //empty initial frame
    iterator.Next()
    response.namePartitionSequenceList = EntryListCodec.decode(iterator, StringCodecDecode, EntryListIntegerLongCodecDecode)
    response.partitionUuidList = EntryListIntegerUUIDCodec.decode(iterator)
    return response
}

