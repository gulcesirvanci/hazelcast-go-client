/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Applies given MC config (client filter list).
 */
//@Generated("e2fc34de3084cd03dc73ce38d2641238")
const (
    //hex: 0x200D00
    MCApplyMCConfigRequestMessageType = 2100480
    //hex: 0x200D01
    MCApplyMCConfigResponseMessageType = 2100481
    MCApplyMCConfigRequestClientBwListModeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MCApplyMCConfigRequestInitialFrameSize = MCApplyMCConfigRequestClientBwListModeFieldOffset + bufutil.IntSizeInBytes
    MCApplyMCConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCApplyMCConfigRequestParameters struct {

    /**
    * ETag value of the config.
    */
eTag string

    /**
    * The mode for client filtering:
    * 0 - DISABLED
    * 1 - WHITELIST
    * 2 - BLACKLIST
    */
clientBwListMode int

    /**
    * Client filter list entries.
    */
/* @Nullable */ clientBwListEntries []ClientBwListEntryDTO
}

func MCApplyMCConfigEncodeRequest(eTag string, clientBwListMode int, /* @Nullable */ clientBwListEntries List<ClientBwListEntryDTO>) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("MC.ApplyMCConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCApplyMCConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, MCApplyMCConfigRequestClientBwListModeFieldOffset, clientBwListMode)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, eTag)
    ListMultiFrameCodec.encodeNullable(clientMessage, clientBwListEntries, ClientBwListEntryCodecEncode)
    return clientMessage
}

func MCApplyMCConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *MCApplyMCConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MCApplyMCConfigRequestParameters)
    initialFrame := iterator.Next()
    request.clientBwListMode = bufutil.DecodeInt(initialFrame.Content, MCApplyMCConfigRequestClientBwListModeFieldOffset)
    request.eTag = StringCodec.decode(iterator)
    request.clientBwListEntries = ListMultiFrameCodec.decodeNullable(iterator, ClientBwListEntryCodecDecode)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCApplyMCConfigResponseParameters struct {
}

func MCApplyMCConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MCApplyMCConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCApplyMCConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MCApplyMCConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *MCApplyMCConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MCApplyMCConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

