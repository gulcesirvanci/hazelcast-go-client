/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds an listener for this collection. Listener will be notified or all collection add/remove events.
 */
//@Generated("8b7a571fbcb7a0cfacb1ae5513bf75b8")
const (
    //hex: 0x031100
    QueueAddListenerRequestMessageType = 200960
    //hex: 0x031101
    QueueAddListenerResponseMessageType = 200961
    QueueAddListenerRequestIncludeValueFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    QueueAddListenerRequestLocalOnlyFieldOffset = QueueAddListenerRequestIncludeValueFieldOffset + bufutil.BooleanSizeInBytes
    QueueAddListenerRequestInitialFrameSize = QueueAddListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    QueueAddListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    QueueAddListenerResponseInitialFrameSize = QueueAddListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    QueueAddListenerEventItemUuidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    QueueAddListenerEventItemEventTypeFieldOffset = QueueAddListenerEventItemUuidFieldOffset + bufutil.UUIDSizeInBytes
    QueueAddListenerEventItemInitialFrameSize = QueueAddListenerEventItemEventTypeFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x031102
    QueueAddListenerEventItemMessageType = 200962


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueAddListenerRequestParameters struct {

    /**
    * Name of the Queue
    */
name string

    /**
    * <tt>true</tt> if the updated item should be passed to the item listener, <tt>false</tt> otherwise.
    */
includeValue bool

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func QueueAddListenerEncodeRequest(name string, includeValue bool, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Queue.AddListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, QueueAddListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, QueueAddListenerRequestIncludeValueFieldOffset, includeValue)
    bufutil.EncodeBoolean(initialFrame.Content, QueueAddListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func QueueAddListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *QueueAddListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(QueueAddListenerRequestParameters)
    initialFrame := iterator.Next()
    request.includeValue = bufutil.DecodeBoolean(initialFrame.Content, QueueAddListenerRequestIncludeValueFieldOffset)
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, QueueAddListenerRequestLocalOnlyFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueAddListenerResponseParameters struct {
    /**
    * The registration id
    */
response UUID
}

func QueueAddListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, QueueAddListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, QueueAddListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, QueueAddListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func QueueAddListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *QueueAddListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(QueueAddListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, QueueAddListenerResponseResponseFieldOffset)
    return response
}

    func encodeQueueAddListenerEvent(/* @Nullable */ item serialization.Data, uuid UUID, eventType int) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, QueueAddListenerEventItemInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, QueueAddListenerEventItemMessageType)
        encodeUUID(initialFrame.Content, QueueAddListenerEventItemUuidFieldOffset, uuid)
        encodeInt(initialFrame.Content, QueueAddListenerEventItemEventTypeFieldOffset, eventType)
        clientMessage.Add(initialFrame)

        CodecUtil.encodeNullable(clientMessage, item, DataCodecEncode)
        return clientMessage
    }

    type QueueAddListenerAbstractEventItemFunc func(/* @Nullable */ item serialization.Data, uuid UUID, eventType int)

     func QueueAddListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem QueueAddListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == QueueAddListenerEventItemMessageType {
             initialFrame := iterator.Next()
             uuid := bufutil.DecodeUUID(initialFrame.Content, QueueAddListenerEventItemUuidFieldOffset)
             eventType := bufutil.DecodeInt(initialFrame.Content, QueueAddListenerEventItemEventTypeFieldOffset)
             item := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             handleEventItem(item, uuid, eventType)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

