/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Reads the recorded metrics starting with the smallest sequence number
 * greater or equals to the sequence number set in fromSequence.
 */
//@Generated("e619ab6a048c021cebc83d9287bd215c")
const (
    //hex: 0x200100
    MCReadMetricsRequestMessageType = 2097408
    //hex: 0x200101
    MCReadMetricsResponseMessageType = 2097409
    MCReadMetricsRequestUuidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MCReadMetricsRequestFromSequenceFieldOffset = MCReadMetricsRequestUuidFieldOffset + bufutil.UUIDSizeInBytes
    MCReadMetricsRequestInitialFrameSize = MCReadMetricsRequestFromSequenceFieldOffset + bufutil.LongSizeInBytes
    MCReadMetricsResponseNextSequenceFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MCReadMetricsResponseInitialFrameSize = MCReadMetricsResponseNextSequenceFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCReadMetricsRequestParameters struct {

    /**
    * The UUID of the member that is supposed to read the metrics from.
    */
uuid UUID

    /**
    * The sequence the recorded metrics should be read starting with.
    */
fromSequence int64
}

func MCReadMetricsEncodeRequest(uuid UUID, fromSequence int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("MC.ReadMetrics")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCReadMetricsRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, MCReadMetricsRequestUuidFieldOffset, uuid)
    bufutil.EncodeLong(initialFrame.Content, MCReadMetricsRequestFromSequenceFieldOffset, fromSequence)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func MCReadMetricsDecodeRequest(clientMessage *bufutil.ClientMessagex) *MCReadMetricsRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MCReadMetricsRequestParameters)
    initialFrame := iterator.Next()
    request.uuid = bufutil.DecodeUUID(initialFrame.Content, MCReadMetricsRequestUuidFieldOffset)
    request.fromSequence = bufutil.DecodeLong(initialFrame.Content, MCReadMetricsRequestFromSequenceFieldOffset)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCReadMetricsResponseParameters struct {
    /**
    * The map of timestamp and compressed metrics data
    */
elements java.util.List<java.util.Map.Entry<java.lang.Long, byte[]>>
    /**
    * The sequence number that the next task should start with
    */
nextSequence int64
}

func MCReadMetricsEncodeResponse(elements java.util.Collection<java.util.Map.Entry<java.lang.Long, byte[]>> , nextSequence int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MCReadMetricsResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCReadMetricsResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, MCReadMetricsResponseNextSequenceFieldOffset, nextSequence)
    clientMessage.Add(initialFrame)

    EntryListLongByteArrayCodec.encode(clientMessage, elements)
    return clientMessage
}

func MCReadMetricsDecodeResponse(clientMessage *bufutil.ClientMessagex) *MCReadMetricsResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MCReadMetricsResponseParameters)
    initialFrame := iterator.Next()
    response.nextSequence = bufutil.DecodeLong(initialFrame.Content, MCReadMetricsResponseNextSequenceFieldOffset)
    response.elements = EntryListLongByteArrayCodec.decode(iterator)
    return response
}

