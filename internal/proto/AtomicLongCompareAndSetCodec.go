/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Atomically sets the value to the given updated value only if the current
 * value the expected value.
 */
//@Generated("0cf229b52be3eaf69112390aeab88878")
const (
    //hex: 0x090400
    AtomicLongCompareAndSetRequestMessageType = 590848
    //hex: 0x090401
    AtomicLongCompareAndSetResponseMessageType = 590849
    AtomicLongCompareAndSetRequestExpectedFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    AtomicLongCompareAndSetRequestUpdatedFieldOffset = AtomicLongCompareAndSetRequestExpectedFieldOffset + bufutil.LongSizeInBytes
    AtomicLongCompareAndSetRequestInitialFrameSize = AtomicLongCompareAndSetRequestUpdatedFieldOffset + bufutil.LongSizeInBytes
    AtomicLongCompareAndSetResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    AtomicLongCompareAndSetResponseInitialFrameSize = AtomicLongCompareAndSetResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicLongCompareAndSetRequestParameters struct {

    /**
    * CP group id of this IAtomicLong instance.
    */
groupId RaftGroupId

    /**
    * Name of this IAtomicLong instance.
    */
name string

    /**
    * The expected value
    */
expected int64

    /**
    * The new value
    */
updated int64
}

func AtomicLongCompareAndSetEncodeRequest(groupId RaftGroupId, name string, expected int64, updated int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("AtomicLong.CompareAndSet")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicLongCompareAndSetRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, AtomicLongCompareAndSetRequestExpectedFieldOffset, expected)
    bufutil.EncodeLong(initialFrame.Content, AtomicLongCompareAndSetRequestUpdatedFieldOffset, updated)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func AtomicLongCompareAndSetDecodeRequest(clientMessage *bufutil.ClientMessagex) *AtomicLongCompareAndSetRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(AtomicLongCompareAndSetRequestParameters)
    initialFrame := iterator.Next()
    request.expected = bufutil.DecodeLong(initialFrame.Content, AtomicLongCompareAndSetRequestExpectedFieldOffset)
    request.updated = bufutil.DecodeLong(initialFrame.Content, AtomicLongCompareAndSetRequestUpdatedFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicLongCompareAndSetResponseParameters struct {
    /**
    * true if successful; or false if the actual value
    * was not equal to the expected value.
    */
response bool
}

func AtomicLongCompareAndSetEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, AtomicLongCompareAndSetResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicLongCompareAndSetResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, AtomicLongCompareAndSetResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func AtomicLongCompareAndSetDecodeResponse(clientMessage *bufutil.ClientMessagex) *AtomicLongCompareAndSetResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(AtomicLongCompareAndSetResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, AtomicLongCompareAndSetResponseResponseFieldOffset)
    return response
}

