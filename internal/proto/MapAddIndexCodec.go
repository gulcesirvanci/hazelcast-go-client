/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds an index to this map with specified configuration.
 */
//@Generated("fb2e70394c76f70cfc0c2ad801d08f9c")
const (
    //hex: 0x012900
    MapAddIndexRequestMessageType = 76032
    //hex: 0x012901
    MapAddIndexResponseMessageType = 76033
    MapAddIndexRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapAddIndexResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddIndexRequestParameters struct {

    /**
    * Name of map.
    */
name string

    /**
    * Index configuration.
    */
indexConfig IndexConfig
}

func MapAddIndexEncodeRequest(name string, indexConfig IndexConfig) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.AddIndex")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddIndexRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    IndexConfigCodec.encode(clientMessage, indexConfig)
    return clientMessage
}

func MapAddIndexDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapAddIndexRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapAddIndexRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    request.indexConfig = IndexConfigCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddIndexResponseParameters struct {
}

func MapAddIndexEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapAddIndexResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddIndexResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MapAddIndexDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapAddIndexResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapAddIndexResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

