/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Decrements the count of the latch, releasing all waiting threads if
 * the count reaches zero. If the current count is greater than zero, then
 * it is decremented. If the new count is zero: All waiting threads are
 * re-enabled for thread scheduling purposes, and Countdown owner is set to
 * null. If the current count equals zero, then nothing happens.
 */
//@Generated("053ed25731cb4e9dfd499112523a4d78")
const (
    //hex: 0x0B0300
    CountDownLatchCountDownRequestMessageType = 721664
    //hex: 0x0B0301
    CountDownLatchCountDownResponseMessageType = 721665
    CountDownLatchCountDownRequestInvocationUidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CountDownLatchCountDownRequestExpectedRoundFieldOffset = CountDownLatchCountDownRequestInvocationUidFieldOffset + bufutil.UUIDSizeInBytes
    CountDownLatchCountDownRequestInitialFrameSize = CountDownLatchCountDownRequestExpectedRoundFieldOffset + bufutil.IntSizeInBytes
    CountDownLatchCountDownResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CountDownLatchCountDownRequestParameters struct {

    /**
    * CP group id of this CountDownLatch instance
    */
groupId RaftGroupId

    /**
    * Name of the CountDownLatch instance
    */
name string

    /**
    * UID of this invocation
    */
invocationUid UUID

    /**
    * The round this invocation will be performed on
    */
expectedRound int
}

func CountDownLatchCountDownEncodeRequest(groupId RaftGroupId, name string, invocationUid UUID, expectedRound int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("CountDownLatch.CountDown")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CountDownLatchCountDownRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, CountDownLatchCountDownRequestInvocationUidFieldOffset, invocationUid)
    bufutil.EncodeInt(initialFrame.Content, CountDownLatchCountDownRequestExpectedRoundFieldOffset, expectedRound)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func CountDownLatchCountDownDecodeRequest(clientMessage *bufutil.ClientMessagex) *CountDownLatchCountDownRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CountDownLatchCountDownRequestParameters)
    initialFrame := iterator.Next()
    request.invocationUid = bufutil.DecodeUUID(initialFrame.Content, CountDownLatchCountDownRequestInvocationUidFieldOffset)
    request.expectedRound = bufutil.DecodeInt(initialFrame.Content, CountDownLatchCountDownRequestExpectedRoundFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CountDownLatchCountDownResponseParameters struct {
}

func CountDownLatchCountDownEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CountDownLatchCountDownResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CountDownLatchCountDownResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CountDownLatchCountDownDecodeResponse(clientMessage *bufutil.ClientMessagex) *CountDownLatchCountDownResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CountDownLatchCountDownResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

