/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * The ordering of iteration over entries is undefined. During iteration, any entries that are a). read will have
 * their appropriate CacheEntryReadListeners notified and b). removed will have their appropriate
 * CacheEntryRemoveListeners notified. java.util.Iterator#next() may return null if the entry is no longer present,
 * has expired or has been evicted.
 */
//@Generated("00ce945628b09c26d12598fc7bafdda3")
const (
    //hex: 0x130E00
    CacheIterateRequestMessageType = 1248768
    //hex: 0x130E01
    CacheIterateResponseMessageType = 1248769
    CacheIterateRequestTableIndexFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheIterateRequestBatchFieldOffset = CacheIterateRequestTableIndexFieldOffset + bufutil.IntSizeInBytes
    CacheIterateRequestInitialFrameSize = CacheIterateRequestBatchFieldOffset + bufutil.IntSizeInBytes
    CacheIterateResponseTableIndexFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CacheIterateResponseInitialFrameSize = CacheIterateResponseTableIndexFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheIterateRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * The slot number (or index) to start the iterator
    */
tableIndex int

    /**
    * The number of items to be batched
    */
batch int
}

func CacheIterateEncodeRequest(name string, tableIndex int, batch int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.Iterate")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheIterateRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, CacheIterateRequestTableIndexFieldOffset, tableIndex)
    bufutil.EncodeInt(initialFrame.Content, CacheIterateRequestBatchFieldOffset, batch)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func CacheIterateDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheIterateRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheIterateRequestParameters)
    initialFrame := iterator.Next()
    request.tableIndex = bufutil.DecodeInt(initialFrame.Content, CacheIterateRequestTableIndexFieldOffset)
    request.batch = bufutil.DecodeInt(initialFrame.Content, CacheIterateRequestBatchFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheIterateResponseParameters struct {
    /**
    * The slot number (or index) to start the iterator
    */
tableIndex int
    /**
    * TODO DOC
    */
keys []serialization.Data
}

func CacheIterateEncodeResponse(tableIndex int , keys []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheIterateResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheIterateResponseMessageType)
    bufutil.EncodeInt(initialFrame.Content, CacheIterateResponseTableIndexFieldOffset, tableIndex)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encode(clientMessage, keys, DataCodecEncode)
    return clientMessage
}

func CacheIterateDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheIterateResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheIterateResponseParameters)
    initialFrame := iterator.Next()
    response.tableIndex = bufutil.DecodeInt(initialFrame.Content, CacheIterateResponseTableIndexFieldOffset)
    response.keys = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return response
}

