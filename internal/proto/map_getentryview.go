/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns the EntryView for the specified key.
 * This method returns a clone of original mapping, modifying the returned value does not change the actual value
 * in the map. One should put modified value back to make changes visible to all nodes.
 */
//@Generated("64c60b5ecd59f723e449e566b055b90d")
const (
    //hex: 0x011D00
    MapGetEntryViewRequestMessageType = 72960
    //hex: 0x011D01
    MapGetEntryViewResponseMessageType = 72961
    MapGetEntryViewRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapGetEntryViewRequestInitialFrameSize = MapGetEntryViewRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MapGetEntryViewResponseMaxIdleFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapGetEntryViewResponseInitialFrameSize = MapGetEntryViewResponseMaxIdleFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapGetEntryViewRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * the key of the entry.
    */
key serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64
}

func MapGetEntryViewEncodeRequest(name string, key serialization.Data, threadId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.GetEntryView")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapGetEntryViewRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapGetEntryViewRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, key)
    return clientMessage
}




/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapGetEntryViewResponseParameters struct {
    /**
    * TODO DOC
    */
/* @Nullable */ response SimpleEntryView
    /**
    * TODO DOC
    */
maxIdle int64
}



func MapGetEntryViewDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapGetEntryViewResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapGetEntryViewResponseParameters)
    initialFrame := iterator.Next()
    response.maxIdle = bufutil.DecodeLong(initialFrame.Content, MapGetEntryViewResponseMaxIdleFieldOffset)
    response.response = bufutil.DecodeNullable(iterator, bufutil.SimpleEntryViewCodecDecode) 
    return response
}

