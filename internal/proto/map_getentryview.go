
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns the EntryView for the specified key.
 * This method returns a clone of original mapping, modifying the returned value does not change the actual value
 * in the map. One should put modified value back to make changes visible to all nodes.
 */
//@Generated("a53c2ba32be57b54253208f678ea5d2a")
const (
    //hex: 0x011D00
    MapGetEntryViewRequestMessageType = 72960
    //hex: 0x011D01
    MapGetEntryViewResponseMessageType = 72961
    MapGetEntryViewRequestThreadIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    MapGetEntryViewRequestInitialFrameSize = MapGetEntryViewRequestThreadIdFieldOffset + LongSizeInBytes
    MapGetEntryViewResponseMaxIdleFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    MapGetEntryViewResponseInitialFrameSize = MapGetEntryViewResponseMaxIdleFieldOffset + LongSizeInBytes

)

func MapGetEntryViewEncodeRequest(name string, key serialization.Data, threadId int64) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Map.GetEntryView")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapGetEntryViewRequestMessageType)
    EncodeLong(initialFrame.Content, MapGetEntryViewRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, key)

    return clientMessage
}


func MapGetEntryViewDecodeResponse(clientMessage *ClientMessage) func() (/*** Entry view of the specified key.*//* @Nullable */response SimpleEntryView, /*** Last set max idle in millis.*/maxIdle int64) {
    return func() (/*** Entry view of the specified key.*//* @Nullable */response SimpleEntryView, /*** Last set max idle in millis.*/maxIdle int64) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        maxIdle = DecodeLong(initialFrame.Content, MapGetEntryViewResponseMaxIdleFieldOffset)
        response =          DecodeNullable(iterator, SimpleEntryViewCodecDecode).(SimpleEntryView) // 1  
        return
    }
}

