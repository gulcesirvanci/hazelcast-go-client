/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.
 * Invocation has no additional effect if already shut down.
 */
//@Generated("3cb2b459025d0afb2b4cfcdd15a3494e")
const (
    //hex: 0x1A0100
    ScheduledExecutorShutdownRequestMessageType = 1704192
    //hex: 0x1A0101
    ScheduledExecutorShutdownResponseMessageType = 1704193
    ScheduledExecutorShutdownRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ScheduledExecutorShutdownResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ScheduledExecutorShutdownRequestParameters struct {

    /**
    * Name of the scheduler.
    */
schedulerName string

    /**
    * The cluster member where the shutdown for this scheduler will be sent.
    */
address Address
}

func ScheduledExecutorShutdownEncodeRequest(schedulerName string, address Address) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("ScheduledExecutor.Shutdown")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ScheduledExecutorShutdownRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, schedulerName)
    AddressCodec.encode(clientMessage, address)
    return clientMessage
}

func ScheduledExecutorShutdownDecodeRequest(clientMessage *bufutil.ClientMessagex) *ScheduledExecutorShutdownRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ScheduledExecutorShutdownRequestParameters)
    //empty initial frame
    iterator.Next()
    request.schedulerName = StringCodec.decode(iterator)
    request.address = AddressCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ScheduledExecutorShutdownResponseParameters struct {
}

func ScheduledExecutorShutdownEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ScheduledExecutorShutdownResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ScheduledExecutorShutdownResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ScheduledExecutorShutdownDecodeResponse(clientMessage *bufutil.ClientMessagex) *ScheduledExecutorShutdownResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ScheduledExecutorShutdownResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

