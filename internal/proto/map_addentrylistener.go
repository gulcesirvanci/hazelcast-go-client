/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a MapListener for this map. To receive an event, you should implement a corresponding MapListener
 * sub-interface for that event.
 */
//@Generated("db0a595b131d9dedbcd1a93b626cbd18")
const (
    //hex: 0x011900
    MapAddEntryListenerRequestMessageType = 71936
    //hex: 0x011901
    MapAddEntryListenerResponseMessageType = 71937
    MapAddEntryListenerRequestIncludeValueFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerRequestListenerFlagsFieldOffset = MapAddEntryListenerRequestIncludeValueFieldOffset + bufutil.BooleanSizeInBytes
    MapAddEntryListenerRequestLocalOnlyFieldOffset = MapAddEntryListenerRequestListenerFlagsFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerRequestInitialFrameSize = MapAddEntryListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    MapAddEntryListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerResponseInitialFrameSize = MapAddEntryListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    MapAddEntryListenerEventEntryEventTypeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerEventEntryUuidFieldOffset = MapAddEntryListenerEventEntryEventTypeFieldOffset + bufutil.IntSizeInBytes
    MapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset = MapAddEntryListenerEventEntryUuidFieldOffset + bufutil.UUIDSizeInBytes
    MapAddEntryListenerEventEntryInitialFrameSize = MapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x011902
    MapAddEntryListenerEventEntryMessageType = 71938


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddEntryListenerRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * true if EntryEvent should contain the value.
    */
includeValue bool

    /**
    * flags of enabled listeners.
    */
listenerFlags int32

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func MapAddEntryListenerEncodeRequest(name string, includeValue bool, listenerFlags int32, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.AddEntryListener")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddEntryListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, MapAddEntryListenerRequestIncludeValueFieldOffset, includeValue)
    bufutil.EncodeInt(initialFrame.Content, MapAddEntryListenerRequestListenerFlagsFieldOffset, listenerFlags)
    bufutil.EncodeBoolean(initialFrame.Content, MapAddEntryListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    return clientMessage
}




/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddEntryListenerResponseParameters struct {
    /**
    * A unique string which is used as a key to remove the listener.
    */
response string
}



func MapAddEntryListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapAddEntryListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapAddEntryListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, MapAddEntryListenerResponseResponseFieldOffset)
    return response
}


    type MapAddEntryListenerAbstractEventItemFunc func(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int32, uuid string, numberOfAffectedEntries int32)

func MapAddEntryListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem MapAddEntryListenerAbstractEventItemFunc){
    messageType := clientMessage.GetMessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == MapAddEntryListenerEventEntryMessageType {
        initialFrame := iterator.Next()
        eventType := bufutil.DecodeInt(initialFrame.Content, MapAddEntryListenerEventEntryEventTypeFieldOffset)
        uuid := bufutil.DecodeUUID(initialFrame.Content, MapAddEntryListenerEventEntryUuidFieldOffset)
        numberOfAffectedEntries := bufutil.DecodeInt(initialFrame.Content, MapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset)
        key := bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode) .(serialization.Data)
        value := bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode) .(serialization.Data)
        oldValue := bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode) .(serialization.Data)
        mergingValue := bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode) .(serialization.Data)
        handleEventItem(key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
        }

