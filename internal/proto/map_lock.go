
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Acquires the lock for the specified lease time.After lease time, lock will be released.If the lock is not
 * available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock
 * has been acquired.
 * Scope of the lock is this map only. Acquired lock is only for the key in this map. Locks are re-entrant,
 * so if the key is locked N times then it should be unlocked N times before another thread can acquire it.
 */
//@Generated("98b6769992a329b1b5da321a058245c9")
const (
    //hex: 0x011000
    MapLockRequestMessageType = 69632
    //hex: 0x011001
    MapLockResponseMessageType = 69633
    MapLockRequestThreadIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    MapLockRequestTtlFieldOffset = MapLockRequestThreadIdFieldOffset + LongSizeInBytes
    MapLockRequestReferenceIdFieldOffset = MapLockRequestTtlFieldOffset + LongSizeInBytes
    MapLockRequestInitialFrameSize = MapLockRequestReferenceIdFieldOffset + LongSizeInBytes
    MapLockResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func MapLockEncodeRequest(name string, key serialization.Data, threadId int64, ttl int64, referenceId int64) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Map.Lock")
	initialFrame := &Frame{Content: make([]byte, MapLockResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapLockRequestMessageType)
    EncodeLong(initialFrame.Content, MapLockRequestThreadIdFieldOffset, threadId)
    EncodeLong(initialFrame.Content, MapLockRequestTtlFieldOffset, ttl)
    EncodeLong(initialFrame.Content, MapLockRequestReferenceIdFieldOffset, referenceId)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, key)

    return clientMessage
}


func MapLockDecodeResponse(clientMessage *ClientMessage) func() () {
    return func() () {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        return
    }
}

