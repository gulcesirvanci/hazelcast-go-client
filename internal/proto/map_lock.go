/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Acquires the lock for the specified lease time.After lease time, lock will be released.If the lock is not
 * available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock
 * has been acquired.
 * Scope of the lock is this map only. Acquired lock is only for the key in this map. Locks are re-entrant,
 * so if the key is locked N times then it should be unlocked N times before another thread can acquire it.
 */
//@Generated("a17dae4190a18c1c3ef33242eb9a01ae")
const (
    //hex: 0x011000
    MapLockRequestMessageType = 69632
    //hex: 0x011001
    MapLockResponseMessageType = 69633
    MapLockRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapLockRequestTtlFieldOffset = MapLockRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MapLockRequestReferenceIdFieldOffset = MapLockRequestTtlFieldOffset + bufutil.LongSizeInBytes
    MapLockRequestInitialFrameSize = MapLockRequestReferenceIdFieldOffset + bufutil.LongSizeInBytes
    MapLockResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapLockRequestParameters struct {

    /**
    * Name of the map.
    */
name string

    /**
    * Key for the map entry.
    */
key serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * The duration in milliseconds after which this entry shall be deleted. O means infinite.
    */
ttl int64

    /**
    * The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.
    */
referenceId int64
}

func MapLockEncodeRequest(name string, key serialization.Data, threadId int64, ttl int64, referenceId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = true
    clientMessage.SetAcquiresResource(true)
    clientMessage.SetOperationName("Map.Lock")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapLockRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapLockRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeLong(initialFrame.Content, MapLockRequestTtlFieldOffset, ttl)
    bufutil.EncodeLong(initialFrame.Content, MapLockRequestReferenceIdFieldOffset, referenceId)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    bufutil.DataCodecEncode(clientMessage, key)
    return clientMessage
}




/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapLockResponseParameters struct {
}



func MapLockDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapLockResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapLockResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

