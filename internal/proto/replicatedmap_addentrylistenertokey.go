
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
    "github.com/hazelcast/hazelcast-go-client/core"







)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds the specified entry listener for the specified key. The listener will be notified for all
 * add/remove/update/evict events of the specified key only.
 */
//@Generated("55e2c56473383233da6d53582ca797b7")
const (
    //hex: 0x0D0C00
    ReplicatedMapAddEntryListenerToKeyRequestMessageType = 855040
    //hex: 0x0D0C01
    ReplicatedMapAddEntryListenerToKeyResponseMessageType = 855041
    ReplicatedMapAddEntryListenerToKeyRequestLocalOnlyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ReplicatedMapAddEntryListenerToKeyRequestInitialFrameSize = ReplicatedMapAddEntryListenerToKeyRequestLocalOnlyFieldOffset + BooleanSizeInBytes
    ReplicatedMapAddEntryListenerToKeyResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    ReplicatedMapAddEntryListenerToKeyResponseInitialFrameSize = ReplicatedMapAddEntryListenerToKeyResponseResponseFieldOffset + UUIDSizeInBytes
    ReplicatedMapAddEntryListenerToKeyEventEntryEventTypeFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ReplicatedMapAddEntryListenerToKeyEventEntryUuidFieldOffset = ReplicatedMapAddEntryListenerToKeyEventEntryEventTypeFieldOffset + IntSizeInBytes
    ReplicatedMapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset = ReplicatedMapAddEntryListenerToKeyEventEntryUuidFieldOffset + UUIDSizeInBytes
    ReplicatedMapAddEntryListenerToKeyEventEntryInitialFrameSize = ReplicatedMapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset + IntSizeInBytes
    //hex: 0x0D0C02
    ReplicatedMapAddEntryListenerToKeyEventEntryMessageType = 855042


)

func ReplicatedMapAddEntryListenerToKeyEncodeRequest(name string, key serialization.Data, localOnly bool) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("ReplicatedMap.AddEntryListenerToKey")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ReplicatedMapAddEntryListenerToKeyRequestMessageType)
    EncodeBoolean(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, key)

    return clientMessage
}


func ReplicatedMapAddEntryListenerToKeyDecodeResponse(clientMessage *ClientMessage) func() (/*** A unique string  which is used as a key to remove the listener.*/response core.Uuid) {
    return func() (/*** A unique string  which is used as a key to remove the listener.*/response core.Uuid) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeUUID(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyResponseResponseFieldOffset)
        return
    }
}


type ReplicatedMapAddEntryListenerToKeyHandleEntryFunc func(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int32, uuid core.Uuid, numberOfAffectedEntries int32)

func ReplicatedMapAddEntryListenerToKeyHandle(clientMessage *ClientMessage, handleEntry ReplicatedMapAddEntryListenerToKeyHandleEntryFunc){
    messageType := clientMessage.MessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == ReplicatedMapAddEntryListenerToKeyEventEntryMessageType {
        initialFrame := iterator.Next()
        eventType := DecodeInt(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyEventEntryEventTypeFieldOffset)
        uuid := DecodeUUID(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyEventEntryUuidFieldOffset)
        numberOfAffectedEntries := DecodeInt(initialFrame.Content, ReplicatedMapAddEntryListenerToKeyEventEntryNumberOfAffectedEntriesFieldOffset)
        key := DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  

        value := DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  

        oldValue := DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  

        mergingValue := DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  

        handleEntry(key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
    }

