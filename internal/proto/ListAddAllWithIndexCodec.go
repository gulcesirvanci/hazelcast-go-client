/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Inserts all of the elements in the specified collection into this list at the specified position (optional operation).
 * Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices).
 * The new elements will appear in this list in the order that they are returned by the specified collection's iterator.
 * The behavior of this operation is undefined if the specified collection is modified while the operation is in progress.
 * (Note that this will occur if the specified collection is this list, and it's nonempty.)
 */
//@Generated("0e16b473204fc4b189d9f58dd950195b")
const (
    //hex: 0x050E00
    ListAddAllWithIndexRequestMessageType = 331264
    //hex: 0x050E01
    ListAddAllWithIndexResponseMessageType = 331265
    ListAddAllWithIndexRequestIndexFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ListAddAllWithIndexRequestInitialFrameSize = ListAddAllWithIndexRequestIndexFieldOffset + bufutil.IntSizeInBytes
    ListAddAllWithIndexResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ListAddAllWithIndexResponseInitialFrameSize = ListAddAllWithIndexResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ListAddAllWithIndexRequestParameters struct {

    /**
    * Name of the List
    */
name string

    /**
    * index at which to insert the first element from the specified collection.
    */
index int

    /**
    * The list of value to insert into the list.
    */
valueList []serialization.Data
}

func ListAddAllWithIndexEncodeRequest(name string, index int, valueList []serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("List.AddAllWithIndex")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ListAddAllWithIndexRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, ListAddAllWithIndexRequestIndexFieldOffset, index)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encode(clientMessage, valueList, DataCodecEncode)
    return clientMessage
}

func ListAddAllWithIndexDecodeRequest(clientMessage *bufutil.ClientMessagex) *ListAddAllWithIndexRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ListAddAllWithIndexRequestParameters)
    initialFrame := iterator.Next()
    request.index = bufutil.DecodeInt(initialFrame.Content, ListAddAllWithIndexRequestIndexFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.valueList = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ListAddAllWithIndexResponseParameters struct {
    /**
    * True if this list changed as a result of the call, false otherwise.
    */
response bool
}

func ListAddAllWithIndexEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ListAddAllWithIndexResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ListAddAllWithIndexResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, ListAddAllWithIndexResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ListAddAllWithIndexDecodeResponse(clientMessage *bufutil.ClientMessagex) *ListAddAllWithIndexResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ListAddAllWithIndexResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, ListAddAllWithIndexResponseResponseFieldOffset)
    return response
}

