/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new CRDT PN counter configuration to a running cluster.
 * If a PN counter configuration with the given {@code name} already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("ac077081d4da2f9db31c691e376a829a")
const (
    //hex: 0x1B1000
    DynamicConfigAddPNCounterConfigRequestMessageType = 1773568
    //hex: 0x1B1001
    DynamicConfigAddPNCounterConfigResponseMessageType = 1773569
    DynamicConfigAddPNCounterConfigRequestReplicaCountFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddPNCounterConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddPNCounterConfigRequestReplicaCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddPNCounterConfigRequestInitialFrameSize = DynamicConfigAddPNCounterConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddPNCounterConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddPNCounterConfigRequestParameters struct {

    /**
    * name of the CRDT PN counter configuration
    */
name string

    /**
    * number of replicas on which the CRDT state is kept
    */
replicaCount int

    /**
    * set to {@code true} to enable statistics on this multimap configuration
    */
statisticsEnabled bool

    /**
    * name of an existing configured split brain protection to be used to determine the minimum number of members
    * required in the cluster for the lock to remain functional. When {@code null}, split brain protection does not
    * apply to this lock configuration's operations.
    */
/* @Nullable */ splitBrainProtectionName string
}

func DynamicConfigAddPNCounterConfigEncodeRequest(name string, replicaCount int, statisticsEnabled bool, /* @Nullable */ splitBrainProtectionName string) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddPNCounterConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddPNCounterConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddPNCounterConfigRequestReplicaCountFieldOffset, replicaCount)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddPNCounterConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    CodecUtil.encodeNullable(clientMessage, splitBrainProtectionName, StringCodecEncode)
    return clientMessage
}

func DynamicConfigAddPNCounterConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddPNCounterConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddPNCounterConfigRequestParameters)
    initialFrame := iterator.Next()
    request.replicaCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddPNCounterConfigRequestReplicaCountFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddPNCounterConfigRequestStatisticsEnabledFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.splitBrainProtectionName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddPNCounterConfigResponseParameters struct {
}

func DynamicConfigAddPNCounterConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddPNCounterConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddPNCounterConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddPNCounterConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddPNCounterConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddPNCounterConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

