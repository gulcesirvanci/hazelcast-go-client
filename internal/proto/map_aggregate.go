
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Applies the aggregation logic on all map entries and returns the result
 */
//@Generated("8a0b2d09734155bad6c2e1ebf34c00d0")
const (
    //hex: 0x013900
    MapAggregateRequestMessageType = 80128
    //hex: 0x013901
    MapAggregateResponseMessageType = 80129
    MapAggregateRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    MapAggregateResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func MapAggregateEncodeRequest(name string, aggregator serialization.Data) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Map.Aggregate")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapAggregateRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, aggregator)

    return clientMessage
}


func MapAggregateDecodeResponse(clientMessage *ClientMessage) func() ( /*** the aggregation result*//* @Nullable */response serialization.Data) {
    return func() (/*** the aggregation result*//* @Nullable */response serialization.Data) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        response = DecodeNullable(iterator, DataCodecDecode).(serialization.Data)
        return
    }
}

