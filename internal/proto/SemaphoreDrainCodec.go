/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Acquires all available permits at once and returns immediately.
 */
//@Generated("652a8245392179d41261bd7a2131ce11")
const (
    //hex: 0x0C0400
    SemaphoreDrainRequestMessageType = 787456
    //hex: 0x0C0401
    SemaphoreDrainResponseMessageType = 787457
    SemaphoreDrainRequestSessionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SemaphoreDrainRequestThreadIdFieldOffset = SemaphoreDrainRequestSessionIdFieldOffset + bufutil.LongSizeInBytes
    SemaphoreDrainRequestInvocationUidFieldOffset = SemaphoreDrainRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    SemaphoreDrainRequestInitialFrameSize = SemaphoreDrainRequestInvocationUidFieldOffset + bufutil.UUIDSizeInBytes
    SemaphoreDrainResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    SemaphoreDrainResponseInitialFrameSize = SemaphoreDrainResponseResponseFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SemaphoreDrainRequestParameters struct {

    /**
    * CP group id of this ISemaphore instance
    */
groupId RaftGroupId

    /**
    * Name of this ISemaphore instance
    */
name string

    /**
    * Session ID of the caller
    */
sessionId int64

    /**
    * ID of the caller thread
    */
threadId int64

    /**
    * UID of this invocation
    */
invocationUid UUID
}

func SemaphoreDrainEncodeRequest(groupId RaftGroupId, name string, sessionId int64, threadId int64, invocationUid UUID) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Semaphore.Drain")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SemaphoreDrainRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, SemaphoreDrainRequestSessionIdFieldOffset, sessionId)
    bufutil.EncodeLong(initialFrame.Content, SemaphoreDrainRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeUUID(initialFrame.Content, SemaphoreDrainRequestInvocationUidFieldOffset, invocationUid)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func SemaphoreDrainDecodeRequest(clientMessage *bufutil.ClientMessagex) *SemaphoreDrainRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(SemaphoreDrainRequestParameters)
    initialFrame := iterator.Next()
    request.sessionId = bufutil.DecodeLong(initialFrame.Content, SemaphoreDrainRequestSessionIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, SemaphoreDrainRequestThreadIdFieldOffset)
    request.invocationUid = bufutil.DecodeUUID(initialFrame.Content, SemaphoreDrainRequestInvocationUidFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SemaphoreDrainResponseParameters struct {
    /**
    * number of acquired permits
    */
response int
}

func SemaphoreDrainEncodeResponse(response int ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, SemaphoreDrainResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SemaphoreDrainResponseMessageType)
    bufutil.EncodeInt(initialFrame.Content, SemaphoreDrainResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func SemaphoreDrainDecodeResponse(clientMessage *bufutil.ClientMessagex) *SemaphoreDrainResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(SemaphoreDrainResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeInt(initialFrame.Content, SemaphoreDrainResponseResponseFieldOffset)
    return response
}

