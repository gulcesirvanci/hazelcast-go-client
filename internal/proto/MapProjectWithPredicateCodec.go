/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Applies the projection logic on map entries filtered with the Predicate and returns the result
 */
//@Generated("d46c72894f73523789c6164d30dc30c6")
const (
    //hex: 0x013D00
    MapProjectWithPredicateRequestMessageType = 81152
    //hex: 0x013D01
    MapProjectWithPredicateResponseMessageType = 81153
    MapProjectWithPredicateRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapProjectWithPredicateResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapProjectWithPredicateRequestParameters struct {

    /**
    * Name of the map.
    */
name string

    /**
    * projection to transform the entries with. May return null.
    */
projection serialization.Data

    /**
    * predicate to filter the entries with
    */
predicate serialization.Data
}

func MapProjectWithPredicateEncodeRequest(name string, projection serialization.Data, predicate serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.ProjectWithPredicate")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapProjectWithPredicateRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, projection)
    DataCodec.encode(clientMessage, predicate)
    return clientMessage
}

func MapProjectWithPredicateDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapProjectWithPredicateRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapProjectWithPredicateRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    request.projection = DataCodec.decode(iterator)
    request.predicate = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapProjectWithPredicateResponseParameters struct {
    /**
    * the resulted collection upon transformation to the type of the projection
    */
response []serialization.Data
}

func MapProjectWithPredicateEncodeResponse(response Collection<com.hazelcast.nio.serialization.Data> ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapProjectWithPredicateResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapProjectWithPredicateResponseMessageType)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encodeContainsNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func MapProjectWithPredicateDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapProjectWithPredicateResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapProjectWithPredicateResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = ListMultiFrameCodec.decodeContainsNullable(iterator, DataCodecDecode)
    return response
}

