
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns the entries for the given keys. If any keys are not present in the Map, it will call loadAll The returned
 * map is NOT backed by the original map, so changes to the original map are NOT reflected in the returned map, and vice-versa.
 * Please note that all the keys in the request should belong to the partition id to which this request is being sent, all keys
 * matching to a different partition id shall be ignored. The API implementation using this request may need to send multiple
 * of these request messages for filling a request for a key set if the keys belong to different partitions.
 */
//@Generated("9c85f978065e7b313e35008e4cada72d")
const (
    //hex: 0x012300
    MapGetAllRequestMessageType = 74496
    //hex: 0x012301
    MapGetAllResponseMessageType = 74497
    MapGetAllRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    MapGetAllResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func MapGetAllEncodeRequest(name string, keys []serialization.Data) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Map.GetAll")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapGetAllRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    clientMessage.Add(BeginFrame)
        for i := 0; i < len(keys) ; i++ {
            DataCodecEncode(clientMessage, keys[i]) //check line
        }
        clientMessage.Add(EndFrame)



    return clientMessage
}


func MapGetAllDecodeResponse(clientMessage *ClientMessage) func() (/*** values for the provided keys.*/response []*Pair) {
    return func() (/*** values for the provided keys.*/response []*Pair) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        var result []*Pair
        //begin frame, list
        iterator.Next()
        for !NextFrameIsDataStructureEndFrame(iterator) {
            i := 0
            key := DataCodecDecode(iterator)
            value := DataCodecDecode(iterator)
            result[i] = NewPair(key,value)
            i++
        }

        //end frame, list
        iterator.Next()
        response = result //2


        return
    }
}

