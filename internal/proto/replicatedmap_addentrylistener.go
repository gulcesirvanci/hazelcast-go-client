
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/core"
    "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds an entry listener for this map. The listener will be notified for all map add/remove/update/evict events.
 */
//@Generated("dffc586e459d3a9f1eef5c15aa3d473f")
const (
    //hex: 0x0D0D00
    ReplicatedMapAddEntryListenerRequestMessageType = 855296
    //hex: 0x0D0D01
    ReplicatedMapAddEntryListenerResponseMessageType = 855297
    ReplicatedMapAddEntryListenerRequestLocalOnlyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ReplicatedMapAddEntryListenerRequestInitialFrameSize = ReplicatedMapAddEntryListenerRequestLocalOnlyFieldOffset + BooleanSizeInBytes
    ReplicatedMapAddEntryListenerResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    ReplicatedMapAddEntryListenerResponseInitialFrameSize = ReplicatedMapAddEntryListenerResponseResponseFieldOffset + UUIDSizeInBytes
    ReplicatedMapAddEntryListenerEventEntryEventTypeFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ReplicatedMapAddEntryListenerEventEntryUuidFieldOffset = ReplicatedMapAddEntryListenerEventEntryEventTypeFieldOffset + IntSizeInBytes
    ReplicatedMapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset = ReplicatedMapAddEntryListenerEventEntryUuidFieldOffset + UUIDSizeInBytes
    ReplicatedMapAddEntryListenerEventEntryInitialFrameSize = ReplicatedMapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset + IntSizeInBytes
    //hex: 0x0D0D02
    ReplicatedMapAddEntryListenerEventEntryMessageType = 855298


)

func ReplicatedMapAddEntryListenerEncodeRequest(name string, localOnly bool) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("ReplicatedMap.AddEntryListener")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ReplicatedMapAddEntryListenerRequestMessageType)
    EncodeBoolean(initialFrame.Content, ReplicatedMapAddEntryListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func ReplicatedMapAddEntryListenerDecodeResponse(clientMessage *ClientMessage) func() ( /*** A unique string  which is used as a key to remove the listener.*/response core.Uuid) {
    return func() (/*** A unique string  which is used as a key to remove the listener.*/response core.Uuid) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeUUID(initialFrame.Content, ReplicatedMapAddEntryListenerResponseResponseFieldOffset)
        return
    }
}


type ReplicatedMapAddEntryListenerHandleEntryFunc func(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int32, uuid core.Uuid, numberOfAffectedEntries int32)

func ReplicatedMapAddEntryListenerHandle(clientMessage *ClientMessage, handleEntry ReplicatedMapAddEntryListenerHandleEntryFunc){
    messageType := clientMessage.MessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == ReplicatedMapAddEntryListenerEventEntryMessageType {
        initialFrame := iterator.Next()
        eventType := DecodeInt(initialFrame.Content, ReplicatedMapAddEntryListenerEventEntryEventTypeFieldOffset)
        uuid := DecodeUUID(initialFrame.Content, ReplicatedMapAddEntryListenerEventEntryUuidFieldOffset)
        numberOfAffectedEntries := DecodeInt(initialFrame.Content, ReplicatedMapAddEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset)
        key := DecodeNullable(iterator, DataCodecDecode).(serialization.Data)

        value := DecodeNullable(iterator, DataCodecDecode).(serialization.Data)

        oldValue := DecodeNullable(iterator, DataCodecDecode).(serialization.Data)

        mergingValue := DecodeNullable(iterator, DataCodecDecode).(serialization.Data)

        handleEntry(key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
    }

