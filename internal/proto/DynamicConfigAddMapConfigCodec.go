/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new map configuration to a running cluster.
 * If a map configuration with the given {@code name} already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("f1ea2d77487ed116b816afd40d1ebc0e")
const (
    //hex: 0x1B0C00
    DynamicConfigAddMapConfigRequestMessageType = 1772544
    //hex: 0x1B0C01
    DynamicConfigAddMapConfigResponseMessageType = 1772545
    DynamicConfigAddMapConfigRequestBackupCountFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMapConfigRequestAsyncBackupCountFieldOffset = DynamicConfigAddMapConfigRequestBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMapConfigRequestTimeToLiveSecondsFieldOffset = DynamicConfigAddMapConfigRequestAsyncBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMapConfigRequestMaxIdleSecondsFieldOffset = DynamicConfigAddMapConfigRequestTimeToLiveSecondsFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMapConfigRequestReadBackupDataFieldOffset = DynamicConfigAddMapConfigRequestMaxIdleSecondsFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMapConfigRequestMergeBatchSizeFieldOffset = DynamicConfigAddMapConfigRequestReadBackupDataFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddMapConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddMapConfigRequestMergeBatchSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMapConfigRequestMetadataPolicyFieldOffset = DynamicConfigAddMapConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddMapConfigRequestInitialFrameSize = DynamicConfigAddMapConfigRequestMetadataPolicyFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddMapConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddMapConfigRequestParameters struct {

    /**
    * name of the map
    */
name string

    /**
    * number of synchronous backups
    */
backupCount int

    /**
    * number of asynchronous backups
    */
asyncBackupCount int

    /**
    * maximum number of seconds for each entry to stay in the map.
    */
timeToLiveSeconds int

    /**
    * maximum number of seconds for each entry to stay idle in the map
    */
maxIdleSeconds int

    /**
    * map eviction configuration
    */
/* @Nullable */ evictionConfig EvictionConfigHolder

    /**
    * {@code true} to enable reading local backup entries, {@code false} otherwise
    */
readBackupData bool

    /**
    * control caching of de-serialized values. Valid values are {@code NEVER}
    * (Never cache de-serialized object), {@code INDEX_ONLY} (Cache values only
    * when they are inserted into an index) and {@code ALWAYS} (Always cache
    * de-serialized values
    */
cacheDeserializedValues string

    /**
    * class name of a class implementing
    * {@link com.hazelcast.spi.merge.SplitBrainMergePolicy} to merge entries
    * while recovering from a split brain
    */
mergePolicy string

    /**
    * number of entries to be sent in a merge operation
    */
mergeBatchSize int

    /**
    * data type used to store entries. Valid values are {@code BINARY},
    * {@code OBJECT} and {@code NATIVE}.
    */
inMemoryFormat string

    /**
    * entry listener configurations
    */
/* @Nullable */ listenerConfigs []]ListenerConfigHolder

    /**
    * partition lost listener configurations
    */
/* @Nullable */ partitionLostListenerConfigs []]ListenerConfigHolder

    /**
    * {@code true} to enable gathering of statistics, otherwise {@code false}
    */
statisticsEnabled bool

    /**
    * name of an existing configured split brain protection to be used to determine the minimum
    * number of members required in the cluster for the map to remain functional.
    * When {@code null}, split brain protection does not apply to this map's operations.
    */
/* @Nullable */ splitBrainProtectionName string

    /**
    * configuration of backing map store or {@code null} for none
    */
/* @Nullable */ mapStoreConfig MapStoreConfigHolder

    /**
    * configuration of near cache or {@code null} for none
    */
/* @Nullable */ nearCacheConfig NearCacheConfigHolder

    /**
    * reference to an existing WAN replication configuration
    */
/* @Nullable */ wanReplicationRef WanReplicationRef

    /**
    * index configurations
    */
/* @Nullable */ indexConfigs []IndexConfig

    /**
    * map attributes
    */
/* @Nullable */ attributeConfigs []AttributeConfig

    /**
    * configurations for query caches on this map
    */
/* @Nullable */ queryCacheConfigs []QueryCacheConfigHolder

    /**
    * name of class implementing {@code com.hazelcast.core.PartitioningStrategy}
    * or {@code null}
    */
/* @Nullable */ partitioningStrategyClassName string

    /**
    * a serialized instance of a partitioning strategy
    */
/* @Nullable */ partitioningStrategyImplementation serialization.Data

    /**
    * hot restart configuration
    */
/* @Nullable */ hotRestartConfig HotRestartConfig

    /**
    * event journal configuration
    */
/* @Nullable */ eventJournalConfig EventJournalConfig

    /**
    * merkle tree configuration
    */
/* @Nullable */ merkleTreeConfig MerkleTreeConfig

    /**
    * metadata policy configuration for the supported data types. Valid values
    * are {@code CREATE_ON_UPDATE} and {@code OFF}
    */
metadataPolicy int
}

func DynamicConfigAddMapConfigEncodeRequest(name string, backupCount int, asyncBackupCount int, timeToLiveSeconds int, maxIdleSeconds int, /* @Nullable */ evictionConfig EvictionConfigHolder, readBackupData bool, cacheDeserializedValues string, mergePolicy string, mergeBatchSize int, inMemoryFormat string, /* @Nullable */ listenerConfigs Collection<ListenerConfigHolder>, /* @Nullable */ partitionLostListenerConfigs Collection<ListenerConfigHolder>, statisticsEnabled bool, /* @Nullable */ splitBrainProtectionName string, /* @Nullable */ mapStoreConfig MapStoreConfigHolder, /* @Nullable */ nearCacheConfig NearCacheConfigHolder, /* @Nullable */ wanReplicationRef WanReplicationRef, /* @Nullable */ indexConfigs Collection<IndexConfig>, /* @Nullable */ attributeConfigs Collection<AttributeConfig>, /* @Nullable */ queryCacheConfigs Collection<QueryCacheConfigHolder>, /* @Nullable */ partitioningStrategyClassName string, /* @Nullable */ partitioningStrategyImplementation serialization.Data, /* @Nullable */ hotRestartConfig HotRestartConfig, /* @Nullable */ eventJournalConfig EventJournalConfig, /* @Nullable */ merkleTreeConfig MerkleTreeConfig, metadataPolicy int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddMapConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddMapConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestBackupCountFieldOffset, backupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestAsyncBackupCountFieldOffset, asyncBackupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestTimeToLiveSecondsFieldOffset, timeToLiveSeconds)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestMaxIdleSecondsFieldOffset, maxIdleSeconds)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddMapConfigRequestReadBackupDataFieldOffset, readBackupData)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestMergeBatchSizeFieldOffset, mergeBatchSize)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddMapConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestMetadataPolicyFieldOffset, metadataPolicy)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    CodecUtil.encodeNullable(clientMessage, evictionConfig, EvictionConfigHolderCodecEncode)
    StringCodec.encode(clientMessage, cacheDeserializedValues)
    StringCodec.encode(clientMessage, mergePolicy)
    StringCodec.encode(clientMessage, inMemoryFormat)
    ListMultiFrameCodec.encodeNullable(clientMessage, listenerConfigs, ListenerConfigHolderCodecEncode)
    ListMultiFrameCodec.encodeNullable(clientMessage, partitionLostListenerConfigs, ListenerConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, splitBrainProtectionName, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, mapStoreConfig, MapStoreConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, nearCacheConfig, NearCacheConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, wanReplicationRef, WanReplicationRefCodecEncode)
    ListMultiFrameCodec.encodeNullable(clientMessage, indexConfigs, IndexConfigCodecEncode)
    ListMultiFrameCodec.encodeNullable(clientMessage, attributeConfigs, AttributeConfigCodecEncode)
    ListMultiFrameCodec.encodeNullable(clientMessage, queryCacheConfigs, QueryCacheConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, partitioningStrategyClassName, StringCodecEncode)
    CodecUtil.encodeNullable(clientMessage, partitioningStrategyImplementation, DataCodecEncode)
    CodecUtil.encodeNullable(clientMessage, hotRestartConfig, HotRestartConfigCodecEncode)
    CodecUtil.encodeNullable(clientMessage, eventJournalConfig, EventJournalConfigCodecEncode)
    CodecUtil.encodeNullable(clientMessage, merkleTreeConfig, MerkleTreeConfigCodecEncode)
    return clientMessage
}

func DynamicConfigAddMapConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddMapConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddMapConfigRequestParameters)
    initialFrame := iterator.Next()
    request.backupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestBackupCountFieldOffset)
    request.asyncBackupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestAsyncBackupCountFieldOffset)
    request.timeToLiveSeconds = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestTimeToLiveSecondsFieldOffset)
    request.maxIdleSeconds = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestMaxIdleSecondsFieldOffset)
    request.readBackupData = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddMapConfigRequestReadBackupDataFieldOffset)
    request.mergeBatchSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestMergeBatchSizeFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddMapConfigRequestStatisticsEnabledFieldOffset)
    request.metadataPolicy = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddMapConfigRequestMetadataPolicyFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.evictionConfig = CodecUtil.decodeNullable(iterator, EvictionConfigHolderCodecDecode) 
    request.cacheDeserializedValues = StringCodec.decode(iterator)
    request.mergePolicy = StringCodec.decode(iterator)
    request.inMemoryFormat = StringCodec.decode(iterator)
    request.listenerConfigs = ListMultiFrameCodec.decodeNullable(iterator, ListenerConfigHolderCodecDecode)
    request.partitionLostListenerConfigs = ListMultiFrameCodec.decodeNullable(iterator, ListenerConfigHolderCodecDecode)
    request.splitBrainProtectionName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.mapStoreConfig = CodecUtil.decodeNullable(iterator, MapStoreConfigHolderCodecDecode) 
    request.nearCacheConfig = CodecUtil.decodeNullable(iterator, NearCacheConfigHolderCodecDecode) 
    request.wanReplicationRef = CodecUtil.decodeNullable(iterator, WanReplicationRefCodecDecode) 
    request.indexConfigs = ListMultiFrameCodec.decodeNullable(iterator, IndexConfigCodecDecode)
    request.attributeConfigs = ListMultiFrameCodec.decodeNullable(iterator, AttributeConfigCodecDecode)
    request.queryCacheConfigs = ListMultiFrameCodec.decodeNullable(iterator, QueryCacheConfigHolderCodecDecode)
    request.partitioningStrategyClassName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.partitioningStrategyImplementation = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    request.hotRestartConfig = CodecUtil.decodeNullable(iterator, HotRestartConfigCodecDecode) 
    request.eventJournalConfig = CodecUtil.decodeNullable(iterator, EventJournalConfigCodecDecode) 
    request.merkleTreeConfig = CodecUtil.decodeNullable(iterator, MerkleTreeConfigCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddMapConfigResponseParameters struct {
}

func DynamicConfigAddMapConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddMapConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddMapConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddMapConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddMapConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddMapConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

