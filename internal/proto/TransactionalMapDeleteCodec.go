/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Removes the mapping for a key from this map if it is present. The map will not contain a mapping for the specified
 * key once the call returns. This method is preferred to #remove(Object) if the old value is not needed. The object
 * to be deleted will be removed from only the current transaction context until the transaction is committed.
 */
//@Generated("5454bee602ad86ac2cba62a268e075cf")
const (
    //hex: 0x0E0C00
    TransactionalMapDeleteRequestMessageType = 920576
    //hex: 0x0E0C01
    TransactionalMapDeleteResponseMessageType = 920577
    TransactionalMapDeleteRequestTxnIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TransactionalMapDeleteRequestThreadIdFieldOffset = TransactionalMapDeleteRequestTxnIdFieldOffset + bufutil.UUIDSizeInBytes
    TransactionalMapDeleteRequestInitialFrameSize = TransactionalMapDeleteRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    TransactionalMapDeleteResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapDeleteRequestParameters struct {

    /**
    * Name of the Transactional Map
    */
name string

    /**
    * ID of the this transaction operation
    */
txnId UUID

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * Remove the mapping for this key.
    */
key serialization.Data
}

func TransactionalMapDeleteEncodeRequest(name string, txnId UUID, threadId int64, key serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("TransactionalMap.Delete")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapDeleteRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, TransactionalMapDeleteRequestTxnIdFieldOffset, txnId)
    bufutil.EncodeLong(initialFrame.Content, TransactionalMapDeleteRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    return clientMessage
}

func TransactionalMapDeleteDecodeRequest(clientMessage *bufutil.ClientMessagex) *TransactionalMapDeleteRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(TransactionalMapDeleteRequestParameters)
    initialFrame := iterator.Next()
    request.txnId = bufutil.DecodeUUID(initialFrame.Content, TransactionalMapDeleteRequestTxnIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, TransactionalMapDeleteRequestThreadIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapDeleteResponseParameters struct {
}

func TransactionalMapDeleteEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, TransactionalMapDeleteResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapDeleteResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func TransactionalMapDeleteDecodeResponse(clientMessage *bufutil.ClientMessagex) *TransactionalMapDeleteResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(TransactionalMapDeleteResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

