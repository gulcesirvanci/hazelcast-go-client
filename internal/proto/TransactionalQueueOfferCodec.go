/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to
 * become available.
 */
//@Generated("8a56409efaf31498c42f2c829752819a")
const (
    //hex: 0x120100
    TransactionalQueueOfferRequestMessageType = 1179904
    //hex: 0x120101
    TransactionalQueueOfferResponseMessageType = 1179905
    TransactionalQueueOfferRequestTxnIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TransactionalQueueOfferRequestThreadIdFieldOffset = TransactionalQueueOfferRequestTxnIdFieldOffset + bufutil.UUIDSizeInBytes
    TransactionalQueueOfferRequestTimeoutFieldOffset = TransactionalQueueOfferRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    TransactionalQueueOfferRequestInitialFrameSize = TransactionalQueueOfferRequestTimeoutFieldOffset + bufutil.LongSizeInBytes
    TransactionalQueueOfferResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    TransactionalQueueOfferResponseInitialFrameSize = TransactionalQueueOfferResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalQueueOfferRequestParameters struct {

    /**
    * Name of the Transcational Queue
    */
name string

    /**
    * ID of the transaction
    */
txnId UUID

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * The element to add
    */
item serialization.Data

    /**
    * How long to wait before giving up, in milliseconds
    */
timeout int64
}

func TransactionalQueueOfferEncodeRequest(name string, txnId UUID, threadId int64, item serialization.Data, timeout int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("TransactionalQueue.Offer")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalQueueOfferRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, TransactionalQueueOfferRequestTxnIdFieldOffset, txnId)
    bufutil.EncodeLong(initialFrame.Content, TransactionalQueueOfferRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeLong(initialFrame.Content, TransactionalQueueOfferRequestTimeoutFieldOffset, timeout)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, item)
    return clientMessage
}

func TransactionalQueueOfferDecodeRequest(clientMessage *bufutil.ClientMessagex) *TransactionalQueueOfferRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(TransactionalQueueOfferRequestParameters)
    initialFrame := iterator.Next()
    request.txnId = bufutil.DecodeUUID(initialFrame.Content, TransactionalQueueOfferRequestTxnIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, TransactionalQueueOfferRequestThreadIdFieldOffset)
    request.timeout = bufutil.DecodeLong(initialFrame.Content, TransactionalQueueOfferRequestTimeoutFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.item = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalQueueOfferResponseParameters struct {
    /**
    * <tt>true</tt> if successful, or <tt>false</tt> if the specified waiting time elapses before space is available
    */
response bool
}

func TransactionalQueueOfferEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, TransactionalQueueOfferResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalQueueOfferResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, TransactionalQueueOfferResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func TransactionalQueueOfferDecodeResponse(clientMessage *bufutil.ClientMessagex) *TransactionalQueueOfferResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(TransactionalQueueOfferResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, TransactionalQueueOfferResponseResponseFieldOffset)
    return response
}

