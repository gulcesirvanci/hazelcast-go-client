/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds listener to map. This listener will be used to listen near cache invalidation events.
 */
//@Generated("c579a86b1dbc1b46544cbb6b644c7039")
const (
    //hex: 0x014100
    MapAddNearCacheInvalidationListenerRequestMessageType = 82176
    //hex: 0x014101
    MapAddNearCacheInvalidationListenerResponseMessageType = 82177
    MapAddNearCacheInvalidationListenerRequestListenerFlagsFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapAddNearCacheInvalidationListenerRequestLocalOnlyFieldOffset = MapAddNearCacheInvalidationListenerRequestListenerFlagsFieldOffset + bufutil.IntSizeInBytes
    MapAddNearCacheInvalidationListenerRequestInitialFrameSize = MapAddNearCacheInvalidationListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    MapAddNearCacheInvalidationListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapAddNearCacheInvalidationListenerResponseInitialFrameSize = MapAddNearCacheInvalidationListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    MapAddNearCacheInvalidationListenerEventIMapInvalidationSourceUuidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapAddNearCacheInvalidationListenerEventIMapInvalidationPartitionUuidFieldOffset = MapAddNearCacheInvalidationListenerEventIMapInvalidationSourceUuidFieldOffset + bufutil.UUIDSizeInBytes
    MapAddNearCacheInvalidationListenerEventIMapInvalidationSequenceFieldOffset = MapAddNearCacheInvalidationListenerEventIMapInvalidationPartitionUuidFieldOffset + bufutil.UUIDSizeInBytes
    MapAddNearCacheInvalidationListenerEventIMapInvalidationInitialFrameSize = MapAddNearCacheInvalidationListenerEventIMapInvalidationSequenceFieldOffset + bufutil.LongSizeInBytes
    //hex: 0x014102
    MapAddNearCacheInvalidationListenerEventIMapInvalidationMessageType = 82178

    MapAddNearCacheInvalidationListenerEventIMapBatchInvalidationInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x014103
    MapAddNearCacheInvalidationListenerEventIMapBatchInvalidationMessageType = 82179


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddNearCacheInvalidationListenerRequestParameters struct {

    /**
    * name of the map
    */
name string

    /**
    * flags of enabled listeners.
    */
listenerFlags int

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func MapAddNearCacheInvalidationListenerEncodeRequest(name string, listenerFlags int, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.AddNearCacheInvalidationListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddNearCacheInvalidationListenerRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, MapAddNearCacheInvalidationListenerRequestListenerFlagsFieldOffset, listenerFlags)
    bufutil.EncodeBoolean(initialFrame.Content, MapAddNearCacheInvalidationListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func MapAddNearCacheInvalidationListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapAddNearCacheInvalidationListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapAddNearCacheInvalidationListenerRequestParameters)
    initialFrame := iterator.Next()
    request.listenerFlags = bufutil.DecodeInt(initialFrame.Content, MapAddNearCacheInvalidationListenerRequestListenerFlagsFieldOffset)
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, MapAddNearCacheInvalidationListenerRequestLocalOnlyFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapAddNearCacheInvalidationListenerResponseParameters struct {
    /**
    * A unique string which is used as a key to remove the listener.
    */
response UUID
}

func MapAddNearCacheInvalidationListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapAddNearCacheInvalidationListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddNearCacheInvalidationListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, MapAddNearCacheInvalidationListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MapAddNearCacheInvalidationListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapAddNearCacheInvalidationListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapAddNearCacheInvalidationListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, MapAddNearCacheInvalidationListenerResponseResponseFieldOffset)
    return response
}

    func encodeMapAddNearCacheInvalidationListenerEvent(/* @Nullable */ key serialization.Data, sourceUuid UUID, partitionUuid UUID, sequence int64) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, MapAddNearCacheInvalidationListenerEventIMapInvalidationInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddNearCacheInvalidationListenerEventIMapInvalidationMessageType)
        encodeUUID(initialFrame.Content, MapAddNearCacheInvalidationListenerEventIMapInvalidationSourceUuidFieldOffset, sourceUuid)
        encodeUUID(initialFrame.Content, MapAddNearCacheInvalidationListenerEventIMapInvalidationPartitionUuidFieldOffset, partitionUuid)
        encodeLong(initialFrame.Content, MapAddNearCacheInvalidationListenerEventIMapInvalidationSequenceFieldOffset, sequence)
        clientMessage.Add(initialFrame)

        CodecUtil.encodeNullable(clientMessage, key, DataCodecEncode)
        return clientMessage
    }
    func encodeMapAddNearCacheInvalidationListenerEvent(keys []serialization.Data, sourceUuids Collection<UUID>, partitionUuids Collection<UUID>, sequences Collection<Long>) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, MapAddNearCacheInvalidationListenerEventIMapBatchInvalidationInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapAddNearCacheInvalidationListenerEventIMapBatchInvalidationMessageType)
        clientMessage.Add(initialFrame)

        ListMultiFrameCodec.encode(clientMessage, keys, DataCodecEncode)
        ListUUIDCodec.encode(clientMessage, sourceUuids)
        ListUUIDCodec.encode(clientMessage, partitionUuids)
        ListLongCodec.encode(clientMessage, sequences)
        return clientMessage
    }

    type MapAddNearCacheInvalidationListenerAbstractEventItemFunc func(/* @Nullable */ key serialization.Data, sourceUuid UUID, partitionUuid UUID, sequence int64)
    type MapAddNearCacheInvalidationListenerAbstractEventItemFunc func(keys []serialization.Data, sourceUuids Collection<UUID>, partitionUuids Collection<UUID>, sequences Collection<Long>)

     func MapAddNearCacheInvalidationListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem MapAddNearCacheInvalidationListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == MapAddNearCacheInvalidationListenerEventIMapInvalidationMessageType {
             initialFrame := iterator.Next()
             sourceUuid := bufutil.DecodeUUID(initialFrame.Content, MapAddNearCacheInvalidationListenerEventIMapInvalidationSourceUuidFieldOffset)
             partitionUuid := bufutil.DecodeUUID(initialFrame.Content, MapAddNearCacheInvalidationListenerEventIMapInvalidationPartitionUuidFieldOffset)
             sequence := bufutil.DecodeLong(initialFrame.Content, MapAddNearCacheInvalidationListenerEventIMapInvalidationSequenceFieldOffset)
             key := CodecUtil.decodeNullable(iterator, DataCodecDecode) 
             handleEventItem(key, sourceUuid, partitionUuid, sequence)
             return
          }
         if messageType == MapAddNearCacheInvalidationListenerEventIMapBatchInvalidationMessageType {
             //empty initial frame
             iterator.Next()
             keys := ListMultiFrameCodec.decode(iterator, DataCodecDecode)
             sourceUuids := ListUUIDCodec.decode(iterator)
             partitionUuids := ListUUIDCodec.decode(iterator)
             sequences := ListLongCodec.decode(iterator)
             handleEventItem(keys, sourceUuids, partitionUuids, sequences)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

