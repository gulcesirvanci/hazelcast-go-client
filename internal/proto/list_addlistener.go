/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds an item listener for this collection. Listener will be notified for all collection add/remove events.
 */
//@Generated("c3567b2376485802b428de65a1b137eb")
const (
    //hex: 0x050B00
    ListAddListenerRequestMessageType = 330496
    //hex: 0x050B01
    ListAddListenerResponseMessageType = 330497
    ListAddListenerRequestIncludeValueFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ListAddListenerRequestLocalOnlyFieldOffset = ListAddListenerRequestIncludeValueFieldOffset + bufutil.BooleanSizeInBytes
    ListAddListenerRequestInitialFrameSize = ListAddListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    ListAddListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ListAddListenerResponseInitialFrameSize = ListAddListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    ListAddListenerEventItemUuidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ListAddListenerEventItemEventTypeFieldOffset = ListAddListenerEventItemUuidFieldOffset + bufutil.UUIDSizeInBytes
    ListAddListenerEventItemInitialFrameSize = ListAddListenerEventItemEventTypeFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x050B02
    ListAddListenerEventItemMessageType = 330498


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ListAddListenerRequestParameters struct {

    /**
    * Name of the List
    */
name string

    /**
    * Set to true if you want the event to contain the value.
    */
includeValue bool

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func ListAddListenerEncodeRequest(name string, includeValue bool, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("List.AddListener")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ListAddListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, ListAddListenerRequestIncludeValueFieldOffset, includeValue)
    bufutil.EncodeBoolean(initialFrame.Content, ListAddListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    return clientMessage
}




/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ListAddListenerResponseParameters struct {
    /**
    * Registration id for the listener.
    */
response string
}



func ListAddListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *ListAddListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ListAddListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, ListAddListenerResponseResponseFieldOffset)
    return response
}


    type ListAddListenerAbstractEventItemFunc func(/* @Nullable */ item serialization.Data, uuid string, eventType int32)

func ListAddListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem ListAddListenerAbstractEventItemFunc){
    messageType := clientMessage.GetMessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == ListAddListenerEventItemMessageType {
        initialFrame := iterator.Next()
        uuid := bufutil.DecodeUUID(initialFrame.Content, ListAddListenerEventItemUuidFieldOffset)
        eventType := bufutil.DecodeInt(initialFrame.Content, ListAddListenerEventItemEventTypeFieldOffset)
        item := bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode) .(serialization.Data)
        handleEventItem(item, uuid, eventType)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
        }

