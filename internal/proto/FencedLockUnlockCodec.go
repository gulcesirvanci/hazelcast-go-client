/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Unlocks the given FencedLock on the given CP group. If the lock is
 * not acquired, the call fails with {@link IllegalMonitorStateException}.
 * If the session is closed while holding the lock, the call fails with
 * {@code LockOwnershipLostException}. Returns true if the lock is still
 * held by the caller after a successful unlock() call, false otherwise.
 */
//@Generated("5fdf42c464b3d9550074753b3cd2b528")
const (
    //hex: 0x070300
    FencedLockUnlockRequestMessageType = 459520
    //hex: 0x070301
    FencedLockUnlockResponseMessageType = 459521
    FencedLockUnlockRequestSessionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    FencedLockUnlockRequestThreadIdFieldOffset = FencedLockUnlockRequestSessionIdFieldOffset + bufutil.LongSizeInBytes
    FencedLockUnlockRequestInvocationUidFieldOffset = FencedLockUnlockRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    FencedLockUnlockRequestInitialFrameSize = FencedLockUnlockRequestInvocationUidFieldOffset + bufutil.UUIDSizeInBytes
    FencedLockUnlockResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    FencedLockUnlockResponseInitialFrameSize = FencedLockUnlockResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type FencedLockUnlockRequestParameters struct {

    /**
    * CP group id of this FencedLock instance
    */
groupId RaftGroupId

    /**
    * Name of this FencedLock instance
    */
name string

    /**
    * Session ID of the caller
    */
sessionId int64

    /**
    * ID of the caller thread
    */
threadId int64

    /**
    * UID of this invocation
    */
invocationUid UUID
}

func FencedLockUnlockEncodeRequest(groupId RaftGroupId, name string, sessionId int64, threadId int64, invocationUid UUID) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("FencedLock.Unlock")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, FencedLockUnlockRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, FencedLockUnlockRequestSessionIdFieldOffset, sessionId)
    bufutil.EncodeLong(initialFrame.Content, FencedLockUnlockRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeUUID(initialFrame.Content, FencedLockUnlockRequestInvocationUidFieldOffset, invocationUid)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func FencedLockUnlockDecodeRequest(clientMessage *bufutil.ClientMessagex) *FencedLockUnlockRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(FencedLockUnlockRequestParameters)
    initialFrame := iterator.Next()
    request.sessionId = bufutil.DecodeLong(initialFrame.Content, FencedLockUnlockRequestSessionIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, FencedLockUnlockRequestThreadIdFieldOffset)
    request.invocationUid = bufutil.DecodeUUID(initialFrame.Content, FencedLockUnlockRequestInvocationUidFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type FencedLockUnlockResponseParameters struct {
    /**
    * true if the lock is still held by the caller after
    * a successful unlock() call, false otherwise.
    */
response bool
}

func FencedLockUnlockEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, FencedLockUnlockResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, FencedLockUnlockResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, FencedLockUnlockResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func FencedLockUnlockDecodeResponse(clientMessage *bufutil.ClientMessagex) *FencedLockUnlockResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(FencedLockUnlockResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, FencedLockUnlockResponseResponseFieldOffset)
    return response
}

