
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Retains only the elements in this list that are contained in the specified collection (optional operation).
 * In other words, removes from this list all of its elements that are not contained in the specified collection.
 */
//@Generated("90d0837e913bbb7c5d2c429cfa8da165")
const (
    //hex: 0x050800
    ListCompareAndRetainAllRequestMessageType = 329728
    //hex: 0x050801
    ListCompareAndRetainAllResponseMessageType = 329729
    ListCompareAndRetainAllRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    ListCompareAndRetainAllResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    ListCompareAndRetainAllResponseInitialFrameSize = ListCompareAndRetainAllResponseResponseFieldOffset + BooleanSizeInBytes

)

func ListCompareAndRetainAllEncodeRequest(name string, values []serialization.Data) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("List.CompareAndRetainAll")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ListCompareAndRetainAllRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    clientMessage.Add(BeginFrame)
        for i := 0; i < len(values) ; i++ {
            DataCodecEncode(clientMessage, values[i]) //check line
        }
        clientMessage.Add(EndFrame)



    return clientMessage
}


func ListCompareAndRetainAllDecodeResponse(clientMessage *ClientMessage) func() (/*** True if this list changed as a result of the call, false otherwise.*/response bool) {
    return func() (/*** True if this list changed as a result of the call, false otherwise.*/response bool) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeBoolean(initialFrame.Content, ListCompareAndRetainAllResponseResponseFieldOffset)
        return
    }
}

