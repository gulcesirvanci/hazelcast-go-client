/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns the set of key-value pairs in the multimap.The collection is NOT backed by the map, so changes to the map
 * are NOT reflected in the collection, and vice-versa
 */
//@Generated("8256b756b37dfcb47faf2541b05d72da")
const (
    //hex: 0x020600
    MultiMapEntrySetRequestMessageType = 132608
    //hex: 0x020601
    MultiMapEntrySetResponseMessageType = 132609
    MultiMapEntrySetRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MultiMapEntrySetResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MultiMapEntrySetRequestParameters struct {

    /**
    * Name of the MultiMap
    */
name string
}

func MultiMapEntrySetEncodeRequest(name string) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("MultiMap.EntrySet")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MultiMapEntrySetRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func MultiMapEntrySetDecodeRequest(clientMessage *bufutil.ClientMessagex) *MultiMapEntrySetRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MultiMapEntrySetRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MultiMapEntrySetResponseParameters struct {
    /**
    * The set of key-value pairs in the multimap. The returned set might be modifiable but it has no effect on the multimap.
    */
response java.util.List<[]serialization.Data, []serialization.Data>
}

func MultiMapEntrySetEncodeResponse(response []serialization.Data, []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MultiMapEntrySetResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MultiMapEntrySetResponseMessageType)
    clientMessage.Add(initialFrame)

    EntryListCodec.encode(clientMessage, response, DataCodecEncode, DataCodecEncode)
    return clientMessage
}

func MultiMapEntrySetDecodeResponse(clientMessage *bufutil.ClientMessagex) *MultiMapEntrySetResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MultiMapEntrySetResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = EntryListCodec.decode(iterator, DataCodecDecode, DataCodecDecode)
    return response
}

