/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Retains only the elements in this set that are contained in the specified collection (optional operation).
 * In other words, removes from this set all of its elements that are not contained in the specified collection.
 * If the specified collection is also a set, this operation effectively modifies this set so that its value is the
 * intersection of the two sets.
 */
//@Generated("9346f3f93f548e5390711954816f28f3")
const (
    //hex: 0x060800
    SetCompareAndRetainAllRequestMessageType = 395264
    //hex: 0x060801
    SetCompareAndRetainAllResponseMessageType = 395265
    SetCompareAndRetainAllRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SetCompareAndRetainAllResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    SetCompareAndRetainAllResponseInitialFrameSize = SetCompareAndRetainAllResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SetCompareAndRetainAllRequestParameters struct {

    /**
    * Name of the Set
    */
name string

    /**
    * The list of values to test for matching the item to retain.
    */
values []serialization.Data
}

func SetCompareAndRetainAllEncodeRequest(name string, values []serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Set.CompareAndRetainAll")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SetCompareAndRetainAllRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encode(clientMessage, values, DataCodecEncode)
    return clientMessage
}

func SetCompareAndRetainAllDecodeRequest(clientMessage *bufutil.ClientMessagex) *SetCompareAndRetainAllRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(SetCompareAndRetainAllRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    request.values = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SetCompareAndRetainAllResponseParameters struct {
    /**
    * true if at least one item in values existed and it is retained, false otherwise. All items not in valueSet but
    * in the Set are removed.
    */
response bool
}

func SetCompareAndRetainAllEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, SetCompareAndRetainAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SetCompareAndRetainAllResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, SetCompareAndRetainAllResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func SetCompareAndRetainAllDecodeResponse(clientMessage *bufutil.ClientMessagex) *SetCompareAndRetainAllResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(SetCompareAndRetainAllResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, SetCompareAndRetainAllResponseResponseFieldOffset)
    return response
}

