
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Removes at most the given number of available elements from this queue and adds them to the given collection.
 * A failure encountered while attempting to add elements to collection may result in elements being in neither,
 * either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in
 * ILLEGAL_ARGUMENT. Further, the behavior of this operation is undefined if the specified collection is
 * modified while the operation is in progress.
 */
//@Generated("06eafe80ad946060824d1a57221306a5")
const (
    //hex: 0x030A00
    QueueDrainToMaxSizeRequestMessageType = 199168
    //hex: 0x030A01
    QueueDrainToMaxSizeResponseMessageType = 199169
    QueueDrainToMaxSizeRequestMaxSizeFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    QueueDrainToMaxSizeRequestInitialFrameSize = QueueDrainToMaxSizeRequestMaxSizeFieldOffset + IntSizeInBytes
    QueueDrainToMaxSizeResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func QueueDrainToMaxSizeEncodeRequest(name string, maxSize int32) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Queue.DrainToMaxSize")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, QueueDrainToMaxSizeRequestMessageType)
    EncodeInt(initialFrame.Content, QueueDrainToMaxSizeRequestMaxSizeFieldOffset, maxSize)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func QueueDrainToMaxSizeDecodeResponse(clientMessage *ClientMessage) func() (/*** list of all removed data in result of this method*/response []serialization.Data) {
    return func() (/*** list of all removed data in result of this method*/response []serialization.Data) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        var result []serialization.Data
        //begin frame, list
        iterator.Next()
        for !NextFrameIsDataStructureEndFrame(iterator) {
        result = append(result, DataCodecDecode(iterator))
        }
        //end frame, list
        iterator.Next()
        response = result //0.1
        return
    }
}

