
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/core"
    "github.com/hazelcast/hazelcast-go-client/serialization"







)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a near cache entry listener for this map. This listener will be notified when an entry is added/removed/updated/evicted/expired etc. so that the near cache entries can be invalidated.
 */
//@Generated("3781359ada37aec65b5bcc07c49404fe")
const (
    //hex: 0x0D1200
    ReplicatedMapAddNearCacheEntryListenerRequestMessageType = 856576
    //hex: 0x0D1201
    ReplicatedMapAddNearCacheEntryListenerResponseMessageType = 856577
    ReplicatedMapAddNearCacheEntryListenerRequestIncludeValueFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ReplicatedMapAddNearCacheEntryListenerRequestLocalOnlyFieldOffset = ReplicatedMapAddNearCacheEntryListenerRequestIncludeValueFieldOffset + BooleanSizeInBytes
    ReplicatedMapAddNearCacheEntryListenerRequestInitialFrameSize = ReplicatedMapAddNearCacheEntryListenerRequestLocalOnlyFieldOffset + BooleanSizeInBytes
    ReplicatedMapAddNearCacheEntryListenerResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    ReplicatedMapAddNearCacheEntryListenerResponseInitialFrameSize = ReplicatedMapAddNearCacheEntryListenerResponseResponseFieldOffset + UUIDSizeInBytes
    ReplicatedMapAddNearCacheEntryListenerEventEntryEventTypeFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ReplicatedMapAddNearCacheEntryListenerEventEntryUuidFieldOffset = ReplicatedMapAddNearCacheEntryListenerEventEntryEventTypeFieldOffset + IntSizeInBytes
    ReplicatedMapAddNearCacheEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset = ReplicatedMapAddNearCacheEntryListenerEventEntryUuidFieldOffset + UUIDSizeInBytes
    ReplicatedMapAddNearCacheEntryListenerEventEntryInitialFrameSize = ReplicatedMapAddNearCacheEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset + IntSizeInBytes
    //hex: 0x0D1202
    ReplicatedMapAddNearCacheEntryListenerEventEntryMessageType = 856578


)

func ReplicatedMapAddNearCacheEntryListenerEncodeRequest(name string, includeValue bool, localOnly bool) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("ReplicatedMap.AddNearCacheEntryListener")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ReplicatedMapAddNearCacheEntryListenerRequestMessageType)
    EncodeBoolean(initialFrame.Content, ReplicatedMapAddNearCacheEntryListenerRequestIncludeValueFieldOffset, includeValue)
    EncodeBoolean(initialFrame.Content, ReplicatedMapAddNearCacheEntryListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func ReplicatedMapAddNearCacheEntryListenerDecodeResponse(clientMessage *ClientMessage) func() (/*** A unique string  which is used as a key to remove the listener.*/response core.Uuid) {
    return func() (/*** A unique string  which is used as a key to remove the listener.*/response core.Uuid) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeUUID(initialFrame.Content, ReplicatedMapAddNearCacheEntryListenerResponseResponseFieldOffset)
        return
    }
}


type ReplicatedMapAddNearCacheEntryListenerHandleEntryFunc func(/* @Nullable */ key serialization.Data, /* @Nullable */ value serialization.Data, /* @Nullable */ oldValue serialization.Data, /* @Nullable */ mergingValue serialization.Data, eventType int32, uuid core.Uuid, numberOfAffectedEntries int32)

func ReplicatedMapAddNearCacheEntryListenerHandle(clientMessage *ClientMessage, handleEntry ReplicatedMapAddNearCacheEntryListenerHandleEntryFunc){
    messageType := clientMessage.MessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == ReplicatedMapAddNearCacheEntryListenerEventEntryMessageType {
        initialFrame := iterator.Next()
        eventType := DecodeInt(initialFrame.Content, ReplicatedMapAddNearCacheEntryListenerEventEntryEventTypeFieldOffset)
        uuid := DecodeUUID(initialFrame.Content, ReplicatedMapAddNearCacheEntryListenerEventEntryUuidFieldOffset)
        numberOfAffectedEntries := DecodeInt(initialFrame.Content, ReplicatedMapAddNearCacheEntryListenerEventEntryNumberOfAffectedEntriesFieldOffset)
        key := DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  

        value := DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  

        oldValue := DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  

        mergingValue := DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  

        handleEntry(key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
    }

