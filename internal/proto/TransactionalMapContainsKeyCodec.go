/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns true if this map contains an entry for the specified key.
 */
//@Generated("4e5dabb163499ba89f698cbc18339a50")
const (
    //hex: 0x0E0100
    TransactionalMapContainsKeyRequestMessageType = 917760
    //hex: 0x0E0101
    TransactionalMapContainsKeyResponseMessageType = 917761
    TransactionalMapContainsKeyRequestTxnIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TransactionalMapContainsKeyRequestThreadIdFieldOffset = TransactionalMapContainsKeyRequestTxnIdFieldOffset + bufutil.UUIDSizeInBytes
    TransactionalMapContainsKeyRequestInitialFrameSize = TransactionalMapContainsKeyRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    TransactionalMapContainsKeyResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    TransactionalMapContainsKeyResponseInitialFrameSize = TransactionalMapContainsKeyResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapContainsKeyRequestParameters struct {

    /**
    * Name of the Transactional Map
    */
name string

    /**
    * ID of the this transaction operation
    */
txnId UUID

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * The specified key.
    */
key serialization.Data
}

func TransactionalMapContainsKeyEncodeRequest(name string, txnId UUID, threadId int64, key serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("TransactionalMap.ContainsKey")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapContainsKeyRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, TransactionalMapContainsKeyRequestTxnIdFieldOffset, txnId)
    bufutil.EncodeLong(initialFrame.Content, TransactionalMapContainsKeyRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    return clientMessage
}

func TransactionalMapContainsKeyDecodeRequest(clientMessage *bufutil.ClientMessagex) *TransactionalMapContainsKeyRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(TransactionalMapContainsKeyRequestParameters)
    initialFrame := iterator.Next()
    request.txnId = bufutil.DecodeUUID(initialFrame.Content, TransactionalMapContainsKeyRequestTxnIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, TransactionalMapContainsKeyRequestThreadIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapContainsKeyResponseParameters struct {
    /**
    * True if this map contains an entry for the specified key.
    */
response bool
}

func TransactionalMapContainsKeyEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, TransactionalMapContainsKeyResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapContainsKeyResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, TransactionalMapContainsKeyResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func TransactionalMapContainsKeyDecodeResponse(clientMessage *bufutil.ClientMessagex) *TransactionalMapContainsKeyResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(TransactionalMapContainsKeyResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, TransactionalMapContainsKeyResponseResponseFieldOffset)
    return response
}

