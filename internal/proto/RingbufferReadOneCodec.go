/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Reads one item from the Ringbuffer. If the sequence is one beyond the current tail, this call blocks until an
 * item is added. This method is not destructive unlike e.g. a queue.take. So the same item can be read by multiple
 * readers or it can be read multiple times by the same reader. Currently it isn't possible to control how long this
 * call is going to block. In the future we could add e.g. tryReadOne(long sequence, long timeout, TimeUnit unit).
 */
//@Generated("864583885bd2b65a0084eeb823e1a049")
const (
    //hex: 0x170700
    RingbufferReadOneRequestMessageType = 1509120
    //hex: 0x170701
    RingbufferReadOneResponseMessageType = 1509121
    RingbufferReadOneRequestSequenceFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    RingbufferReadOneRequestInitialFrameSize = RingbufferReadOneRequestSequenceFieldOffset + bufutil.LongSizeInBytes
    RingbufferReadOneResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type RingbufferReadOneRequestParameters struct {

    /**
    * Name of the Ringbuffer
    */
name string

    /**
    * the sequence of the item to read.
    */
sequence int64
}

func RingbufferReadOneEncodeRequest(name string, sequence int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Ringbuffer.ReadOne")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, RingbufferReadOneRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, RingbufferReadOneRequestSequenceFieldOffset, sequence)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func RingbufferReadOneDecodeRequest(clientMessage *bufutil.ClientMessagex) *RingbufferReadOneRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(RingbufferReadOneRequestParameters)
    initialFrame := iterator.Next()
    request.sequence = bufutil.DecodeLong(initialFrame.Content, RingbufferReadOneRequestSequenceFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type RingbufferReadOneResponseParameters struct {
    /**
    * the read item
    */
/* @Nullable */ response serialization.Data
}

func RingbufferReadOneEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, RingbufferReadOneResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, RingbufferReadOneResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func RingbufferReadOneDecodeResponse(clientMessage *bufutil.ClientMessagex) *RingbufferReadOneResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(RingbufferReadOneResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

