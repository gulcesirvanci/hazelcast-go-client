/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds listener for backup acks
 */
//@Generated("48f1abb36d2f61c1ee73f9b3c81167ca")
const (
    //hex: 0x001300
    ClientLocalBackupListenerRequestMessageType = 4864
    //hex: 0x001301
    ClientLocalBackupListenerResponseMessageType = 4865
    ClientLocalBackupListenerRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientLocalBackupListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ClientLocalBackupListenerResponseInitialFrameSize = ClientLocalBackupListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    ClientLocalBackupListenerEventBackupSourceInvocationCorrelationIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientLocalBackupListenerEventBackupInitialFrameSize = ClientLocalBackupListenerEventBackupSourceInvocationCorrelationIdFieldOffset + bufutil.LongSizeInBytes
    //hex: 0x001302
    ClientLocalBackupListenerEventBackupMessageType = 4866


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientLocalBackupListenerRequestParameters struct {
}

func ClientLocalBackupListenerEncodeRequest() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Client.LocalBackupListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientLocalBackupListenerRequestMessageType)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func ClientLocalBackupListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *ClientLocalBackupListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ClientLocalBackupListenerRequestParameters)
    //empty initial frame
    iterator.Next()
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientLocalBackupListenerResponseParameters struct {
    /**
    * Returns the registration id for the listener.
    */
response UUID
}

func ClientLocalBackupListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ClientLocalBackupListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientLocalBackupListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, ClientLocalBackupListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ClientLocalBackupListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *ClientLocalBackupListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ClientLocalBackupListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, ClientLocalBackupListenerResponseResponseFieldOffset)
    return response
}

    func encodeClientLocalBackupListenerEvent(sourceInvocationCorrelationId int64) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ClientLocalBackupListenerEventBackupInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientLocalBackupListenerEventBackupMessageType)
        encodeLong(initialFrame.Content, ClientLocalBackupListenerEventBackupSourceInvocationCorrelationIdFieldOffset, sourceInvocationCorrelationId)
        clientMessage.Add(initialFrame)

        return clientMessage
    }

    type ClientLocalBackupListenerAbstractEventItemFunc func(sourceInvocationCorrelationId int64)

     func ClientLocalBackupListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem ClientLocalBackupListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == ClientLocalBackupListenerEventBackupMessageType {
             initialFrame := iterator.Next()
             sourceInvocationCorrelationId := bufutil.DecodeLong(initialFrame.Content, ClientLocalBackupListenerEventBackupSourceInvocationCorrelationIdFieldOffset)
             handleEventItem(sourceInvocationCorrelationId)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

