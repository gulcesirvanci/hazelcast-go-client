/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Reads from the cache event journal in batches. You may specify the start sequence,
 * the minimum required number of items in the response, the maximum number of items
 * in the response, a predicate that the events should pass and a projection to
 * apply to the events in the journal.
 * If the event journal currently contains less events than {@code minSize}, the
 * call will wait until it has sufficient items.
 * The predicate, filter and projection may be {@code null} in which case all elements are returned
 * and no projection is applied.
 */
//@Generated("76180c74060143a749cbc9f254bea6a9")
const (
    //hex: 0x132100
    CacheEventJournalReadRequestMessageType = 1253632
    //hex: 0x132101
    CacheEventJournalReadResponseMessageType = 1253633
    CacheEventJournalReadRequestStartSequenceFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheEventJournalReadRequestMinSizeFieldOffset = CacheEventJournalReadRequestStartSequenceFieldOffset + bufutil.LongSizeInBytes
    CacheEventJournalReadRequestMaxSizeFieldOffset = CacheEventJournalReadRequestMinSizeFieldOffset + bufutil.IntSizeInBytes
    CacheEventJournalReadRequestInitialFrameSize = CacheEventJournalReadRequestMaxSizeFieldOffset + bufutil.IntSizeInBytes
    CacheEventJournalReadResponseReadCountFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CacheEventJournalReadResponseNextSeqFieldOffset = CacheEventJournalReadResponseReadCountFieldOffset + bufutil.IntSizeInBytes
    CacheEventJournalReadResponseInitialFrameSize = CacheEventJournalReadResponseNextSeqFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheEventJournalReadRequestParameters struct {

    /**
    * name of the cache
    */
name string

    /**
    * the startSequence of the first item to read
    */
startSequence int64

    /**
    * the minimum number of items to read.
    */
minSize int

    /**
    * the maximum number of items to read.
    */
maxSize int

    /**
    * the predicate to apply before processing events
    */
/* @Nullable */ predicate serialization.Data

    /**
    * the projection to apply to journal events
    */
/* @Nullable */ projection serialization.Data
}

func CacheEventJournalReadEncodeRequest(name string, startSequence int64, minSize int, maxSize int, /* @Nullable */ predicate serialization.Data, /* @Nullable */ projection serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.EventJournalRead")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheEventJournalReadRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, CacheEventJournalReadRequestStartSequenceFieldOffset, startSequence)
    bufutil.EncodeInt(initialFrame.Content, CacheEventJournalReadRequestMinSizeFieldOffset, minSize)
    bufutil.EncodeInt(initialFrame.Content, CacheEventJournalReadRequestMaxSizeFieldOffset, maxSize)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    CodecUtil.encodeNullable(clientMessage, predicate, DataCodecEncode)
    CodecUtil.encodeNullable(clientMessage, projection, DataCodecEncode)
    return clientMessage
}

func CacheEventJournalReadDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheEventJournalReadRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheEventJournalReadRequestParameters)
    initialFrame := iterator.Next()
    request.startSequence = bufutil.DecodeLong(initialFrame.Content, CacheEventJournalReadRequestStartSequenceFieldOffset)
    request.minSize = bufutil.DecodeInt(initialFrame.Content, CacheEventJournalReadRequestMinSizeFieldOffset)
    request.maxSize = bufutil.DecodeInt(initialFrame.Content, CacheEventJournalReadRequestMaxSizeFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.predicate = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    request.projection = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheEventJournalReadResponseParameters struct {
    /**
    * TODO DOC
    */
readCount int
    /**
    * TODO DOC
    */
items []serialization.Data
    /**
    * TODO DOC
    */
/* @Nullable */ itemSeqs []int64
    /**
    * TODO DOC
    */
nextSeq int64
}

func CacheEventJournalReadEncodeResponse(readCount int , items []serialization.Data , /* @Nullable */ itemSeqs []int64 , nextSeq int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheEventJournalReadResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheEventJournalReadResponseMessageType)
    bufutil.EncodeInt(initialFrame.Content, CacheEventJournalReadResponseReadCountFieldOffset, readCount)
    bufutil.EncodeLong(initialFrame.Content, CacheEventJournalReadResponseNextSeqFieldOffset, nextSeq)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encode(clientMessage, items, DataCodecEncode)
    CodecUtil.encodeNullable(clientMessage, itemSeqs, LongArrayCodecEncode)
    return clientMessage
}

func CacheEventJournalReadDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheEventJournalReadResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheEventJournalReadResponseParameters)
    initialFrame := iterator.Next()
    response.readCount = bufutil.DecodeInt(initialFrame.Content, CacheEventJournalReadResponseReadCountFieldOffset)
    response.nextSeq = bufutil.DecodeLong(initialFrame.Content, CacheEventJournalReadResponseNextSeqFieldOffset)
    response.items = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    response.itemSeqs = CodecUtil.decodeNullable(iterator, LongArrayCodecDecode) 
    return response
}

