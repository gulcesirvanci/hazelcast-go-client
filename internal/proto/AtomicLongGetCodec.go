/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Gets the current value.
 */
//@Generated("9e6facd76d1b2ad37533cce19a03d334")
const (
    //hex: 0x090500
    AtomicLongGetRequestMessageType = 591104
    //hex: 0x090501
    AtomicLongGetResponseMessageType = 591105
    AtomicLongGetRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    AtomicLongGetResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    AtomicLongGetResponseInitialFrameSize = AtomicLongGetResponseResponseFieldOffset + bufutil.LongSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicLongGetRequestParameters struct {

    /**
    * CP group id of this IAtomicLong instance.
    */
groupId RaftGroupId

    /**
    * Name of this IAtomicLong instance.
    */
name string
}

func AtomicLongGetEncodeRequest(groupId RaftGroupId, name string) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("AtomicLong.Get")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicLongGetRequestMessageType)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func AtomicLongGetDecodeRequest(clientMessage *bufutil.ClientMessagex) *AtomicLongGetRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(AtomicLongGetRequestParameters)
    //empty initial frame
    iterator.Next()
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type AtomicLongGetResponseParameters struct {
    /**
    * The current value
    */
response int64
}

func AtomicLongGetEncodeResponse(response int64 ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, AtomicLongGetResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, AtomicLongGetResponseMessageType)
    bufutil.EncodeLong(initialFrame.Content, AtomicLongGetResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func AtomicLongGetDecodeResponse(clientMessage *bufutil.ClientMessagex) *AtomicLongGetResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(AtomicLongGetResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeLong(initialFrame.Content, AtomicLongGetResponseResponseFieldOffset)
    return response
}

