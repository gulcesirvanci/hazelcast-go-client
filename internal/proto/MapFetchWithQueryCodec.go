/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Fetches the specified number of entries from the specified partition starting from specified table index
 * that match the predicate and applies the projection logic on them.
 */
//@Generated("92c5e2ae2d2632e6210363a7b64a0d63")
const (
    //hex: 0x014200
    MapFetchWithQueryRequestMessageType = 82432
    //hex: 0x014201
    MapFetchWithQueryResponseMessageType = 82433
    MapFetchWithQueryRequestTableIndexFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapFetchWithQueryRequestBatchFieldOffset = MapFetchWithQueryRequestTableIndexFieldOffset + bufutil.IntSizeInBytes
    MapFetchWithQueryRequestInitialFrameSize = MapFetchWithQueryRequestBatchFieldOffset + bufutil.IntSizeInBytes
    MapFetchWithQueryResponseNextTableIndexToReadFromFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapFetchWithQueryResponseInitialFrameSize = MapFetchWithQueryResponseNextTableIndexToReadFromFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapFetchWithQueryRequestParameters struct {

    /**
    * Name of the map
    */
name string

    /**
    * The slot number (or index) to start the iterator
    */
tableIndex int

    /**
    * The number of items to be batched
    */
batch int

    /**
    * projection to transform the entries with
    */
projection serialization.Data

    /**
    * predicate to filter the entries with
    */
predicate serialization.Data
}

func MapFetchWithQueryEncodeRequest(name string, tableIndex int, batch int, projection serialization.Data, predicate serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.FetchWithQuery")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapFetchWithQueryRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, MapFetchWithQueryRequestTableIndexFieldOffset, tableIndex)
    bufutil.EncodeInt(initialFrame.Content, MapFetchWithQueryRequestBatchFieldOffset, batch)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, projection)
    DataCodec.encode(clientMessage, predicate)
    return clientMessage
}

func MapFetchWithQueryDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapFetchWithQueryRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapFetchWithQueryRequestParameters)
    initialFrame := iterator.Next()
    request.tableIndex = bufutil.DecodeInt(initialFrame.Content, MapFetchWithQueryRequestTableIndexFieldOffset)
    request.batch = bufutil.DecodeInt(initialFrame.Content, MapFetchWithQueryRequestBatchFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.projection = DataCodec.decode(iterator)
    request.predicate = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapFetchWithQueryResponseParameters struct {
    /**
    * TODO DOC
    */
results []serialization.Data
    /**
    * TODO DOC
    */
nextTableIndexToReadFrom int
}

func MapFetchWithQueryEncodeResponse(results Collection<com.hazelcast.nio.serialization.Data> , nextTableIndexToReadFrom int ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapFetchWithQueryResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapFetchWithQueryResponseMessageType)
    bufutil.EncodeInt(initialFrame.Content, MapFetchWithQueryResponseNextTableIndexToReadFromFieldOffset, nextTableIndexToReadFrom)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encodeContainsNullable(clientMessage, results, DataCodecEncode)
    return clientMessage
}

func MapFetchWithQueryDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapFetchWithQueryResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapFetchWithQueryResponseParameters)
    initialFrame := iterator.Next()
    response.nextTableIndexToReadFrom = bufutil.DecodeInt(initialFrame.Content, MapFetchWithQueryResponseNextTableIndexToReadFromFieldOffset)
    response.results = ListMultiFrameCodec.decodeContainsNullable(iterator, DataCodecDecode)
    return response
}

