/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Causes the current thread to wait until the latch has counted down
 * to zero, or an exception is thrown, or the specified waiting time
 * elapses. If the current count is zero then this method returns
 * immediately with the value true. If the current count is greater than
 * zero, then the current thread becomes disabled for thread scheduling
 * purposes and lies dormant until one of five things happen: the count
 * reaches zero due to invocations of the {@code countDown} method, this
 * ICountDownLatch instance is destroyed, the countdown owner becomes
 * disconnected, some other thread Thread#interrupt interrupts the current
 * thread, or the specified waiting time elapses. If the count reaches zero
 * then the method returns with the value true. If the current thread has
 * its interrupted status set on entry to this method, or is interrupted
 * while waiting, then {@code InterruptedException} is thrown
 * and the current thread's interrupted status is cleared. If the specified
 * waiting time elapses then the value false is returned.  If the time is
 * less than or equal to zero, the method will not wait at all.
 */
//@Generated("95a24912dc370fe1babf094e3f1545e7")
const (
    //hex: 0x0B0200
    CountDownLatchAwaitRequestMessageType = 721408
    //hex: 0x0B0201
    CountDownLatchAwaitResponseMessageType = 721409
    CountDownLatchAwaitRequestInvocationUidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CountDownLatchAwaitRequestTimeoutMsFieldOffset = CountDownLatchAwaitRequestInvocationUidFieldOffset + bufutil.UUIDSizeInBytes
    CountDownLatchAwaitRequestInitialFrameSize = CountDownLatchAwaitRequestTimeoutMsFieldOffset + bufutil.LongSizeInBytes
    CountDownLatchAwaitResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CountDownLatchAwaitResponseInitialFrameSize = CountDownLatchAwaitResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CountDownLatchAwaitRequestParameters struct {

    /**
    * CP group id of this CountDownLatch instance
    */
groupId RaftGroupId

    /**
    * Name of this CountDownLatch instance
    */
name string

    /**
    * UID of this invocation
    */
invocationUid UUID

    /**
    * The maximum time in milliseconds to wait
    */
timeoutMs int64
}

func CountDownLatchAwaitEncodeRequest(groupId RaftGroupId, name string, invocationUid UUID, timeoutMs int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("CountDownLatch.Await")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CountDownLatchAwaitRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, CountDownLatchAwaitRequestInvocationUidFieldOffset, invocationUid)
    bufutil.EncodeLong(initialFrame.Content, CountDownLatchAwaitRequestTimeoutMsFieldOffset, timeoutMs)
    clientMessage.Add(initialFrame)
    RaftGroupIdCodec.encode(clientMessage, groupId)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func CountDownLatchAwaitDecodeRequest(clientMessage *bufutil.ClientMessagex) *CountDownLatchAwaitRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CountDownLatchAwaitRequestParameters)
    initialFrame := iterator.Next()
    request.invocationUid = bufutil.DecodeUUID(initialFrame.Content, CountDownLatchAwaitRequestInvocationUidFieldOffset)
    request.timeoutMs = bufutil.DecodeLong(initialFrame.Content, CountDownLatchAwaitRequestTimeoutMsFieldOffset)
    request.groupId = RaftGroupIdCodec.decode(iterator)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CountDownLatchAwaitResponseParameters struct {
    /**
    * true if the count reached zero, false if
    * the waiting time elapsed before the count reached 0
    */
response bool
}

func CountDownLatchAwaitEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CountDownLatchAwaitResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CountDownLatchAwaitResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CountDownLatchAwaitResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CountDownLatchAwaitDecodeResponse(clientMessage *bufutil.ClientMessagex) *CountDownLatchAwaitResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CountDownLatchAwaitResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, CountDownLatchAwaitResponseResponseFieldOffset)
    return response
}

