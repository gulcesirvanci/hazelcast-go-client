/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns a set clone of the keys contained in this map. The set is NOT backed by the map, so changes to the map
 * are NOT reflected in the set, and vice-versa. This method is always executed by a distributed query, so it may throw
 * a QueryResultSizeExceededException if query result size limit is configured.
 */
//@Generated("c27dafb272894c28f70077e3c628338b")
const (
    //hex: 0x0E0E00
    TransactionalMapKeySetRequestMessageType = 921088
    //hex: 0x0E0E01
    TransactionalMapKeySetResponseMessageType = 921089
    TransactionalMapKeySetRequestTxnIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TransactionalMapKeySetRequestThreadIdFieldOffset = TransactionalMapKeySetRequestTxnIdFieldOffset + bufutil.UUIDSizeInBytes
    TransactionalMapKeySetRequestInitialFrameSize = TransactionalMapKeySetRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    TransactionalMapKeySetResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapKeySetRequestParameters struct {

    /**
    * Name of the Transactional Map
    */
name string

    /**
    * ID of the this transaction operation
    */
txnId UUID

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64
}

func TransactionalMapKeySetEncodeRequest(name string, txnId UUID, threadId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("TransactionalMap.KeySet")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapKeySetRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, TransactionalMapKeySetRequestTxnIdFieldOffset, txnId)
    bufutil.EncodeLong(initialFrame.Content, TransactionalMapKeySetRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func TransactionalMapKeySetDecodeRequest(clientMessage *bufutil.ClientMessagex) *TransactionalMapKeySetRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(TransactionalMapKeySetRequestParameters)
    initialFrame := iterator.Next()
    request.txnId = bufutil.DecodeUUID(initialFrame.Content, TransactionalMapKeySetRequestTxnIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, TransactionalMapKeySetRequestThreadIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapKeySetResponseParameters struct {
    /**
    * A set clone of the keys contained in this map.
    */
response []serialization.Data
}

func TransactionalMapKeySetEncodeResponse(response []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, TransactionalMapKeySetResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapKeySetResponseMessageType)
    clientMessage.Add(initialFrame)

    ListMultiFrameCodec.encode(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func TransactionalMapKeySetDecodeResponse(clientMessage *bufutil.ClientMessagex) *TransactionalMapKeySetResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(TransactionalMapKeySetResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    return response
}

