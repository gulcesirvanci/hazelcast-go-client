/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Tries to acquire the lock for the specified key for the specified lease time.After lease time, the lock will be
 * released.If the lock is not available, then the current thread becomes disabled for thread scheduling
 * purposes and lies dormant until one of two things happens the lock is acquired by the current thread, or
 * the specified waiting time elapses.
 */
//@Generated("6ed26a521240aa0b02aa95781577271e")
const (
    //hex: 0x011100
    MapTryLockRequestMessageType = 69888
    //hex: 0x011101
    MapTryLockResponseMessageType = 69889
    MapTryLockRequestThreadIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapTryLockRequestLeaseFieldOffset = MapTryLockRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    MapTryLockRequestTimeoutFieldOffset = MapTryLockRequestLeaseFieldOffset + bufutil.LongSizeInBytes
    MapTryLockRequestReferenceIdFieldOffset = MapTryLockRequestTimeoutFieldOffset + bufutil.LongSizeInBytes
    MapTryLockRequestInitialFrameSize = MapTryLockRequestReferenceIdFieldOffset + bufutil.LongSizeInBytes
    MapTryLockResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    MapTryLockResponseInitialFrameSize = MapTryLockResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapTryLockRequestParameters struct {

    /**
    * Name of the map.
    */
name string

    /**
    * Key for the map entry.
    */
key serialization.Data

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * time in milliseconds to wait before releasing the lock.
    */
lease int64

    /**
    * maximum time to wait for getting the lock.
    */
timeout int64

    /**
    * The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.
    */
referenceId int64
}

func MapTryLockEncodeRequest(name string, key serialization.Data, threadId int64, lease int64, timeout int64, referenceId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(true)
    clientMessage.SetOperationName("Map.TryLock")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapTryLockRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, MapTryLockRequestThreadIdFieldOffset, threadId)
    bufutil.EncodeLong(initialFrame.Content, MapTryLockRequestLeaseFieldOffset, lease)
    bufutil.EncodeLong(initialFrame.Content, MapTryLockRequestTimeoutFieldOffset, timeout)
    bufutil.EncodeLong(initialFrame.Content, MapTryLockRequestReferenceIdFieldOffset, referenceId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    return clientMessage
}

func MapTryLockDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapTryLockRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapTryLockRequestParameters)
    initialFrame := iterator.Next()
    request.threadId = bufutil.DecodeLong(initialFrame.Content, MapTryLockRequestThreadIdFieldOffset)
    request.lease = bufutil.DecodeLong(initialFrame.Content, MapTryLockRequestLeaseFieldOffset)
    request.timeout = bufutil.DecodeLong(initialFrame.Content, MapTryLockRequestTimeoutFieldOffset)
    request.referenceId = bufutil.DecodeLong(initialFrame.Content, MapTryLockRequestReferenceIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapTryLockResponseParameters struct {
    /**
    * Returns true if successful, otherwise returns false
    */
response bool
}

func MapTryLockEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapTryLockResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapTryLockResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, MapTryLockResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MapTryLockDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapTryLockResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapTryLockResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, MapTryLockResponseResponseFieldOffset)
    return response
}

