
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns number of items in the ringbuffer. If no ttl is set, the size will always be equal to capacity after the
 * head completed the first looparound the ring. This is because no items are getting retired.
 */
//@Generated("cdf46972e7e5e58829d0bc560fdd3304")
const (
    //hex: 0x170100
    RingbufferSizeRequestMessageType = 1507584
    //hex: 0x170101
    RingbufferSizeResponseMessageType = 1507585
    RingbufferSizeRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    RingbufferSizeResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    RingbufferSizeResponseInitialFrameSize = RingbufferSizeResponseResponseFieldOffset + LongSizeInBytes

)

func RingbufferSizeEncodeRequest(name string) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Ringbuffer.Size")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, RingbufferSizeRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func RingbufferSizeDecodeResponse(clientMessage *ClientMessage) func() ( /*** the size*/response int64) {
    return func() (/*** the size*/response int64) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeLong(initialFrame.Content, RingbufferSizeResponseResponseFieldOffset)
        return
    }
}

