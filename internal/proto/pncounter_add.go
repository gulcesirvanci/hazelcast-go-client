
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/core"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a delta to the PNCounter value. The delta may be negative for a
 * subtraction.
 * <p>
 * The invocation will return the replica timestamps (vector clock) which
 * can then be sent with the next invocation to keep session consistency
 * guarantees.
 * The target replica is determined by the {@code targetReplica} parameter.
 * If smart routing is disabled, the actual member processing the client
 * message may act as a proxy.
 */
//@Generated("5e86af915d3b0a63e9c6bc3c5f892922")
const (
    //hex: 0x1D0200
    PNCounterAddRequestMessageType = 1901056
    //hex: 0x1D0201
    PNCounterAddResponseMessageType = 1901057
    PNCounterAddRequestDeltaFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    PNCounterAddRequestGetBeforeUpdateFieldOffset = PNCounterAddRequestDeltaFieldOffset + LongSizeInBytes
    PNCounterAddRequestTargetReplicaUUIDFieldOffset = PNCounterAddRequestGetBeforeUpdateFieldOffset + BooleanSizeInBytes
    PNCounterAddRequestInitialFrameSize = PNCounterAddRequestTargetReplicaUUIDFieldOffset + UUIDSizeInBytes
    PNCounterAddResponseValueFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    PNCounterAddResponseReplicaCountFieldOffset = PNCounterAddResponseValueFieldOffset + LongSizeInBytes
    PNCounterAddResponseInitialFrameSize = PNCounterAddResponseReplicaCountFieldOffset + IntSizeInBytes

)

func PNCounterAddEncodeRequest(name string, delta int64, getBeforeUpdate bool, replicaTimestamps []*Pair, targetReplicaUUID *core.Uuid) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("PNCounter.Add")
	initialFrame := &Frame{Content: make([]byte, PNCounterAddResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, PNCounterAddRequestMessageType)
    EncodeLong(initialFrame.Content, PNCounterAddRequestDeltaFieldOffset, delta)
    EncodeBoolean(initialFrame.Content, PNCounterAddRequestGetBeforeUpdateFieldOffset, getBeforeUpdate)
    EncodeUUID(initialFrame.Content, PNCounterAddRequestTargetReplicaUUIDFieldOffset, targetReplicaUUID)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    EntryListUUIDLongCodecEncode(clientMessage, replicaTimestamps)

    return clientMessage
}


func PNCounterAddDecodeResponse(clientMessage *ClientMessage) func() (/*** Value of the counter.*/value int64, /*** last observed replica timestamps (vector clock)*/replicaTimestamps []*Pair, /*** Number of replicas that keep the state of this counter.*/replicaCount int32) {
    return func() (/*** Value of the counter.*/value int64, /*** last observed replica timestamps (vector clock)*/replicaTimestamps []*Pair, /*** Number of replicas that keep the state of this counter.*/replicaCount int32) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        value = DecodeLong(initialFrame.Content, PNCounterAddResponseValueFieldOffset)
        replicaCount = DecodeInt(initialFrame.Content, PNCounterAddResponseReplicaCountFieldOffset)
    //check line for no nullable decode
        return
    }
}

