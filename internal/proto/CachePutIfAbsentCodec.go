/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Associates the specified key with the given value if and only if there is not yet a mapping defined for the
 * specified key. If the cache is configured for write-through operation mode, the underlying configured
 * javax.cache.integration.CacheWriter might be called to store the value of the key to any kind of external resource.
 */
//@Generated("910c9bfdc65fa4e946a9daf85d91160b")
const (
    //hex: 0x131200
    CachePutIfAbsentRequestMessageType = 1249792
    //hex: 0x131201
    CachePutIfAbsentResponseMessageType = 1249793
    CachePutIfAbsentRequestCompletionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CachePutIfAbsentRequestInitialFrameSize = CachePutIfAbsentRequestCompletionIdFieldOffset + bufutil.IntSizeInBytes
    CachePutIfAbsentResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CachePutIfAbsentResponseInitialFrameSize = CachePutIfAbsentResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CachePutIfAbsentRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * The key that is associated with the specified value.
    */
key serialization.Data

    /**
    * The value that has the specified key associated with it.
    */
value serialization.Data

    /**
    * The custom expiry policy for this operation.
    * A null value is equivalent to put(Object, Object).
    */
/* @Nullable */ expiryPolicy serialization.Data

    /**
    * User generated id which shall be received as a field of the cache event upon completion of
    * the request in the cluster.
    */
completionId int
}

func CachePutIfAbsentEncodeRequest(name string, key serialization.Data, value serialization.Data, /* @Nullable */ expiryPolicy serialization.Data, completionId int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.PutIfAbsent")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CachePutIfAbsentRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, CachePutIfAbsentRequestCompletionIdFieldOffset, completionId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    DataCodec.encode(clientMessage, value)
    CodecUtil.encodeNullable(clientMessage, expiryPolicy, DataCodecEncode)
    return clientMessage
}

func CachePutIfAbsentDecodeRequest(clientMessage *bufutil.ClientMessagex) *CachePutIfAbsentRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CachePutIfAbsentRequestParameters)
    initialFrame := iterator.Next()
    request.completionId = bufutil.DecodeInt(initialFrame.Content, CachePutIfAbsentRequestCompletionIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    request.value = DataCodec.decode(iterator)
    request.expiryPolicy = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CachePutIfAbsentResponseParameters struct {
    /**
    * true if a value was set, false otherwise.
    */
response bool
}

func CachePutIfAbsentEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CachePutIfAbsentResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CachePutIfAbsentResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CachePutIfAbsentResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CachePutIfAbsentDecodeResponse(clientMessage *bufutil.ClientMessagex) *CachePutIfAbsentResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CachePutIfAbsentResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, CachePutIfAbsentResponseResponseFieldOffset)
    return response
}

