/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new topic configuration to a running cluster.
 * If a topic configuration with the given {@code name} already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("3a5bc394a4e2c37aed60e54e427376d8")
const (
    //hex: 0x1B0700
    DynamicConfigAddTopicConfigRequestMessageType = 1771264
    //hex: 0x1B0701
    DynamicConfigAddTopicConfigResponseMessageType = 1771265
    DynamicConfigAddTopicConfigRequestGlobalOrderingEnabledFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddTopicConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddTopicConfigRequestGlobalOrderingEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddTopicConfigRequestMultiThreadingEnabledFieldOffset = DynamicConfigAddTopicConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddTopicConfigRequestInitialFrameSize = DynamicConfigAddTopicConfigRequestMultiThreadingEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddTopicConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddTopicConfigRequestParameters struct {

    /**
    * topic's name
    */
name string

    /**
    * when {@code true} all nodes listening to the same topic get their messages in
    * the same order
    */
globalOrderingEnabled bool

    /**
    * {@code true} to enable gathering of statistics, otherwise {@code false}
    */
statisticsEnabled bool

    /**
    * {@code true} to enable multi-threaded processing of incoming messages, otherwise
    * a single thread will handle all topic messages
    */
multiThreadingEnabled bool

    /**
    * message listener configurations
    */
/* @Nullable */ listenerConfigs []]ListenerConfigHolder
}

func DynamicConfigAddTopicConfigEncodeRequest(name string, globalOrderingEnabled bool, statisticsEnabled bool, multiThreadingEnabled bool, /* @Nullable */ listenerConfigs Collection<ListenerConfigHolder>) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddTopicConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddTopicConfigRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddTopicConfigRequestGlobalOrderingEnabledFieldOffset, globalOrderingEnabled)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddTopicConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddTopicConfigRequestMultiThreadingEnabledFieldOffset, multiThreadingEnabled)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encodeNullable(clientMessage, listenerConfigs, ListenerConfigHolderCodecEncode)
    return clientMessage
}

func DynamicConfigAddTopicConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddTopicConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddTopicConfigRequestParameters)
    initialFrame := iterator.Next()
    request.globalOrderingEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddTopicConfigRequestGlobalOrderingEnabledFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddTopicConfigRequestStatisticsEnabledFieldOffset)
    request.multiThreadingEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddTopicConfigRequestMultiThreadingEnabledFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.listenerConfigs = ListMultiFrameCodec.decodeNullable(iterator, ListenerConfigHolderCodecDecode)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddTopicConfigResponseParameters struct {
}

func DynamicConfigAddTopicConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddTopicConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddTopicConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddTopicConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddTopicConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddTopicConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

