/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Fetches specified number of entries from the specified partition starting from specified table index.
 */
//@Generated("bbea7072e6480c280027f12b0fa50ec1")
const (
    //hex: 0x131C00
    CacheIterateEntriesRequestMessageType = 1252352
    //hex: 0x131C01
    CacheIterateEntriesResponseMessageType = 1252353
    CacheIterateEntriesRequestTableIndexFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheIterateEntriesRequestBatchFieldOffset = CacheIterateEntriesRequestTableIndexFieldOffset + bufutil.IntSizeInBytes
    CacheIterateEntriesRequestInitialFrameSize = CacheIterateEntriesRequestBatchFieldOffset + bufutil.IntSizeInBytes
    CacheIterateEntriesResponseTableIndexFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CacheIterateEntriesResponseInitialFrameSize = CacheIterateEntriesResponseTableIndexFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheIterateEntriesRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * The slot number (or index) to start the iterator
    */
tableIndex int

    /**
    * The number of items to be batched
    */
batch int
}

func CacheIterateEntriesEncodeRequest(name string, tableIndex int, batch int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.IterateEntries")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheIterateEntriesRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, CacheIterateEntriesRequestTableIndexFieldOffset, tableIndex)
    bufutil.EncodeInt(initialFrame.Content, CacheIterateEntriesRequestBatchFieldOffset, batch)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    return clientMessage
}

func CacheIterateEntriesDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheIterateEntriesRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheIterateEntriesRequestParameters)
    initialFrame := iterator.Next()
    request.tableIndex = bufutil.DecodeInt(initialFrame.Content, CacheIterateEntriesRequestTableIndexFieldOffset)
    request.batch = bufutil.DecodeInt(initialFrame.Content, CacheIterateEntriesRequestBatchFieldOffset)
    request.name = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheIterateEntriesResponseParameters struct {
    /**
    * The slot number (or index) to start the iterator
    */
tableIndex int
    /**
    * TODO DOC
    */
entries java.util.List<[]serialization.Data, []serialization.Data>
}

func CacheIterateEntriesEncodeResponse(tableIndex int , entries []serialization.Data, []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheIterateEntriesResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheIterateEntriesResponseMessageType)
    bufutil.EncodeInt(initialFrame.Content, CacheIterateEntriesResponseTableIndexFieldOffset, tableIndex)
    clientMessage.Add(initialFrame)

    EntryListCodec.encode(clientMessage, entries, DataCodecEncode, DataCodecEncode)
    return clientMessage
}

func CacheIterateEntriesDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheIterateEntriesResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheIterateEntriesResponseParameters)
    initialFrame := iterator.Next()
    response.tableIndex = bufutil.DecodeInt(initialFrame.Content, CacheIterateEntriesResponseTableIndexFieldOffset)
    response.entries = EntryListCodec.decode(iterator, DataCodecDecode, DataCodecDecode)
    return response
}

