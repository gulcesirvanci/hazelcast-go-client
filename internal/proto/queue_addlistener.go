/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds an listener for this collection. Listener will be notified or all collection add/remove events.
 */
//@Generated("2e78a39347fbb09dd4388fe7c06d336b")
const (
    //hex: 0x031100
    QueueAddListenerRequestMessageType = 200960
    //hex: 0x031101
    QueueAddListenerResponseMessageType = 200961
    QueueAddListenerRequestIncludeValueFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    QueueAddListenerRequestLocalOnlyFieldOffset = QueueAddListenerRequestIncludeValueFieldOffset + bufutil.BooleanSizeInBytes
    QueueAddListenerRequestInitialFrameSize = QueueAddListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    QueueAddListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    QueueAddListenerResponseInitialFrameSize = QueueAddListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    QueueAddListenerEventItemUuidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    QueueAddListenerEventItemEventTypeFieldOffset = QueueAddListenerEventItemUuidFieldOffset + bufutil.UUIDSizeInBytes
    QueueAddListenerEventItemInitialFrameSize = QueueAddListenerEventItemEventTypeFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x031102
    QueueAddListenerEventItemMessageType = 200962


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueAddListenerRequestParameters struct {

    /**
    * Name of the Queue
    */
name string

    /**
    * <tt>true</tt> if the updated item should be passed to the item listener, <tt>false</tt> otherwise.
    */
includeValue bool

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func QueueAddListenerEncodeRequest(name string, includeValue bool, localOnly bool) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Queue.AddListener")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, QueueAddListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, QueueAddListenerRequestIncludeValueFieldOffset, includeValue)
    bufutil.EncodeBoolean(initialFrame.Content, QueueAddListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type QueueAddListenerResponseParameters struct {
    /**
    * The registration id
    */
response string
}



func QueueAddListenerDecodeResponse(clientMessage *bufutil.ClientMessage) *QueueAddListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(QueueAddListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, QueueAddListenerResponseResponseFieldOffset)
    return response
}


    type QueueAddListenerAbstractEventItemFunc func(/* @Nullable */ item serialization.Data, uuid string, eventType int32)

func QueueAddListenerHandle(clientMessage *bufutil.ClientMessage, handleEventItem QueueAddListenerAbstractEventItemFunc){
    messageType := clientMessage.GetMessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == QueueAddListenerEventItemMessageType {
        initialFrame := iterator.Next()
        uuid := bufutil.DecodeUUID(initialFrame.Content, QueueAddListenerEventItemUuidFieldOffset)
        eventType := bufutil.DecodeInt(initialFrame.Content, QueueAddListenerEventItemEventTypeFieldOffset)
        item := bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode).(serialization.Data)  
        handleEventItem(item, uuid, eventType)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
        }

