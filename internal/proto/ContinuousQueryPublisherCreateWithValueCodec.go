/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("6d81bafcc98ada26a7619c662c7c1f8a")
const (
    //hex: 0x160100
    ContinuousQueryPublisherCreateWithValueRequestMessageType = 1442048
    //hex: 0x160101
    ContinuousQueryPublisherCreateWithValueResponseMessageType = 1442049
    ContinuousQueryPublisherCreateWithValueRequestBatchSizeFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ContinuousQueryPublisherCreateWithValueRequestBufferSizeFieldOffset = ContinuousQueryPublisherCreateWithValueRequestBatchSizeFieldOffset + bufutil.IntSizeInBytes
    ContinuousQueryPublisherCreateWithValueRequestDelaySecondsFieldOffset = ContinuousQueryPublisherCreateWithValueRequestBufferSizeFieldOffset + bufutil.IntSizeInBytes
    ContinuousQueryPublisherCreateWithValueRequestPopulateFieldOffset = ContinuousQueryPublisherCreateWithValueRequestDelaySecondsFieldOffset + bufutil.LongSizeInBytes
    ContinuousQueryPublisherCreateWithValueRequestCoalesceFieldOffset = ContinuousQueryPublisherCreateWithValueRequestPopulateFieldOffset + bufutil.BooleanSizeInBytes
    ContinuousQueryPublisherCreateWithValueRequestInitialFrameSize = ContinuousQueryPublisherCreateWithValueRequestCoalesceFieldOffset + bufutil.BooleanSizeInBytes
    ContinuousQueryPublisherCreateWithValueResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ContinuousQueryPublisherCreateWithValueRequestParameters struct {

    /**
    * Name of the map.
    */
mapName string

    /**
    * Name of the cache for query cache.
    */
cacheName string

    /**
    * The predicate to filter events which will be applied to the QueryCache.
    */
predicate serialization.Data

    /**
    * The size of batch. After reaching this minimum size, node immediately sends buffered events to QueryCache.
    */
batchSize int

    /**
    * Maximum number of events which can be stored in a buffer of partition.
    */
bufferSize int

    /**
    * The minimum number of delay seconds which an event waits in the buffer of node.
    */
delaySeconds int64

    /**
    * Flag to enable/disable initial population of the QueryCache.
    */
populate bool

    /**
    * Flag to enable/disable coalescing. If true, then only the last updated value for a key is placed in the
    * batch, otherwise all changed values are included in the update.
    */
coalesce bool
}

func ContinuousQueryPublisherCreateWithValueEncodeRequest(mapName string, cacheName string, predicate serialization.Data, batchSize int, bufferSize int, delaySeconds int64, populate bool, coalesce bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("ContinuousQuery.PublisherCreateWithValue")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ContinuousQueryPublisherCreateWithValueRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestBatchSizeFieldOffset, batchSize)
    bufutil.EncodeInt(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestBufferSizeFieldOffset, bufferSize)
    bufutil.EncodeLong(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestDelaySecondsFieldOffset, delaySeconds)
    bufutil.EncodeBoolean(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestPopulateFieldOffset, populate)
    bufutil.EncodeBoolean(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestCoalesceFieldOffset, coalesce)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, mapName)
    StringCodec.encode(clientMessage, cacheName)
    DataCodec.encode(clientMessage, predicate)
    return clientMessage
}

func ContinuousQueryPublisherCreateWithValueDecodeRequest(clientMessage *bufutil.ClientMessagex) *ContinuousQueryPublisherCreateWithValueRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ContinuousQueryPublisherCreateWithValueRequestParameters)
    initialFrame := iterator.Next()
    request.batchSize = bufutil.DecodeInt(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestBatchSizeFieldOffset)
    request.bufferSize = bufutil.DecodeInt(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestBufferSizeFieldOffset)
    request.delaySeconds = bufutil.DecodeLong(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestDelaySecondsFieldOffset)
    request.populate = bufutil.DecodeBoolean(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestPopulateFieldOffset)
    request.coalesce = bufutil.DecodeBoolean(initialFrame.Content, ContinuousQueryPublisherCreateWithValueRequestCoalesceFieldOffset)
    request.mapName = StringCodec.decode(iterator)
    request.cacheName = StringCodec.decode(iterator)
    request.predicate = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ContinuousQueryPublisherCreateWithValueResponseParameters struct {
    /**
    * Array of key-value pairs.
    */
response java.util.List<[]serialization.Data, []serialization.Data>
}

func ContinuousQueryPublisherCreateWithValueEncodeResponse(response []serialization.Data, []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ContinuousQueryPublisherCreateWithValueResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ContinuousQueryPublisherCreateWithValueResponseMessageType)
    clientMessage.Add(initialFrame)

    EntryListCodec.encode(clientMessage, response, DataCodecEncode, DataCodecEncode)
    return clientMessage
}

func ContinuousQueryPublisherCreateWithValueDecodeResponse(clientMessage *bufutil.ClientMessagex) *ContinuousQueryPublisherCreateWithValueResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ContinuousQueryPublisherCreateWithValueResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = EntryListCodec.decode(iterator, DataCodecDecode, DataCodecDecode)
    return response
}

