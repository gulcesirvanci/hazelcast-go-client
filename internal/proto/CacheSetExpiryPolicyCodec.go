/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Associates the specified key with the given {@link javax.cache.expiry.ExpiryPolicy}.
 * {@code expiryPolicy} takes precedence for these particular {@code keys} against any cache wide expiry policy.
 * If some keys in {@code keys} do not exist or are already expired, this call has no effect for those.
 */
//@Generated("b94bcacda6a8f063b59bede1a2972806")
const (
    //hex: 0x132200
    CacheSetExpiryPolicyRequestMessageType = 1253888
    //hex: 0x132201
    CacheSetExpiryPolicyResponseMessageType = 1253889
    CacheSetExpiryPolicyRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheSetExpiryPolicyResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    CacheSetExpiryPolicyResponseInitialFrameSize = CacheSetExpiryPolicyResponseResponseFieldOffset + bufutil.BooleanSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheSetExpiryPolicyRequestParameters struct {

    /**
    * name of the cache
    */
name string

    /**
    * The keys that are associated with the specified expiry policy.
    */
keys []serialization.Data

    /**
    * custom expiry policy for this operation
    */
expiryPolicy serialization.Data
}

func CacheSetExpiryPolicyEncodeRequest(name string, keys []serialization.Data, expiryPolicy serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.SetExpiryPolicy")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheSetExpiryPolicyRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encode(clientMessage, keys, DataCodecEncode)
    DataCodec.encode(clientMessage, expiryPolicy)
    return clientMessage
}

func CacheSetExpiryPolicyDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheSetExpiryPolicyRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheSetExpiryPolicyRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    request.keys = ListMultiFrameCodec.decode(iterator, DataCodecDecode)
    request.expiryPolicy = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheSetExpiryPolicyResponseParameters struct {
    /**
    * {
    */
response bool
}

func CacheSetExpiryPolicyEncodeResponse(response bool ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheSetExpiryPolicyResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheSetExpiryPolicyResponseMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CacheSetExpiryPolicyResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CacheSetExpiryPolicyDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheSetExpiryPolicyResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheSetExpiryPolicyResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeBoolean(initialFrame.Content, CacheSetExpiryPolicyResponseResponseFieldOffset)
    return response
}

