/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a new set configuration to a running cluster.
 * If a set configuration with the given {@code name} already exists, then
 * the new configuration is ignored and the existing one is preserved.
 */
//@Generated("546089cbb6371b327f9e6093849a7a8c")
const (
    //hex: 0x1B0500
    DynamicConfigAddSetConfigRequestMessageType = 1770752
    //hex: 0x1B0501
    DynamicConfigAddSetConfigResponseMessageType = 1770753
    DynamicConfigAddSetConfigRequestBackupCountFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddSetConfigRequestAsyncBackupCountFieldOffset = DynamicConfigAddSetConfigRequestBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddSetConfigRequestMaxSizeFieldOffset = DynamicConfigAddSetConfigRequestAsyncBackupCountFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddSetConfigRequestStatisticsEnabledFieldOffset = DynamicConfigAddSetConfigRequestMaxSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddSetConfigRequestMergeBatchSizeFieldOffset = DynamicConfigAddSetConfigRequestStatisticsEnabledFieldOffset + bufutil.BooleanSizeInBytes
    DynamicConfigAddSetConfigRequestInitialFrameSize = DynamicConfigAddSetConfigRequestMergeBatchSizeFieldOffset + bufutil.IntSizeInBytes
    DynamicConfigAddSetConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddSetConfigRequestParameters struct {

    /**
    * set's name
    */
name string

    /**
    * item listener configurations
    */
/* @Nullable */ listenerConfigs []]ListenerConfigHolder

    /**
    * number of synchronous backups
    */
backupCount int

    /**
    * number of asynchronous backups
    */
asyncBackupCount int

    /**
    * maximum size of the set
    */
maxSize int

    /**
    * {@code true} to enable gathering of statistics on the list, otherwise {@code false}
    */
statisticsEnabled bool

    /**
    * name of an existing configured split brain protection to be used to determine the minimum number of members
    * required in the cluster for the lock to remain functional. When {@code null}, split brain protection does not
    * apply to this lock configuration's operations.
    */
/* @Nullable */ splitBrainProtectionName string

    /**
    * TODO DOC
    */
mergePolicy string

    /**
    * TODO DOC
    */
mergeBatchSize int
}

func DynamicConfigAddSetConfigEncodeRequest(name string, /* @Nullable */ listenerConfigs Collection<ListenerConfigHolder>, backupCount int, asyncBackupCount int, maxSize int, statisticsEnabled bool, /* @Nullable */ splitBrainProtectionName string, mergePolicy string, mergeBatchSize int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("DynamicConfig.AddSetConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddSetConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddSetConfigRequestBackupCountFieldOffset, backupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddSetConfigRequestAsyncBackupCountFieldOffset, asyncBackupCount)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddSetConfigRequestMaxSizeFieldOffset, maxSize)
    bufutil.EncodeBoolean(initialFrame.Content, DynamicConfigAddSetConfigRequestStatisticsEnabledFieldOffset, statisticsEnabled)
    bufutil.EncodeInt(initialFrame.Content, DynamicConfigAddSetConfigRequestMergeBatchSizeFieldOffset, mergeBatchSize)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    ListMultiFrameCodec.encodeNullable(clientMessage, listenerConfigs, ListenerConfigHolderCodecEncode)
    CodecUtil.encodeNullable(clientMessage, splitBrainProtectionName, StringCodecEncode)
    StringCodec.encode(clientMessage, mergePolicy)
    return clientMessage
}

func DynamicConfigAddSetConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddSetConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(DynamicConfigAddSetConfigRequestParameters)
    initialFrame := iterator.Next()
    request.backupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddSetConfigRequestBackupCountFieldOffset)
    request.asyncBackupCount = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddSetConfigRequestAsyncBackupCountFieldOffset)
    request.maxSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddSetConfigRequestMaxSizeFieldOffset)
    request.statisticsEnabled = bufutil.DecodeBoolean(initialFrame.Content, DynamicConfigAddSetConfigRequestStatisticsEnabledFieldOffset)
    request.mergeBatchSize = bufutil.DecodeInt(initialFrame.Content, DynamicConfigAddSetConfigRequestMergeBatchSizeFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.listenerConfigs = ListMultiFrameCodec.decodeNullable(iterator, ListenerConfigHolderCodecDecode)
    request.splitBrainProtectionName = CodecUtil.decodeNullable(iterator, StringCodecDecode) 
    request.mergePolicy = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type DynamicConfigAddSetConfigResponseParameters struct {
}

func DynamicConfigAddSetConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, DynamicConfigAddSetConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, DynamicConfigAddSetConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func DynamicConfigAddSetConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *DynamicConfigAddSetConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(DynamicConfigAddSetConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

