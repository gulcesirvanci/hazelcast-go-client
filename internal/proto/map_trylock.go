
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Tries to acquire the lock for the specified key for the specified lease time.After lease time, the lock will be
 * released.If the lock is not available, then the current thread becomes disabled for thread scheduling
 * purposes and lies dormant until one of two things happens the lock is acquired by the current thread, or
 * the specified waiting time elapses.
 */
//@Generated("9ddfdd5d3a36300535ca2a458d9a07e3")
const (
    //hex: 0x011100
    MapTryLockRequestMessageType = 69888
    //hex: 0x011101
    MapTryLockResponseMessageType = 69889
    MapTryLockRequestThreadIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    MapTryLockRequestLeaseFieldOffset = MapTryLockRequestThreadIdFieldOffset + LongSizeInBytes
    MapTryLockRequestTimeoutFieldOffset = MapTryLockRequestLeaseFieldOffset + LongSizeInBytes
    MapTryLockRequestReferenceIdFieldOffset = MapTryLockRequestTimeoutFieldOffset + LongSizeInBytes
    MapTryLockRequestInitialFrameSize = MapTryLockRequestReferenceIdFieldOffset + LongSizeInBytes
    MapTryLockResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    MapTryLockResponseInitialFrameSize = MapTryLockResponseResponseFieldOffset + BooleanSizeInBytes

)

func MapTryLockEncodeRequest(name string, key serialization.Data, threadId int64, lease int64, timeout int64, referenceId int64) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("Map.TryLock")
	initialFrame := &Frame{Content: make([]byte, MapTryLockResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapTryLockRequestMessageType)
    EncodeLong(initialFrame.Content, MapTryLockRequestThreadIdFieldOffset, threadId)
    EncodeLong(initialFrame.Content, MapTryLockRequestLeaseFieldOffset, lease)
    EncodeLong(initialFrame.Content, MapTryLockRequestTimeoutFieldOffset, timeout)
    EncodeLong(initialFrame.Content, MapTryLockRequestReferenceIdFieldOffset, referenceId)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, key)

    return clientMessage
}


func MapTryLockDecodeResponse(clientMessage *ClientMessage) func() (/*** Returns true if successful, otherwise returns false*/response bool) {
    return func() (/*** Returns true if successful, otherwise returns false*/response bool) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeBoolean(initialFrame.Content, MapTryLockResponseResponseFieldOffset)
        return
    }
}

