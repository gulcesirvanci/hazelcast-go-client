/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("dadbcf20761603011881dee38d2abeb7")
const (
    //hex: 0x160400
    ContinuousQueryAddListenerRequestMessageType = 1442816
    //hex: 0x160401
    ContinuousQueryAddListenerResponseMessageType = 1442817
    ContinuousQueryAddListenerRequestLocalOnlyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ContinuousQueryAddListenerRequestInitialFrameSize = ContinuousQueryAddListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    ContinuousQueryAddListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ContinuousQueryAddListenerResponseInitialFrameSize = ContinuousQueryAddListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    ContinuousQueryAddListenerEventQueryCacheSingleInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x160402
    ContinuousQueryAddListenerEventQueryCacheSingleMessageType = 1442818

    ContinuousQueryAddListenerEventQueryCacheBatchPartitionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ContinuousQueryAddListenerEventQueryCacheBatchInitialFrameSize = ContinuousQueryAddListenerEventQueryCacheBatchPartitionIdFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x160403
    ContinuousQueryAddListenerEventQueryCacheBatchMessageType = 1442819


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ContinuousQueryAddListenerRequestParameters struct {

    /**
    * Name of the MapListener which will be used to listen this QueryCache
    */
listenerName string

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func ContinuousQueryAddListenerEncodeRequest(listenerName string, localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("ContinuousQuery.AddListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ContinuousQueryAddListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, ContinuousQueryAddListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, listenerName)
    return clientMessage
}

func ContinuousQueryAddListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *ContinuousQueryAddListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ContinuousQueryAddListenerRequestParameters)
    initialFrame := iterator.Next()
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, ContinuousQueryAddListenerRequestLocalOnlyFieldOffset)
    request.listenerName = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ContinuousQueryAddListenerResponseParameters struct {
    /**
    * Registration id for the listener.
    */
response UUID
}

func ContinuousQueryAddListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ContinuousQueryAddListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ContinuousQueryAddListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, ContinuousQueryAddListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ContinuousQueryAddListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *ContinuousQueryAddListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ContinuousQueryAddListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, ContinuousQueryAddListenerResponseResponseFieldOffset)
    return response
}

    func encodeContinuousQueryAddListenerEvent(data QueryCacheEventData) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ContinuousQueryAddListenerEventQueryCacheSingleInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ContinuousQueryAddListenerEventQueryCacheSingleMessageType)
        clientMessage.Add(initialFrame)

        QueryCacheEventDataCodec.encode(clientMessage, data)
        return clientMessage
    }
    func encodeContinuousQueryAddListenerEvent(events Collection<QueryCacheEventData>, source string, partitionId int) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ContinuousQueryAddListenerEventQueryCacheBatchInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ContinuousQueryAddListenerEventQueryCacheBatchMessageType)
        encodeInt(initialFrame.Content, ContinuousQueryAddListenerEventQueryCacheBatchPartitionIdFieldOffset, partitionId)
        clientMessage.Add(initialFrame)

        ListMultiFrameCodec.encode(clientMessage, events, QueryCacheEventDataCodecEncode)
        StringCodec.encode(clientMessage, source)
        return clientMessage
    }

    type ContinuousQueryAddListenerAbstractEventItemFunc func(data QueryCacheEventData)
    type ContinuousQueryAddListenerAbstractEventItemFunc func(events Collection<QueryCacheEventData>, source string, partitionId int)

     func ContinuousQueryAddListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem ContinuousQueryAddListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == ContinuousQueryAddListenerEventQueryCacheSingleMessageType {
             //empty initial frame
             iterator.Next()
             data := QueryCacheEventDataCodec.decode(iterator)
             handleEventItem(data)
             return
          }
         if messageType == ContinuousQueryAddListenerEventQueryCacheBatchMessageType {
             initialFrame := iterator.Next()
             partitionId := bufutil.DecodeInt(initialFrame.Content, ContinuousQueryAddListenerEventQueryCacheBatchPartitionIdFieldOffset)
             events := ListMultiFrameCodec.decode(iterator, QueryCacheEventDataCodecDecode)
             source := StringCodec.decode(iterator)
             handleEventItem(events, source, partitionId)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

