/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("a316a37c2765f5105256303b2b0de77c")
const (
    //hex: 0x131100
    CacheManagementConfigRequestMessageType = 1249536
    //hex: 0x131101
    CacheManagementConfigResponseMessageType = 1249537
    CacheManagementConfigRequestIsStatFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    CacheManagementConfigRequestEnabledFieldOffset = CacheManagementConfigRequestIsStatFieldOffset + bufutil.BooleanSizeInBytes
    CacheManagementConfigRequestInitialFrameSize = CacheManagementConfigRequestEnabledFieldOffset + bufutil.BooleanSizeInBytes
    CacheManagementConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheManagementConfigRequestParameters struct {

    /**
    * Name of the cache.
    */
name string

    /**
    * true if enabling statistics, false if enabling management.
    */
isStat bool

    /**
    * true if enabled, false to disable.
    */
enabled bool

    /**
    * the address of the host to enable.
    */
address Address
}

func CacheManagementConfigEncodeRequest(name string, isStat bool, enabled bool, address Address) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = true
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Cache.ManagementConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheManagementConfigRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, CacheManagementConfigRequestIsStatFieldOffset, isStat)
    bufutil.EncodeBoolean(initialFrame.Content, CacheManagementConfigRequestEnabledFieldOffset, enabled)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    AddressCodec.encode(clientMessage, address)
    return clientMessage
}

func CacheManagementConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *CacheManagementConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(CacheManagementConfigRequestParameters)
    initialFrame := iterator.Next()
    request.isStat = bufutil.DecodeBoolean(initialFrame.Content, CacheManagementConfigRequestIsStatFieldOffset)
    request.enabled = bufutil.DecodeBoolean(initialFrame.Content, CacheManagementConfigRequestEnabledFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.address = AddressCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type CacheManagementConfigResponseParameters struct {
}

func CacheManagementConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, CacheManagementConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, CacheManagementConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func CacheManagementConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *CacheManagementConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(CacheManagementConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

