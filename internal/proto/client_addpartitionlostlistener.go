
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/core"



)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a partition lost listener to the cluster.
 */
//@Generated("d4c97e8675c4069298f73e9bdfe2dd60")
const (
    //hex: 0x000600
    ClientAddPartitionLostListenerRequestMessageType = 1536
    //hex: 0x000601
    ClientAddPartitionLostListenerResponseMessageType = 1537
    ClientAddPartitionLostListenerRequestLocalOnlyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ClientAddPartitionLostListenerRequestInitialFrameSize = ClientAddPartitionLostListenerRequestLocalOnlyFieldOffset + BooleanSizeInBytes
    ClientAddPartitionLostListenerResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    ClientAddPartitionLostListenerResponseInitialFrameSize = ClientAddPartitionLostListenerResponseResponseFieldOffset + UUIDSizeInBytes
    ClientAddPartitionLostListenerEventPartitionLostPartitionIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    ClientAddPartitionLostListenerEventPartitionLostLostBackupCountFieldOffset = ClientAddPartitionLostListenerEventPartitionLostPartitionIdFieldOffset + IntSizeInBytes
    ClientAddPartitionLostListenerEventPartitionLostSourceFieldOffset = ClientAddPartitionLostListenerEventPartitionLostLostBackupCountFieldOffset + IntSizeInBytes
    ClientAddPartitionLostListenerEventPartitionLostInitialFrameSize = ClientAddPartitionLostListenerEventPartitionLostSourceFieldOffset + UUIDSizeInBytes
    //hex: 0x000602
    ClientAddPartitionLostListenerEventPartitionLostMessageType = 1538


)

func ClientAddPartitionLostListenerEncodeRequest(localOnly bool) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Client.AddPartitionLostListener")
	initialFrame := &Frame{Content: make([]byte, ClientAddPartitionLostListenerResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ClientAddPartitionLostListenerRequestMessageType)
    EncodeBoolean(initialFrame.Content, ClientAddPartitionLostListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    return clientMessage
}


func ClientAddPartitionLostListenerDecodeResponse(clientMessage *ClientMessage) func() (/*** The listener registration id.*/response *core.Uuid) {
    return func() (/*** The listener registration id.*/response *core.Uuid) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeUUID(initialFrame.Content, ClientAddPartitionLostListenerResponseResponseFieldOffset)
        return
    }
}


type ClientAddPartitionLostListenerHandlePartitionLostFunc func(partitionId int32, lostBackupCount int32, /* @Nullable */ source *core.Uuid)

func ClientAddPartitionLostListenerHandle(clientMessage *ClientMessage, handlePartitionLost ClientAddPartitionLostListenerHandlePartitionLostFunc){
    messageType := clientMessage.MessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == ClientAddPartitionLostListenerEventPartitionLostMessageType {
        initialFrame := iterator.Next()
        partitionId := DecodeInt(initialFrame.Content, ClientAddPartitionLostListenerEventPartitionLostPartitionIdFieldOffset)
        lostBackupCount := DecodeInt(initialFrame.Content, ClientAddPartitionLostListenerEventPartitionLostLostBackupCountFieldOffset)
        source := DecodeUUID(initialFrame.Content, ClientAddPartitionLostListenerEventPartitionLostSourceFieldOffset)
        handlePartitionLost(partitionId, lostBackupCount, source)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
    }

