
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/core"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds a MapPartitionLostListener. The addPartitionLostListener returns a register-id. This id is needed to remove
 * the MapPartitionLostListener using the removePartitionLostListener(String) method.
 * There is no check for duplicate registrations, so if you register the listener twice, it will get events twice.
 * IMPORTANT: Please see com.hazelcast.partition.PartitionLostListener for weaknesses.
 * IMPORTANT: Listeners registered from HazelcastClient may miss some of the map partition lost events due
 * to design limitations.
 */
//@Generated("e1755e2f358ae74b50194bba1df9a39d")
const (
    //hex: 0x011B00
    MapAddPartitionLostListenerRequestMessageType = 72448
    //hex: 0x011B01
    MapAddPartitionLostListenerResponseMessageType = 72449
    MapAddPartitionLostListenerRequestLocalOnlyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    MapAddPartitionLostListenerRequestInitialFrameSize = MapAddPartitionLostListenerRequestLocalOnlyFieldOffset + BooleanSizeInBytes
    MapAddPartitionLostListenerResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    MapAddPartitionLostListenerResponseInitialFrameSize = MapAddPartitionLostListenerResponseResponseFieldOffset + UUIDSizeInBytes
    MapAddPartitionLostListenerEventMapPartitionLostPartitionIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    MapAddPartitionLostListenerEventMapPartitionLostUuidFieldOffset = MapAddPartitionLostListenerEventMapPartitionLostPartitionIdFieldOffset + IntSizeInBytes
    MapAddPartitionLostListenerEventMapPartitionLostInitialFrameSize = MapAddPartitionLostListenerEventMapPartitionLostUuidFieldOffset + UUIDSizeInBytes
    //hex: 0x011B02
    MapAddPartitionLostListenerEventMapPartitionLostMessageType = 72450


)

func MapAddPartitionLostListenerEncodeRequest(name string, localOnly bool) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Map.AddPartitionLostListener")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapAddPartitionLostListenerRequestMessageType)
    EncodeBoolean(initialFrame.Content, MapAddPartitionLostListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)

    return clientMessage
}


func MapAddPartitionLostListenerDecodeResponse(clientMessage *ClientMessage) func() ( /*** returns the registration id for the MapPartitionLostListener.*/response core.Uuid) {
    return func() (/*** returns the registration id for the MapPartitionLostListener.*/response core.Uuid) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeUUID(initialFrame.Content, MapAddPartitionLostListenerResponseResponseFieldOffset)
        return
    }
}


type MapAddPartitionLostListenerHandleMapPartitionLostFunc func(partitionId int32, uuid core.Uuid)

func MapAddPartitionLostListenerHandle(clientMessage *ClientMessage, handleMapPartitionLost MapAddPartitionLostListenerHandleMapPartitionLostFunc){
    messageType := clientMessage.MessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == MapAddPartitionLostListenerEventMapPartitionLostMessageType {
        initialFrame := iterator.Next()
        partitionId := DecodeInt(initialFrame.Content, MapAddPartitionLostListenerEventMapPartitionLostPartitionIdFieldOffset)
        uuid := DecodeUUID(initialFrame.Content, MapAddPartitionLostListenerEventMapPartitionLostUuidFieldOffset)
        handleMapPartitionLost(partitionId, uuid)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
    }

