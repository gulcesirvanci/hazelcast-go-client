/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("16a62fbff3468f230bd96fac8746ca22")
const (
    //hex: 0x150200
    TransactionCreateRequestMessageType = 1376768
    //hex: 0x150201
    TransactionCreateResponseMessageType = 1376769
    TransactionCreateRequestTimeoutFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TransactionCreateRequestDurabilityFieldOffset = TransactionCreateRequestTimeoutFieldOffset + bufutil.LongSizeInBytes
    TransactionCreateRequestTransactionTypeFieldOffset = TransactionCreateRequestDurabilityFieldOffset + bufutil.IntSizeInBytes
    TransactionCreateRequestThreadIdFieldOffset = TransactionCreateRequestTransactionTypeFieldOffset + bufutil.IntSizeInBytes
    TransactionCreateRequestInitialFrameSize = TransactionCreateRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    TransactionCreateResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    TransactionCreateResponseInitialFrameSize = TransactionCreateResponseResponseFieldOffset + bufutil.UUIDSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionCreateRequestParameters struct {

    /**
    * The maximum allowed duration for the transaction operations.
    */
timeout int64

    /**
    * The durability of the transaction
    */
durability int

    /**
    * Identifies the type of the transaction. Possible values are:
    * 1 (Two phase):  The two phase commit is more than the classic two phase commit (if you want a regular
    * two phase commit, use local). Before it commits, it copies the commit-log to other members, so in
    * case of member failure, another member can complete the commit.
    * 2 (Local): Unlike the name suggests, local is a two phase commit. So first all cohorts are asked
    * to prepare if everyone agrees then all cohorts are asked to commit. The problem happens when during
    * the commit phase one or more members crash, that the system could be left in an inconsistent state.
    */
transactionType int

    /**
    * The thread id for the transaction.
    */
threadId int64
}

func TransactionCreateEncodeRequest(timeout int64, durability int, transactionType int, threadId int64) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(true)
    clientMessage.SetOperationName("Transaction.Create")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionCreateRequestMessageType)
    bufutil.EncodeLong(initialFrame.Content, TransactionCreateRequestTimeoutFieldOffset, timeout)
    bufutil.EncodeInt(initialFrame.Content, TransactionCreateRequestDurabilityFieldOffset, durability)
    bufutil.EncodeInt(initialFrame.Content, TransactionCreateRequestTransactionTypeFieldOffset, transactionType)
    bufutil.EncodeLong(initialFrame.Content, TransactionCreateRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func TransactionCreateDecodeRequest(clientMessage *bufutil.ClientMessagex) *TransactionCreateRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(TransactionCreateRequestParameters)
    initialFrame := iterator.Next()
    request.timeout = bufutil.DecodeLong(initialFrame.Content, TransactionCreateRequestTimeoutFieldOffset)
    request.durability = bufutil.DecodeInt(initialFrame.Content, TransactionCreateRequestDurabilityFieldOffset)
    request.transactionType = bufutil.DecodeInt(initialFrame.Content, TransactionCreateRequestTransactionTypeFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, TransactionCreateRequestThreadIdFieldOffset)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionCreateResponseParameters struct {
    /**
    * The transaction id for the created transaction.
    */
response UUID
}

func TransactionCreateEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, TransactionCreateResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionCreateResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, TransactionCreateResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func TransactionCreateDecodeResponse(clientMessage *bufutil.ClientMessagex) *TransactionCreateResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(TransactionCreateResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, TransactionCreateResponseResponseFieldOffset)
    return response
}

