
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
 * If this map permits null values, then a return value of null does not
 * necessarily indicate that the map contains no mapping for the key; it's also possible that the map
 * explicitly maps the key to null.  The #containsKey operation may be used to distinguish these two cases.
 */
//@Generated("0da11dadf98af358d2089d26169a9b4b")
const (
    //hex: 0x0D0600
    ReplicatedMapGetRequestMessageType = 853504
    //hex: 0x0D0601
    ReplicatedMapGetResponseMessageType = 853505
    ReplicatedMapGetRequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes
    ReplicatedMapGetResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func ReplicatedMapGetEncodeRequest(name string, key serialization.Data) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( true )
    clientMessage.SetOperationName("ReplicatedMap.Get")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, ReplicatedMapGetRequestMessageType)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, key)

    return clientMessage
}


func ReplicatedMapGetDecodeResponse(clientMessage *ClientMessage) func() (/*** The value to which the specified key is mapped, or null if this map contains no mapping for the key*//* @Nullable */response serialization.Data) {
    return func() (/*** The value to which the specified key is mapped, or null if this map contains no mapping for the key*//* @Nullable */response serialization.Data) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        response = DecodeNullable(iterator, DataCodecDecode).(serialization.Data) // 2  
        return
    }
}

