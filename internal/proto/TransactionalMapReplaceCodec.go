/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Replaces the entry for a key only if it is currently mapped to some value. The object to be replaced will be
 * accessible only in the current transaction context until the transaction is committed.
 */
//@Generated("861ff259ee91a4886ce4d22ef68ad575")
const (
    //hex: 0x0E0900
    TransactionalMapReplaceRequestMessageType = 919808
    //hex: 0x0E0901
    TransactionalMapReplaceResponseMessageType = 919809
    TransactionalMapReplaceRequestTxnIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    TransactionalMapReplaceRequestThreadIdFieldOffset = TransactionalMapReplaceRequestTxnIdFieldOffset + bufutil.UUIDSizeInBytes
    TransactionalMapReplaceRequestInitialFrameSize = TransactionalMapReplaceRequestThreadIdFieldOffset + bufutil.LongSizeInBytes
    TransactionalMapReplaceResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapReplaceRequestParameters struct {

    /**
    * Name of the Transactional Map
    */
name string

    /**
    * ID of the this transaction operation
    */
txnId UUID

    /**
    * The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
    */
threadId int64

    /**
    * The specified key
    */
key serialization.Data

    /**
    * The value replaced the previous value
    */
value serialization.Data
}

func TransactionalMapReplaceEncodeRequest(name string, txnId UUID, threadId int64, key serialization.Data, value serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("TransactionalMap.Replace")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapReplaceRequestMessageType)
    bufutil.EncodeUUID(initialFrame.Content, TransactionalMapReplaceRequestTxnIdFieldOffset, txnId)
    bufutil.EncodeLong(initialFrame.Content, TransactionalMapReplaceRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, key)
    DataCodec.encode(clientMessage, value)
    return clientMessage
}

func TransactionalMapReplaceDecodeRequest(clientMessage *bufutil.ClientMessagex) *TransactionalMapReplaceRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(TransactionalMapReplaceRequestParameters)
    initialFrame := iterator.Next()
    request.txnId = bufutil.DecodeUUID(initialFrame.Content, TransactionalMapReplaceRequestTxnIdFieldOffset)
    request.threadId = bufutil.DecodeLong(initialFrame.Content, TransactionalMapReplaceRequestThreadIdFieldOffset)
    request.name = StringCodec.decode(iterator)
    request.key = DataCodec.decode(iterator)
    request.value = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type TransactionalMapReplaceResponseParameters struct {
    /**
    * The previous value associated with key, or null if there was no mapping for key.
    */
/* @Nullable */ response serialization.Data
}

func TransactionalMapReplaceEncodeResponse(/* @Nullable */ response serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, TransactionalMapReplaceResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, TransactionalMapReplaceResponseMessageType)
    clientMessage.Add(initialFrame)

    CodecUtil.encodeNullable(clientMessage, response, DataCodecEncode)
    return clientMessage
}

func TransactionalMapReplaceDecodeResponse(clientMessage *bufutil.ClientMessagex) *TransactionalMapReplaceResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(TransactionalMapReplaceResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = CodecUtil.decodeNullable(iterator, DataCodecDecode) 
    return response
}

