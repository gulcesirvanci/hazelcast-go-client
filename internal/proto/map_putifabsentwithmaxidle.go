
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
    "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Puts an entry into this map with a given ttl (time to live) value if the specified key is not already associated
 * with a value. Entry will expire and get evicted after the ttl or maxIdle, whichever comes first.
 */
//@Generated("c12a47d686981313552615d268ab74ea")
const (
    //hex: 0x014600
    MapPutIfAbsentWithMaxIdleRequestMessageType = 83456
    //hex: 0x014601
    MapPutIfAbsentWithMaxIdleResponseMessageType = 83457
    MapPutIfAbsentWithMaxIdleRequestThreadIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    MapPutIfAbsentWithMaxIdleRequestTtlFieldOffset = MapPutIfAbsentWithMaxIdleRequestThreadIdFieldOffset + LongSizeInBytes
    MapPutIfAbsentWithMaxIdleRequestMaxIdleFieldOffset = MapPutIfAbsentWithMaxIdleRequestTtlFieldOffset + LongSizeInBytes
    MapPutIfAbsentWithMaxIdleRequestInitialFrameSize = MapPutIfAbsentWithMaxIdleRequestMaxIdleFieldOffset + LongSizeInBytes
    MapPutIfAbsentWithMaxIdleResponseInitialFrameSize = CorrelationIdFieldOffset + IntSizeInBytes

)

func MapPutIfAbsentWithMaxIdleEncodeRequest(name string, key serialization.Data, value serialization.Data, threadId int64, ttl int64, maxIdle int64) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Map.PutIfAbsentWithMaxIdle")
	initialFrame := &Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapPutIfAbsentWithMaxIdleRequestMessageType)
    EncodeLong(initialFrame.Content, MapPutIfAbsentWithMaxIdleRequestThreadIdFieldOffset, threadId)
    EncodeLong(initialFrame.Content, MapPutIfAbsentWithMaxIdleRequestTtlFieldOffset, ttl)
    EncodeLong(initialFrame.Content, MapPutIfAbsentWithMaxIdleRequestMaxIdleFieldOffset, maxIdle)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, key)


    DataCodecEncode(clientMessage, value)

    return clientMessage
}


func MapPutIfAbsentWithMaxIdleDecodeResponse(clientMessage *ClientMessage) func() ( /*** old value of the entry*//* @Nullable */response serialization.Data) {
    return func() (/*** old value of the entry*//* @Nullable */response serialization.Data) {
        iterator := clientMessage.FrameIterator()
        //empty initial frame
        iterator.Next()
        response = DecodeNullable(iterator, DataCodecDecode).(serialization.Data)
        return
    }
}

