/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * TODO DOC
 */
//@Generated("1f9ebdee74bb9cb80d318647efcdf26f")
const (
    //hex: 0x000800
    ClientAddPartitionLostListenerRequestMessageType = 2048
    //hex: 0x000801
    ClientAddPartitionLostListenerResponseMessageType = 2049
    ClientAddPartitionLostListenerRequestLocalOnlyFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddPartitionLostListenerRequestInitialFrameSize = ClientAddPartitionLostListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    ClientAddPartitionLostListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddPartitionLostListenerResponseInitialFrameSize = ClientAddPartitionLostListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    ClientAddPartitionLostListenerEventPartitionLostPartitionIdFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddPartitionLostListenerEventPartitionLostLostBackupCountFieldOffset = ClientAddPartitionLostListenerEventPartitionLostPartitionIdFieldOffset + bufutil.IntSizeInBytes
    ClientAddPartitionLostListenerEventPartitionLostInitialFrameSize = ClientAddPartitionLostListenerEventPartitionLostLostBackupCountFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x000802
    ClientAddPartitionLostListenerEventPartitionLostMessageType = 2050


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientAddPartitionLostListenerRequestParameters struct {

    /**
    * if true only node that has the partition sends the request, if false
    * sends all partition lost events.
    */
localOnly bool
}

func ClientAddPartitionLostListenerEncodeRequest(localOnly bool) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Client.AddPartitionLostListener")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddPartitionLostListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, ClientAddPartitionLostListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    return clientMessage
}

func ClientAddPartitionLostListenerDecodeRequest(clientMessage *bufutil.ClientMessagex) *ClientAddPartitionLostListenerRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(ClientAddPartitionLostListenerRequestParameters)
    initialFrame := iterator.Next()
    request.localOnly = bufutil.DecodeBoolean(initialFrame.Content, ClientAddPartitionLostListenerRequestLocalOnlyFieldOffset)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type ClientAddPartitionLostListenerResponseParameters struct {
    /**
    * The listener registration id.
    */
response UUID
}

func ClientAddPartitionLostListenerEncodeResponse(response UUID ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, ClientAddPartitionLostListenerResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddPartitionLostListenerResponseMessageType)
    bufutil.EncodeUUID(initialFrame.Content, ClientAddPartitionLostListenerResponseResponseFieldOffset, response)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func ClientAddPartitionLostListenerDecodeResponse(clientMessage *bufutil.ClientMessagex) *ClientAddPartitionLostListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(ClientAddPartitionLostListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, ClientAddPartitionLostListenerResponseResponseFieldOffset)
    return response
}

    func encodeClientAddPartitionLostListenerEvent(partitionId int, lostBackupCount int, /* @Nullable */ source Address) *bufutil.ClientMessagex {
        clientMessage := bufutil.createForEncode()
    	initialFrame := bufutil.Frame{make([]byte, ClientAddPartitionLostListenerEventPartitionLostInitialFrameSize), bufutil.UNFRAGMENTED_MESSAGE}
        initialFrame.flags |= ClientMessage.IS_EventFLAG
        bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, ClientAddPartitionLostListenerEventPartitionLostMessageType)
        encodeInt(initialFrame.Content, ClientAddPartitionLostListenerEventPartitionLostPartitionIdFieldOffset, partitionId)
        encodeInt(initialFrame.Content, ClientAddPartitionLostListenerEventPartitionLostLostBackupCountFieldOffset, lostBackupCount)
        clientMessage.Add(initialFrame)

        CodecUtil.encodeNullable(clientMessage, source, AddressCodecEncode)
        return clientMessage
    }

    type ClientAddPartitionLostListenerAbstractEventItemFunc func(partitionId int, lostBackupCount int, /* @Nullable */ source Address)

     func ClientAddPartitionLostListenerHandle(clientMessage *bufutil.ClientMessagex, handleEventItem ClientAddPartitionLostListenerAbstractEventItemFunc){
        messageType := clientMessage.getMessageType()
        iterator := clientMessage.FrameIterator()
         if messageType == ClientAddPartitionLostListenerEventPartitionLostMessageType {
             initialFrame := iterator.Next()
             partitionId := bufutil.DecodeInt(initialFrame.Content, ClientAddPartitionLostListenerEventPartitionLostPartitionIdFieldOffset)
             lostBackupCount := bufutil.DecodeInt(initialFrame.Content, ClientAddPartitionLostListenerEventPartitionLostLostBackupCountFieldOffset)
             source := CodecUtil.decodeNullable(iterator, AddressCodecDecode) 
             handleEventItem(partitionId, lostBackupCount, source)
             return
          }
         Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
     }

