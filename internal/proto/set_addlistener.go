/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto


import (
    "github.com/hazelcast/hazelcast-go-client/internal/proto/bufutil"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Adds an item listener for this collection. Listener will be notified for all collection add/remove events.
 */
//@Generated("952365e6b19f4a4503281acf159ee015")
const (
    //hex: 0x060B00
    SetAddListenerRequestMessageType = 396032
    //hex: 0x060B01
    SetAddListenerResponseMessageType = 396033
    SetAddListenerRequestIncludeValueFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SetAddListenerRequestLocalOnlyFieldOffset = SetAddListenerRequestIncludeValueFieldOffset + bufutil.BooleanSizeInBytes
    SetAddListenerRequestInitialFrameSize = SetAddListenerRequestLocalOnlyFieldOffset + bufutil.BooleanSizeInBytes
    SetAddListenerResponseResponseFieldOffset = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
    SetAddListenerResponseInitialFrameSize = SetAddListenerResponseResponseFieldOffset + bufutil.UUIDSizeInBytes
    SetAddListenerEventItemUuidFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    SetAddListenerEventItemEventTypeFieldOffset = SetAddListenerEventItemUuidFieldOffset + bufutil.UUIDSizeInBytes
    SetAddListenerEventItemInitialFrameSize = SetAddListenerEventItemEventTypeFieldOffset + bufutil.IntSizeInBytes
    //hex: 0x060B02
    SetAddListenerEventItemMessageType = 396034


)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SetAddListenerRequestParameters struct {

    /**
    * Name of the Set
    */
name string

    /**
    * if set to true, the event shall also include the value.
    */
includeValue bool

    /**
    * if true fires events that originated from this node only, otherwise fires all events
    */
localOnly bool
}

func SetAddListenerEncodeRequest(name string, includeValue bool, localOnly bool) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = false
    clientMessage.SetOperationName("Set.AddListener")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, SetAddListenerRequestMessageType)
    bufutil.EncodeBoolean(initialFrame.Content, SetAddListenerRequestIncludeValueFieldOffset, includeValue)
    bufutil.EncodeBoolean(initialFrame.Content, SetAddListenerRequestLocalOnlyFieldOffset, localOnly)
    clientMessage.Add(initialFrame)
    bufutil.StringCodecEncode(clientMessage, name)
    return clientMessage
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type SetAddListenerResponseParameters struct {
    /**
    * The registration id.
    */
response string
}



func SetAddListenerDecodeResponse(clientMessage *bufutil.ClientMessage) *SetAddListenerResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(SetAddListenerResponseParameters)
    initialFrame := iterator.Next()
    response.response = bufutil.DecodeUUID(initialFrame.Content, SetAddListenerResponseResponseFieldOffset)
    return response
}


    type SetAddListenerAbstractEventItemFunc func(/* @Nullable */ item serialization.Data, uuid string, eventType int32)

func SetAddListenerHandle(clientMessage *bufutil.ClientMessage, handleEventItem SetAddListenerAbstractEventItemFunc){
    messageType := clientMessage.GetMessageType()
    iterator := clientMessage.FrameIterator()
    if messageType == SetAddListenerEventItemMessageType {
        initialFrame := iterator.Next()
        uuid := bufutil.DecodeUUID(initialFrame.Content, SetAddListenerEventItemUuidFieldOffset)
        eventType := bufutil.DecodeInt(initialFrame.Content, SetAddListenerEventItemEventTypeFieldOffset)
        item := bufutil.DecodeNullable(iterator, bufutil.DataCodecDecode).(serialization.Data)  
        handleEventItem(item, uuid, eventType)
        return
        }
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
        }

