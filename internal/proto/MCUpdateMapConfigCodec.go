/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Updates the config of a map on the member it's called on.
 */
//@Generated("a0d540e21b7541fb43db97fd1c9cf92f")
const (
    //hex: 0x200400
    MCUpdateMapConfigRequestMessageType = 2098176
    //hex: 0x200401
    MCUpdateMapConfigResponseMessageType = 2098177
    MCUpdateMapConfigRequestTimeToLiveSecondsFieldOffset = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MCUpdateMapConfigRequestMaxIdleSecondsFieldOffset = MCUpdateMapConfigRequestTimeToLiveSecondsFieldOffset + bufutil.IntSizeInBytes
    MCUpdateMapConfigRequestEvictionPolicyFieldOffset = MCUpdateMapConfigRequestMaxIdleSecondsFieldOffset + bufutil.IntSizeInBytes
    MCUpdateMapConfigRequestReadBackupDataFieldOffset = MCUpdateMapConfigRequestEvictionPolicyFieldOffset + bufutil.IntSizeInBytes
    MCUpdateMapConfigRequestMaxSizeFieldOffset = MCUpdateMapConfigRequestReadBackupDataFieldOffset + bufutil.BooleanSizeInBytes
    MCUpdateMapConfigRequestMaxSizePolicyFieldOffset = MCUpdateMapConfigRequestMaxSizeFieldOffset + bufutil.IntSizeInBytes
    MCUpdateMapConfigRequestInitialFrameSize = MCUpdateMapConfigRequestMaxSizePolicyFieldOffset + bufutil.IntSizeInBytes
    MCUpdateMapConfigResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCUpdateMapConfigRequestParameters struct {

    /**
    * Name of the map.
    */
mapName string

    /**
    * Time to live seconds for the map entries.
    */
timeToLiveSeconds int

    /**
    * Maximum idle seconds for the map entries.
    */
maxIdleSeconds int

    /**
    * The eviction policy of the map:
    * 0 - LRU
    * 1 - LFU
    * 2 - NONE
    * 3 - RANDOM
    */
evictionPolicy int

    /**
    * Whether reading from backup data is allowed.
    */
readBackupData bool

    /**
    * Maximum size of the map.
    */
maxSize int

    /**
    * The maximum size policy of the map:
    * 0 - PER_NODE
    * 1 - PER_PARTITION
    * 2 - USED_HEAP_PERCENTAGE
    * 3 - USED_HEAP_SIZE
    * 4 - FREE_HEAP_PERCENTAGE
    * 5 - FREE_HEAP_SIZE
    * 6 - USED_NATIVE_MEMORY_SIZE
    * 7 - USED_NATIVE_MEMORY_PERCENTAGE
    * 8 - FREE_NATIVE_MEMORY_SIZE
    * 9 - FREE_NATIVE_MEMORY_PERCENTAGE
    */
maxSizePolicy int
}

func MCUpdateMapConfigEncodeRequest(mapName string, timeToLiveSeconds int, maxIdleSeconds int, evictionPolicy int, readBackupData bool, maxSize int, maxSizePolicy int) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("MC.UpdateMapConfig")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCUpdateMapConfigRequestMessageType)
    bufutil.EncodeInt(initialFrame.Content, MCUpdateMapConfigRequestTimeToLiveSecondsFieldOffset, timeToLiveSeconds)
    bufutil.EncodeInt(initialFrame.Content, MCUpdateMapConfigRequestMaxIdleSecondsFieldOffset, maxIdleSeconds)
    bufutil.EncodeInt(initialFrame.Content, MCUpdateMapConfigRequestEvictionPolicyFieldOffset, evictionPolicy)
    bufutil.EncodeBoolean(initialFrame.Content, MCUpdateMapConfigRequestReadBackupDataFieldOffset, readBackupData)
    bufutil.EncodeInt(initialFrame.Content, MCUpdateMapConfigRequestMaxSizeFieldOffset, maxSize)
    bufutil.EncodeInt(initialFrame.Content, MCUpdateMapConfigRequestMaxSizePolicyFieldOffset, maxSizePolicy)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, mapName)
    return clientMessage
}

func MCUpdateMapConfigDecodeRequest(clientMessage *bufutil.ClientMessagex) *MCUpdateMapConfigRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MCUpdateMapConfigRequestParameters)
    initialFrame := iterator.Next()
    request.timeToLiveSeconds = bufutil.DecodeInt(initialFrame.Content, MCUpdateMapConfigRequestTimeToLiveSecondsFieldOffset)
    request.maxIdleSeconds = bufutil.DecodeInt(initialFrame.Content, MCUpdateMapConfigRequestMaxIdleSecondsFieldOffset)
    request.evictionPolicy = bufutil.DecodeInt(initialFrame.Content, MCUpdateMapConfigRequestEvictionPolicyFieldOffset)
    request.readBackupData = bufutil.DecodeBoolean(initialFrame.Content, MCUpdateMapConfigRequestReadBackupDataFieldOffset)
    request.maxSize = bufutil.DecodeInt(initialFrame.Content, MCUpdateMapConfigRequestMaxSizeFieldOffset)
    request.maxSizePolicy = bufutil.DecodeInt(initialFrame.Content, MCUpdateMapConfigRequestMaxSizePolicyFieldOffset)
    request.mapName = StringCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MCUpdateMapConfigResponseParameters struct {
}

func MCUpdateMapConfigEncodeResponse() *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MCUpdateMapConfigResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MCUpdateMapConfigResponseMessageType)
    clientMessage.Add(initialFrame)

    return clientMessage
}

func MCUpdateMapConfigDecodeResponse(clientMessage *bufutil.ClientMessagex) *MCUpdateMapConfigResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MCUpdateMapConfigResponseParameters)
    //empty initial frame
    iterator.Next()
    return response
}

