
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto



import (
     "github.com/hazelcast/hazelcast-go-client/serialization"
)


/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Removes the mapping for a key from this map if existing value equal to the this value
 */
//@Generated("a94025fe680c1143cfb2101e85249dc3")
const (
    //hex: 0x010800
    MapRemoveIfSameRequestMessageType = 67584
    //hex: 0x010801
    MapRemoveIfSameResponseMessageType = 67585
    MapRemoveIfSameRequestThreadIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes
    MapRemoveIfSameRequestInitialFrameSize = MapRemoveIfSameRequestThreadIdFieldOffset + LongSizeInBytes
    MapRemoveIfSameResponseResponseFieldOffset = CorrelationIdFieldOffset + IntSizeInBytes
    MapRemoveIfSameResponseInitialFrameSize = MapRemoveIfSameResponseResponseFieldOffset + BooleanSizeInBytes

)

func MapRemoveIfSameEncodeRequest(name string, key serialization.Data, value serialization.Data, threadId int64) *ClientMessage {
    clientMessage := CreateForEncode()
    clientMessage.SetRetryable( false )
    clientMessage.SetOperationName("Map.RemoveIfSame")
	initialFrame := &Frame{Content: make([]byte, MapRemoveIfSameResponseInitialFrameSize), Flags: UnfragmentedMessage}
    EncodeInt(initialFrame.Content, TypeFieldOffset, MapRemoveIfSameRequestMessageType)
    EncodeLong(initialFrame.Content, MapRemoveIfSameRequestThreadIdFieldOffset, threadId)
    clientMessage.Add(initialFrame)

    StringCodecEncode(clientMessage, name)


    DataCodecEncode(clientMessage, key)


    DataCodecEncode(clientMessage, value)

    return clientMessage
}


func MapRemoveIfSameDecodeResponse(clientMessage *ClientMessage) func() (/*** Returns true if the key exists and removed, otherwise returns false.*/response bool) {
    return func() (/*** Returns true if the key exists and removed, otherwise returns false.*/response bool) {
        iterator := clientMessage.FrameIterator()
        initialFrame := iterator.Next()
        response = DecodeBoolean(initialFrame.Content, MapRemoveIfSameResponseResponseFieldOffset)
        return
    }
}

