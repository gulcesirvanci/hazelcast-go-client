/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

import (
_"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
 * Applies the user defined EntryProcessor to the all entries in the map.Returns the results mapped by each key in the map.
 */
//@Generated("5f9793fb7fdcb46d2ea506abcc8acc71")
const (
    //hex: 0x013000
    MapExecuteOnAllKeysRequestMessageType = 77824
    //hex: 0x013001
    MapExecuteOnAllKeysResponseMessageType = 77825
    MapExecuteOnAllKeysRequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    MapExecuteOnAllKeysResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes

)

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapExecuteOnAllKeysRequestParameters struct {

    /**
    * name of map
    */
name string

    /**
    * entry processor to be executed.
    */
entryProcessor serialization.Data
}

func MapExecuteOnAllKeysEncodeRequest(name string, entryProcessor serialization.Data) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.IsRetryable = false
    clientMessage.SetAcquiresResource(false)
    clientMessage.SetOperationName("Map.ExecuteOnAllKeys")
	initialFrame := bufutil.Frame{make([]byte, ListAddAllResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapExecuteOnAllKeysRequestMessageType)
    clientMessage.Add(initialFrame)
    StringCodec.encode(clientMessage, name)
    DataCodec.encode(clientMessage, entryProcessor)
    return clientMessage
}

func MapExecuteOnAllKeysDecodeRequest(clientMessage *bufutil.ClientMessagex) *MapExecuteOnAllKeysRequestParameters {
    iterator := clientMessage.FrameIterator()
    request := new(MapExecuteOnAllKeysRequestParameters)
    //empty initial frame
    iterator.Next()
    request.name = StringCodec.decode(iterator)
    request.entryProcessor = DataCodec.decode(iterator)
    return request
}

/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type MapExecuteOnAllKeysResponseParameters struct {
    /**
    * results of entry process on the entries
    */
response java.util.List<[]serialization.Data, []serialization.Data>
}

func MapExecuteOnAllKeysEncodeResponse(response []serialization.Data, []serialization.Data ) *bufutil.ClientMessagex {
    clientMessage := bufutil.CreateForEncode()
	initialFrame := bufutil.Frame{make([]byte, MapExecuteOnAllKeysResponseInitialFrameSize), bufutil.UnfragmentedMessage}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, MapExecuteOnAllKeysResponseMessageType)
    clientMessage.Add(initialFrame)

    EntryListCodec.encode(clientMessage, response, DataCodecEncode, DataCodecEncode)
    return clientMessage
}

func MapExecuteOnAllKeysDecodeResponse(clientMessage *bufutil.ClientMessagex) *MapExecuteOnAllKeysResponseParameters {
    iterator := clientMessage.FrameIterator()
    response := new(MapExecuteOnAllKeysResponseParameters)
    //empty initial frame
    iterator.Next()
    response.response = EntryListCodec.decode(iterator, DataCodecDecode, DataCodecDecode)
    return response
}

